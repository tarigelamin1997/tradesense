import { c as create_ssr_component } from "../../../chunks/ssr.js";
import "../../../chunks/client.js";
import { a as authStore } from "../../../chunks/auth2.js";
import "../../../chunks/analytics.js";
const css = {
  code: ".spinner.svelte-13if8lh{width:2rem;height:2rem;border-width:4px;border-color:#c7d2fe;border-top-color:#4f46e5;border-radius:9999px;animation:spin 1s linear infinite}.form-select.svelte-13if8lh,.form-textarea.svelte-13if8lh{width:100%;border-radius:0.375rem;border-color:#d1d5db;box-shadow:0 1px 2px 0 rgba(0, 0, 0, 0.05)}.form-select.svelte-13if8lh:focus,.form-textarea.svelte-13if8lh:focus{border-color:#6366f1;box-shadow:0 0 0 3px rgba(99, 102, 241, 0.1)}.btn.svelte-13if8lh{padding:0.5rem 1rem;border-radius:0.375rem;font-weight:500;transition:background-color 0.15s ease-in-out, color 0.15s ease-in-out}.btn-secondary.svelte-13if8lh{background-color:#e5e7eb;color:#1f2937}.btn-secondary.svelte-13if8lh:hover{background-color:#d1d5db}.btn-danger.svelte-13if8lh{background-color:#dc2626;color:white}.btn-danger.svelte-13if8lh:hover{background-color:#b91c1c}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from 'svelte';\\n    import { browser } from '$app/environment';\\n    import { goto } from '$app/navigation';\\n    import { api } from '$lib/api/client-safe';\\n    import { authStore } from '$lib/stores/auth';\\n    import Icon from '$lib/components/Icon.svelte';\\n    import analytics from '$lib/analytics';\\n    \\n    let user = null;\\n    let currentPlan = null;\\n    let plans = [];\\n    let usage = null;\\n    let loading = true;\\n    let error = null;\\n    let showCancelModal = false;\\n    let cancelReason = '';\\n    let cancelFeedback = '';\\n    \\n    authStore.subscribe(value => {\\n        user = value.user;\\n    });\\n    \\n    async function loadSubscriptionData() {\\n        try {\\n            loading = true;\\n            error = null;\\n            \\n            const [plansData, currentData, usageData] = await Promise.all([\\n                api.get('/subscription/plans'),\\n                api.get('/subscription/current'),\\n                api.get('/subscription/usage')\\n            ]);\\n            \\n            plans = plansData.plans;\\n            currentPlan = currentData;\\n            usage = usageData;\\n            \\n            analytics.trackPageView('/subscription');\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to load subscription data';\\n        } finally {\\n            loading = false;\\n        }\\n    }\\n    \\n    async function selectPlan(planId) {\\n        if (planId === currentPlan.plan) return;\\n        \\n        try {\\n            if (planId === 'free') {\\n                // Downgrade to free\\n                showCancelModal = true;\\n            } else if (currentPlan.plan === 'free') {\\n                // Upgrade from free - go to checkout\\n                const response = await api.post('/subscription/checkout', {\\n                    plan: planId,\\n                    success_url: browser ? \`\${window.location.origin}/subscription/success\` : '/subscription/success',\\n                    cancel_url: browser ? \`\${window.location.origin}/subscription\` : '/subscription'\\n                });\\n                \\n                analytics.trackAction('start_checkout', 'subscription', { plan: planId });\\n                \\n                // Redirect to Stripe checkout\\n                if (browser) {\\n                    window.location.href = response.checkout_url;\\n                }\\n            } else {\\n                // Change between paid plans\\n                const response = await api.post('/subscription/change-plan', {\\n                    new_plan: planId\\n                });\\n                \\n                if (response.success) {\\n                    analytics.trackSubscription(\\n                        response.new_plan > currentPlan.plan ? 'upgraded' : 'downgraded',\\n                        planId,\\n                        plans.find(p => p.id === planId).price\\n                    );\\n                    \\n                    await loadSubscriptionData();\\n                }\\n            }\\n        } catch (err) {\\n            error = err.message || 'Failed to change plan';\\n        }\\n    }\\n    \\n    async function cancelSubscription() {\\n        try {\\n            await api.post('/subscription/cancel', {\\n                reason: cancelReason,\\n                feedback: cancelFeedback\\n            });\\n            \\n            analytics.trackSubscription('cancelled', 'free', 0);\\n            \\n            showCancelModal = false;\\n            await loadSubscriptionData();\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to cancel subscription';\\n        }\\n    }\\n    \\n    async function reactivateSubscription() {\\n        try {\\n            await api.post('/subscription/reactivate');\\n            \\n            analytics.trackAction('reactivate_subscription', 'subscription');\\n            \\n            await loadSubscriptionData();\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to reactivate subscription';\\n        }\\n    }\\n    \\n    async function openCustomerPortal() {\\n        try {\\n            const response = await api.post('/subscription/customer-portal', {\\n                return_url: browser ? window.location.href : '/subscription'\\n            });\\n            \\n            analytics.trackAction('open_customer_portal', 'subscription');\\n            \\n            if (browser) {\\n                window.location.href = response.portal_url;\\n            }\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to open customer portal';\\n        }\\n    }\\n    \\n    function formatCurrency(amount) {\\n        return new Intl.NumberFormat('en-US', {\\n            style: 'currency',\\n            currency: 'USD'\\n        }).format(amount);\\n    }\\n    \\n    function formatDate(dateString) {\\n        return new Date(dateString).toLocaleDateString('en-US', {\\n            year: 'numeric',\\n            month: 'long',\\n            day: 'numeric'\\n        });\\n    }\\n    \\n    function getUsageColor(percentage) {\\n        if (percentage >= 90) return 'text-red-600 bg-red-100';\\n        if (percentage >= 75) return 'text-yellow-600 bg-yellow-100';\\n        return 'text-green-600 bg-green-100';\\n    }\\n    \\n    onMount(() => {\\n        loadSubscriptionData();\\n    });\\n<\/script>\\n\\n<div class=\\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\\">\\n    {#if loading}\\n        <div class=\\"flex justify-center py-12\\">\\n            <div class=\\"spinner\\"></div>\\n        </div>\\n    {:else if error}\\n        <div class=\\"alert alert-error mb-6\\">{error}</div>\\n    {:else}\\n        <!-- Current Plan Section -->\\n        <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\\">\\n            <h2 class=\\"text-2xl font-bold text-gray-900 mb-4\\">Current Subscription</h2>\\n            \\n            <div class=\\"grid grid-cols-1 md:grid-cols-2 gap-6\\">\\n                <div>\\n                    <p class=\\"text-sm text-gray-600\\">Plan</p>\\n                    <p class=\\"text-xl font-semibold text-gray-900 capitalize\\">{currentPlan.plan}</p>\\n                    \\n                    <p class=\\"text-sm text-gray-600 mt-4\\">Status</p>\\n                    <div class=\\"flex items-center mt-1\\">\\n                        <span class=\\"w-2 h-2 rounded-full mr-2 \\n                                   {currentPlan.status === 'active' ? 'bg-green-400' : \\n                                    currentPlan.status === 'past_due' ? 'bg-yellow-400' : \\n                                    'bg-gray-400'}\\"></span>\\n                        <span class=\\"text-lg capitalize\\">{currentPlan.status}</span>\\n                    </div>\\n                    \\n                    {#if currentPlan.current_period_end}\\n                        <p class=\\"text-sm text-gray-600 mt-4\\">Next billing date</p>\\n                        <p class=\\"text-lg\\">{formatDate(currentPlan.current_period_end)}</p>\\n                    {/if}\\n                    \\n                    {#if currentPlan.cancel_at_period_end}\\n                        <div class=\\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\\">\\n                            <p class=\\"text-sm text-yellow-800\\">\\n                                Your subscription will end on {formatDate(currentPlan.current_period_end)}\\n                            </p>\\n                            <button\\n                                on:click={reactivateSubscription}\\n                                class=\\"text-sm font-medium text-yellow-800 hover:text-yellow-900 mt-1\\"\\n                            >\\n                                Reactivate subscription\\n                            </button>\\n                        </div>\\n                    {/if}\\n                </div>\\n                \\n                <div>\\n                    <p class=\\"text-sm text-gray-600\\">Features</p>\\n                    <ul class=\\"mt-2 space-y-2\\">\\n                        {#each currentPlan.features as feature}\\n                            <li class=\\"flex items-start\\">\\n                                <Icon name=\\"check\\" class=\\"w-5 h-5 text-green-500 mt-0.5 mr-2 flex-shrink-0\\" />\\n                                <span class=\\"text-sm text-gray-700\\">{feature}</span>\\n                            </li>\\n                        {/each}\\n                    </ul>\\n                    \\n                    {#if currentPlan.plan !== 'free'}\\n                        <button\\n                            on:click={openCustomerPortal}\\n                            class=\\"mt-4 text-sm text-indigo-600 hover:text-indigo-700 font-medium\\"\\n                        >\\n                            Manage billing & payment methods →\\n                        </button>\\n                    {/if}\\n                </div>\\n            </div>\\n        </div>\\n        \\n        <!-- Usage Section -->\\n        {#if usage}\\n            <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\\">\\n                <h3 class=\\"text-lg font-semibold text-gray-900 mb-4\\">Current Usage</h3>\\n                \\n                <div class=\\"grid grid-cols-1 md:grid-cols-2 gap-6\\">\\n                    <!-- Trades Usage -->\\n                    <div>\\n                        <div class=\\"flex justify-between items-baseline mb-2\\">\\n                            <span class=\\"text-sm font-medium text-gray-700\\">Trades This Month</span>\\n                            <span class=\\"text-sm text-gray-600\\">\\n                                {usage.usage.trades.unlimited ? 'Unlimited' : \`\${usage.usage.trades.current} / \${usage.usage.trades.limit}\`}\\n                            </span>\\n                        </div>\\n                        {#if !usage.usage.trades.unlimited}\\n                            <div class=\\"w-full bg-gray-200 rounded-full h-2\\">\\n                                <div \\n                                    class=\\"h-2 rounded-full transition-all duration-300\\n                                           {usage.usage.trades.percentage >= 90 ? 'bg-red-500' :\\n                                            usage.usage.trades.percentage >= 75 ? 'bg-yellow-500' :\\n                                            'bg-green-500'}\\"\\n                                    style=\\"width: {Math.min(usage.usage.trades.percentage, 100)}%\\"\\n                                ></div>\\n                            </div>\\n                        {:else}\\n                            <div class=\\"text-xs text-gray-500\\">No limits on {currentPlan.plan} plan</div>\\n                        {/if}\\n                    </div>\\n                    \\n                    <!-- API Usage -->\\n                    <div>\\n                        <div class=\\"flex justify-between items-baseline mb-2\\">\\n                            <span class=\\"text-sm font-medium text-gray-700\\">API Calls Today</span>\\n                            <span class=\\"text-sm text-gray-600\\">\\n                                {usage.usage.api_calls.unlimited ? 'Unlimited' : \`\${usage.usage.api_calls.current} / \${usage.usage.api_calls.limit}\`}\\n                            </span>\\n                        </div>\\n                        {#if !usage.usage.api_calls.unlimited}\\n                            <div class=\\"w-full bg-gray-200 rounded-full h-2\\">\\n                                <div \\n                                    class=\\"h-2 rounded-full transition-all duration-300\\n                                           {usage.usage.api_calls.percentage >= 90 ? 'bg-red-500' :\\n                                            usage.usage.api_calls.percentage >= 75 ? 'bg-yellow-500' :\\n                                            'bg-green-500'}\\"\\n                                    style=\\"width: {Math.min(usage.usage.api_calls.percentage, 100)}%\\"\\n                                ></div>\\n                            </div>\\n                        {:else}\\n                            <div class=\\"text-xs text-gray-500\\">No limits on {currentPlan.plan} plan</div>\\n                        {/if}\\n                    </div>\\n                </div>\\n            </div>\\n        {/if}\\n        \\n        <!-- Plans Section -->\\n        <div>\\n            <h3 class=\\"text-xl font-bold text-gray-900 mb-6\\">Available Plans</h3>\\n            \\n            <div class=\\"grid grid-cols-1 md:grid-cols-3 gap-6\\">\\n                {#each plans as plan}\\n                    <div class=\\"bg-white rounded-lg shadow-sm border-2 transition-all\\n                                {plan.id === currentPlan.plan ? 'border-indigo-500' : 'border-gray-200'}\\n                                {plan.popular ? 'transform scale-105' : ''}\\">\\n                        {#if plan.popular}\\n                            <div class=\\"bg-indigo-500 text-white text-sm font-medium text-center py-2 rounded-t-md\\">\\n                                Most Popular\\n                            </div>\\n                        {/if}\\n                        \\n                        <div class=\\"p-6\\">\\n                            <h4 class=\\"text-xl font-bold text-gray-900\\">{plan.name}</h4>\\n                            <div class=\\"mt-4 flex items-baseline\\">\\n                                <span class=\\"text-4xl font-extrabold text-gray-900\\">\\n                                    {formatCurrency(plan.price)}\\n                                </span>\\n                                <span class=\\"ml-1 text-gray-500\\">/month</span>\\n                            </div>\\n                            \\n                            <ul class=\\"mt-6 space-y-3\\">\\n                                {#each plan.features as feature}\\n                                    <li class=\\"flex items-start\\">\\n                                        <Icon name=\\"check\\" class=\\"w-5 h-5 text-green-500 mt-0.5 mr-3 flex-shrink-0\\" />\\n                                        <span class=\\"text-sm text-gray-700\\">{feature}</span>\\n                                    </li>\\n                                {/each}\\n                            </ul>\\n                            \\n                            <button\\n                                on:click={() => selectPlan(plan.id)}\\n                                disabled={plan.id === currentPlan.plan}\\n                                class=\\"mt-8 w-full py-2 px-4 rounded-md font-medium transition-colors\\n                                       {plan.id === currentPlan.plan ? \\n                                        'bg-gray-100 text-gray-400 cursor-not-allowed' :\\n                                        plan.popular ? \\n                                        'bg-indigo-600 text-white hover:bg-indigo-700' :\\n                                        'bg-gray-800 text-white hover:bg-gray-900'}\\"\\n                            >\\n                                {plan.id === currentPlan.plan ? 'Current Plan' : \\n                                 plan.price > (plans.find(p => p.id === currentPlan.plan)?.price || 0) ? 'Upgrade' : \\n                                 plan.price === 0 ? 'Downgrade' : 'Switch Plan'}\\n                            </button>\\n                        </div>\\n                    </div>\\n                {/each}\\n            </div>\\n        </div>\\n    {/if}\\n</div>\\n\\n<!-- Cancel Subscription Modal -->\\n{#if showCancelModal}\\n    <div class=\\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\\">\\n        <div class=\\"bg-white rounded-lg shadow-xl max-w-md w-full mx-4 p-6\\">\\n            <h3 class=\\"text-xl font-semibold text-gray-900 mb-4\\">Cancel Subscription</h3>\\n            \\n            <p class=\\"text-gray-600 mb-4\\">\\n                We're sorry to see you go. Your subscription will remain active until the end of your current billing period.\\n            </p>\\n            \\n            <div class=\\"space-y-4\\">\\n                <div>\\n                    <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                        Reason for cancelling (optional)\\n                    </label>\\n                    <select bind:value={cancelReason} class=\\"form-select\\">\\n                        <option value=\\"\\">Select a reason</option>\\n                        <option value=\\"too_expensive\\">Too expensive</option>\\n                        <option value=\\"not_using\\">Not using enough</option>\\n                        <option value=\\"missing_features\\">Missing features</option>\\n                        <option value=\\"found_alternative\\">Found alternative</option>\\n                        <option value=\\"other\\">Other</option>\\n                    </select>\\n                </div>\\n                \\n                <div>\\n                    <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                        Additional feedback (optional)\\n                    </label>\\n                    <textarea\\n                        bind:value={cancelFeedback}\\n                        rows=\\"3\\"\\n                        class=\\"form-textarea\\"\\n                        placeholder=\\"Let us know how we can improve...\\"\\n                    ></textarea>\\n                </div>\\n            </div>\\n            \\n            <div class=\\"mt-6 flex justify-end space-x-3\\">\\n                <button\\n                    on:click={() => showCancelModal = false}\\n                    class=\\"btn btn-secondary\\"\\n                >\\n                    Keep Subscription\\n                </button>\\n                <button\\n                    on:click={cancelSubscription}\\n                    class=\\"btn btn-danger\\"\\n                >\\n                    Cancel Subscription\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n{/if}\\n\\n<style>\\n    .spinner {\\n        width: 2rem; height: 2rem; border-width: 4px; border-color: #c7d2fe; border-top-color: #4f46e5; border-radius: 9999px; animation: spin 1s linear infinite;\\n    }\\n    \\n    .form-select, .form-textarea {\\n        width: 100%;\\n        border-radius: 0.375rem;\\n        border-color: #d1d5db;\\n        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\\n    }\\n    \\n    .form-select:focus, .form-textarea:focus {\\n        border-color: #6366f1;\\n        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\\n    }\\n    \\n    .btn {\\n        padding: 0.5rem 1rem;\\n        border-radius: 0.375rem;\\n        font-weight: 500;\\n        transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;\\n    }\\n    \\n    .btn-secondary {\\n        background-color: #e5e7eb;\\n        color: #1f2937;\\n    }\\n    \\n    .btn-secondary:hover {\\n        background-color: #d1d5db;\\n    }\\n    \\n    .btn-danger {\\n        background-color: #dc2626;\\n        color: white;\\n    }\\n    \\n    .btn-danger:hover {\\n        background-color: #b91c1c;\\n    }\\n</style>"],"names":[],"mappings":"AA8YI,uBAAS,CACL,KAAK,CAAE,IAAI,CAAE,MAAM,CAAE,IAAI,CAAE,YAAY,CAAE,GAAG,CAAE,YAAY,CAAE,OAAO,CAAE,gBAAgB,CAAE,OAAO,CAAE,aAAa,CAAE,MAAM,CAAE,SAAS,CAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QACrJ,CAEA,2BAAY,CAAE,6BAAe,CACzB,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,QAAQ,CACvB,YAAY,CAAE,OAAO,CACrB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAC9C,CAEA,2BAAY,MAAM,CAAE,6BAAc,MAAO,CACrC,YAAY,CAAE,OAAO,CACrB,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAChD,CAEA,mBAAK,CACD,OAAO,CAAE,MAAM,CAAC,IAAI,CACpB,aAAa,CAAE,QAAQ,CACvB,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,gBAAgB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,WAChE,CAEA,6BAAe,CACX,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OACX,CAEA,6BAAc,MAAO,CACjB,gBAAgB,CAAE,OACtB,CAEA,0BAAY,CACR,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KACX,CAEA,0BAAW,MAAO,CACd,gBAAgB,CAAE,OACtB"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  authStore.subscribe((value) => {
    value.user;
  });
  $$result.css.add(css);
  return `<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">${`<div class="flex justify-center py-12" data-svelte-h="svelte-em5o00"><div class="spinner svelte-13if8lh"></div></div>`}</div>  ${``}`;
});
export {
  Page as default
};
