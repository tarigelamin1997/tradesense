import { c as create_ssr_component, v as validate_component, a as add_attribute, b as escape, e as each } from "../../../../chunks/ssr.js";
import { a as api } from "../../../../chunks/ssr-safe.js";
import { I as Icon } from "../../../../chunks/Icon.js";
import "../../../../chunks/analytics.js";
const css = {
  code: ".spinner.svelte-178td72{width:2rem;height:2rem;border-width:4px;border-color:#c7d2fe;border-top-color:#4f46e5;border-radius:9999px;animation:spin 1s linear infinite}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from 'svelte';\\n    import { browser } from '$app/environment';\\n    import { api } from '$lib/api/ssr-safe';\\n    import Icon from '$lib/components/Icon.svelte';\\n    import analytics from '$lib/analytics';\\n    \\n    let users = [];\\n    let loading = true;\\n    let error = null;\\n    let selectedUsers = new Set();\\n    \\n    // Pagination\\n    let currentPage = 1;\\n    let pageSize = 50;\\n    let totalUsers = 0;\\n    \\n    // Filters\\n    let searchQuery = '';\\n    let filterTier = '';\\n    let filterStatus = '';\\n    let sortBy = 'created_at';\\n    let sortOrder = 'desc';\\n    \\n    // User details modal\\n    let selectedUser = null;\\n    let showUserModal = false;\\n    \\n    // Edit user\\n    let editingUser = null;\\n    let showEditModal = false;\\n    \\n    async function loadUsers() {\\n        try {\\n            loading = true;\\n            error = null;\\n            \\n            const skip = (currentPage - 1) * pageSize;\\n            const params = new URLSearchParams({\\n                skip,\\n                limit: pageSize,\\n                sort_by: sortBy,\\n                sort_order: sortOrder\\n            });\\n            \\n            if (searchQuery) params.append('search', searchQuery);\\n            if (filterTier) params.append('subscription_tier', filterTier);\\n            if (filterStatus) params.append('status', filterStatus);\\n            \\n            const response = await api.get(\`/admin/users?\${params}\`);\\n            users = response.users;\\n            totalUsers = response.total;\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to load users';\\n        } finally {\\n            loading = false;\\n        }\\n    }\\n    \\n    async function viewUserDetails(userId) {\\n        try {\\n            const response = await api.get(\`/admin/users/\${userId}\`);\\n            selectedUser = response;\\n            showUserModal = true;\\n            \\n            analytics.trackAction('view_user_details', 'admin', { user_id: userId });\\n        } catch (err) {\\n            error = err.message || 'Failed to load user details';\\n        }\\n    }\\n    \\n    async function updateUser(userId, updates) {\\n        try {\\n            await api.put(\`/admin/users/\${userId}\`, updates);\\n            await loadUsers();\\n            showEditModal = false;\\n            editingUser = null;\\n            \\n            analytics.trackAction('update_user', 'admin', { user_id: userId });\\n        } catch (err) {\\n            error = err.message || 'Failed to update user';\\n        }\\n    }\\n    \\n    async function deleteUser(userId) {\\n        if (!confirm('Are you sure you want to delete this user?')) return;\\n        \\n        try {\\n            await api.delete(\`/admin/users/\${userId}\`);\\n            await loadUsers();\\n            \\n            analytics.trackAction('delete_user', 'admin', { user_id: userId });\\n        } catch (err) {\\n            error = err.message || 'Failed to delete user';\\n        }\\n    }\\n    \\n    async function performBulkAction(action) {\\n        if (selectedUsers.size === 0) {\\n            alert('Please select users first');\\n            return;\\n        }\\n        \\n        try {\\n            await api.post('/admin/users/bulk-action', {\\n                user_ids: Array.from(selectedUsers),\\n                action\\n            });\\n            \\n            selectedUsers.clear();\\n            await loadUsers();\\n            \\n            analytics.trackAction('bulk_action', 'admin', { \\n                action, \\n                user_count: selectedUsers.size \\n            });\\n        } catch (err) {\\n            error = err.message || 'Failed to perform bulk action';\\n        }\\n    }\\n    \\n    async function impersonateUser(userId) {\\n        if (!confirm('Are you sure you want to impersonate this user?')) return;\\n        \\n        try {\\n            const response = await api.post(\`/admin/users/\${userId}/impersonate\`);\\n            \\n            // Store the impersonation token\\n            if (browser) {\\n                localStorage.setItem('impersonation_token', response.token);\\n                localStorage.setItem('impersonated_user', JSON.stringify(response.user));\\n                \\n                // Redirect to dashboard as the user\\n                window.location.href = '/dashboard';\\n            }\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to impersonate user';\\n        }\\n    }\\n    \\n    function toggleUserSelection(userId) {\\n        if (selectedUsers.has(userId)) {\\n            selectedUsers.delete(userId);\\n        } else {\\n            selectedUsers.add(userId);\\n        }\\n        selectedUsers = selectedUsers; // Trigger reactivity\\n    }\\n    \\n    function selectAllUsers() {\\n        if (selectedUsers.size === users.length) {\\n            selectedUsers.clear();\\n        } else {\\n            users.forEach(user => selectedUsers.add(user.id));\\n        }\\n        selectedUsers = selectedUsers; // Trigger reactivity\\n    }\\n    \\n    function formatDate(dateString) {\\n        if (!dateString) return 'Never';\\n        return new Date(dateString).toLocaleDateString();\\n    }\\n    \\n    function getTierColor(tier) {\\n        switch (tier) {\\n            case 'premium': return 'bg-purple-100 text-purple-800';\\n            case 'pro': return 'bg-indigo-100 text-indigo-800';\\n            default: return 'bg-gray-100 text-gray-800';\\n        }\\n    }\\n    \\n    $: totalPages = Math.ceil(totalUsers / pageSize);\\n    \\n    // Reload when filters change\\n    $: if (searchQuery !== undefined || filterTier !== undefined || filterStatus !== undefined || sortBy || sortOrder) {\\n        currentPage = 1;\\n        loadUsers();\\n    }\\n    \\n    onMount(() => {\\n        loadUsers();\\n    });\\n<\/script>\\n\\n<div class=\\"space-y-6\\">\\n    <!-- Page Header -->\\n    <div class=\\"flex justify-between items-center\\">\\n        <div>\\n            <h2 class=\\"text-2xl font-bold text-gray-900\\">User Management</h2>\\n            <p class=\\"text-gray-600 mt-1\\">Manage users, subscriptions, and access</p>\\n        </div>\\n        <button class=\\"btn btn-primary\\">\\n            <Icon name=\\"user-plus\\" class=\\"w-4 h-4 mr-2\\" />\\n            Add User\\n        </button>\\n    </div>\\n    \\n    <!-- Filters -->\\n    <div class=\\"admin-card\\">\\n        <div class=\\"grid grid-cols-1 md:grid-cols-4 gap-4\\">\\n            <div>\\n                <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">Search</label>\\n                <input\\n                    type=\\"text\\"\\n                    bind:value={searchQuery}\\n                    placeholder=\\"Email or name...\\"\\n                    class=\\"form-input\\"\\n                />\\n            </div>\\n            <div>\\n                <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">Subscription</label>\\n                <select bind:value={filterTier} class=\\"form-select\\">\\n                    <option value=\\"\\">All Tiers</option>\\n                    <option value=\\"free\\">Free</option>\\n                    <option value=\\"pro\\">Pro</option>\\n                    <option value=\\"premium\\">Premium</option>\\n                </select>\\n            </div>\\n            <div>\\n                <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">Status</label>\\n                <select bind:value={filterStatus} class=\\"form-select\\">\\n                    <option value=\\"\\">All Status</option>\\n                    <option value=\\"active\\">Active</option>\\n                    <option value=\\"inactive\\">Inactive</option>\\n                    <option value=\\"paid\\">Paid Only</option>\\n                </select>\\n            </div>\\n            <div>\\n                <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">Sort By</label>\\n                <select bind:value={sortBy} class=\\"form-select\\">\\n                    <option value=\\"created_at\\">Join Date</option>\\n                    <option value=\\"last_login\\">Last Login</option>\\n                    <option value=\\"email\\">Email</option>\\n                </select>\\n            </div>\\n        </div>\\n    </div>\\n    \\n    <!-- Bulk Actions -->\\n    {#if selectedUsers.size > 0}\\n        <div class=\\"bg-indigo-50 border border-indigo-200 rounded-lg p-4\\">\\n            <div class=\\"flex items-center justify-between\\">\\n                <span class=\\"text-sm font-medium text-indigo-900\\">\\n                    {selectedUsers.size} user{selectedUsers.size === 1 ? '' : 's'} selected\\n                </span>\\n                <div class=\\"space-x-2\\">\\n                    <button\\n                        on:click={() => performBulkAction('activate')}\\n                        class=\\"btn btn-sm btn-secondary\\"\\n                    >\\n                        Activate\\n                    </button>\\n                    <button\\n                        on:click={() => performBulkAction('deactivate')}\\n                        class=\\"btn btn-sm btn-secondary\\"\\n                    >\\n                        Deactivate\\n                    </button>\\n                    <button\\n                        on:click={() => selectedUsers.clear()}\\n                        class=\\"btn btn-sm btn-ghost\\"\\n                    >\\n                        Clear\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    {/if}\\n    \\n    <!-- Users Table -->\\n    <div class=\\"admin-card\\">\\n        {#if loading}\\n            <div class=\\"flex justify-center py-8\\">\\n                <div class=\\"spinner\\"></div>\\n            </div>\\n        {:else if error}\\n            <div class=\\"alert alert-error\\">{error}</div>\\n        {:else}\\n            <div class=\\"overflow-x-auto\\">\\n                <table class=\\"admin-table\\">\\n                    <thead>\\n                        <tr>\\n                            <th>\\n                                <input\\n                                    type=\\"checkbox\\"\\n                                    checked={selectedUsers.size === users.length && users.length > 0}\\n                                    on:change={selectAllUsers}\\n                                    class=\\"form-checkbox\\"\\n                                />\\n                            </th>\\n                            <th>User</th>\\n                            <th>Subscription</th>\\n                            <th>Status</th>\\n                            <th>Trades</th>\\n                            <th>Joined</th>\\n                            <th>Last Login</th>\\n                            <th>Actions</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody class=\\"divide-y divide-gray-200\\">\\n                        {#each users as user}\\n                            <tr class=\\"hover:bg-gray-50\\">\\n                                <td>\\n                                    <input\\n                                        type=\\"checkbox\\"\\n                                        checked={selectedUsers.has(user.id)}\\n                                        on:change={() => toggleUserSelection(user.id)}\\n                                        class=\\"form-checkbox\\"\\n                                    />\\n                                </td>\\n                                <td>\\n                                    <div>\\n                                        <div class=\\"text-sm font-medium text-gray-900\\">\\n                                            {user.full_name}\\n                                        </div>\\n                                        <div class=\\"text-sm text-gray-500\\">\\n                                            {user.email}\\n                                        </div>\\n                                    </div>\\n                                </td>\\n                                <td>\\n                                    <span class=\\"px-2 py-1 text-xs font-medium rounded-full {getTierColor(user.subscription_tier)}\\">\\n                                        {user.subscription_tier}\\n                                    </span>\\n                                </td>\\n                                <td>\\n                                    <span class=\\"flex items-center text-sm\\">\\n                                        <span class=\\"w-2 h-2 rounded-full mr-2 {user.is_active ? 'bg-green-400' : 'bg-gray-400'}\\"></span>\\n                                        {user.is_active ? 'Active' : 'Inactive'}\\n                                    </span>\\n                                </td>\\n                                <td class=\\"text-center\\">\\n                                    {user.trade_count || 0}\\n                                </td>\\n                                <td>\\n                                    {formatDate(user.created_at)}\\n                                </td>\\n                                <td>\\n                                    {formatDate(user.last_login)}\\n                                </td>\\n                                <td>\\n                                    <div class=\\"flex items-center space-x-2\\">\\n                                        <button\\n                                            on:click={() => viewUserDetails(user.id)}\\n                                            class=\\"text-indigo-600 hover:text-indigo-900\\"\\n                                            title=\\"View Details\\"\\n                                        >\\n                                            <Icon name=\\"eye\\" class=\\"w-4 h-4\\" />\\n                                        </button>\\n                                        <button\\n                                            on:click={() => {editingUser = user; showEditModal = true;}}\\n                                            class=\\"text-gray-600 hover:text-gray-900\\"\\n                                            title=\\"Edit\\"\\n                                        >\\n                                            <Icon name=\\"pencil\\" class=\\"w-4 h-4\\" />\\n                                        </button>\\n                                        <button\\n                                            on:click={() => impersonateUser(user.id)}\\n                                            class=\\"text-purple-600 hover:text-purple-900\\"\\n                                            title=\\"Impersonate\\"\\n                                        >\\n                                            <Icon name=\\"user-switch\\" class=\\"w-4 h-4\\" />\\n                                        </button>\\n                                        <button\\n                                            on:click={() => deleteUser(user.id)}\\n                                            class=\\"text-red-600 hover:text-red-900\\"\\n                                            title=\\"Delete\\"\\n                                        >\\n                                            <Icon name=\\"trash\\" class=\\"w-4 h-4\\" />\\n                                        </button>\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        {/each}\\n                    </tbody>\\n                </table>\\n            </div>\\n            \\n            <!-- Pagination -->\\n            <div class=\\"mt-4 flex items-center justify-between\\">\\n                <div class=\\"text-sm text-gray-700\\">\\n                    Showing {(currentPage - 1) * pageSize + 1} to {Math.min(currentPage * pageSize, totalUsers)} of {totalUsers} users\\n                </div>\\n                <div class=\\"flex space-x-2\\">\\n                    <button\\n                        on:click={() => currentPage--}\\n                        disabled={currentPage === 1}\\n                        class=\\"btn btn-sm btn-secondary\\"\\n                    >\\n                        Previous\\n                    </button>\\n                    <button\\n                        on:click={() => currentPage++}\\n                        disabled={currentPage === totalPages}\\n                        class=\\"btn btn-sm btn-secondary\\"\\n                    >\\n                        Next\\n                    </button>\\n                </div>\\n            </div>\\n        {/if}\\n    </div>\\n</div>\\n\\n<!-- User Details Modal -->\\n{#if showUserModal && selectedUser}\\n    <div class=\\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\\">\\n        <div class=\\"bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto\\">\\n            <div class=\\"p-6\\">\\n                <div class=\\"flex justify-between items-start mb-6\\">\\n                    <h3 class=\\"text-xl font-semibold text-gray-900\\">User Details</h3>\\n                    <button\\n                        on:click={() => {showUserModal = false; selectedUser = null;}}\\n                        class=\\"text-gray-400 hover:text-gray-600\\"\\n                    >\\n                        <Icon name=\\"x\\" class=\\"w-6 h-6\\" />\\n                    </button>\\n                </div>\\n                \\n                <!-- User info -->\\n                <div class=\\"grid grid-cols-2 gap-6 mb-6\\">\\n                    <div>\\n                        <h4 class=\\"font-medium text-gray-900 mb-2\\">Basic Information</h4>\\n                        <dl class=\\"space-y-2\\">\\n                            <div>\\n                                <dt class=\\"text-sm text-gray-500\\">Name</dt>\\n                                <dd class=\\"text-sm font-medium\\">{selectedUser.user.full_name}</dd>\\n                            </div>\\n                            <div>\\n                                <dt class=\\"text-sm text-gray-500\\">Email</dt>\\n                                <dd class=\\"text-sm font-medium\\">{selectedUser.user.email}</dd>\\n                            </div>\\n                            <div>\\n                                <dt class=\\"text-sm text-gray-500\\">Role</dt>\\n                                <dd class=\\"text-sm font-medium capitalize\\">{selectedUser.user.role}</dd>\\n                            </div>\\n                        </dl>\\n                    </div>\\n                    <div>\\n                        <h4 class=\\"font-medium text-gray-900 mb-2\\">Subscription</h4>\\n                        <dl class=\\"space-y-2\\">\\n                            <div>\\n                                <dt class=\\"text-sm text-gray-500\\">Tier</dt>\\n                                <dd class=\\"text-sm font-medium capitalize\\">{selectedUser.user.subscription_tier}</dd>\\n                            </div>\\n                            <div>\\n                                <dt class=\\"text-sm text-gray-500\\">Status</dt>\\n                                <dd class=\\"text-sm font-medium\\">{selectedUser.user.subscription_status}</dd>\\n                            </div>\\n                            <div>\\n                                <dt class=\\"text-sm text-gray-500\\">Started</dt>\\n                                <dd class=\\"text-sm font-medium\\">{formatDate(selectedUser.user.subscription_started_at)}</dd>\\n                            </div>\\n                        </dl>\\n                    </div>\\n                </div>\\n                \\n                <!-- Statistics -->\\n                <div class=\\"mb-6\\">\\n                    <h4 class=\\"font-medium text-gray-900 mb-2\\">Activity Statistics</h4>\\n                    <div class=\\"grid grid-cols-4 gap-4\\">\\n                        <div class=\\"bg-gray-50 p-3 rounded\\">\\n                            <p class=\\"text-xs text-gray-500\\">Total Events</p>\\n                            <p class=\\"text-lg font-semibold\\">{selectedUser.statistics.total_events}</p>\\n                        </div>\\n                        <div class=\\"bg-gray-50 p-3 rounded\\">\\n                            <p class=\\"text-xs text-gray-500\\">Active Days</p>\\n                            <p class=\\"text-lg font-semibold\\">{selectedUser.statistics.active_days}</p>\\n                        </div>\\n                        <div class=\\"bg-gray-50 p-3 rounded\\">\\n                            <p class=\\"text-xs text-gray-500\\">Total Sessions</p>\\n                            <p class=\\"text-lg font-semibold\\">{selectedUser.statistics.total_sessions}</p>\\n                        </div>\\n                        <div class=\\"bg-gray-50 p-3 rounded\\">\\n                            <p class=\\"text-xs text-gray-500\\">Last Activity</p>\\n                            <p class=\\"text-lg font-semibold\\">{formatDate(selectedUser.statistics.last_activity)}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                \\n                <!-- Recent Activity -->\\n                <div>\\n                    <h4 class=\\"font-medium text-gray-900 mb-2\\">Recent Activity</h4>\\n                    <div class=\\"space-y-2 max-h-48 overflow-y-auto\\">\\n                        {#each selectedUser.recent_activity as activity}\\n                            <div class=\\"text-sm border-l-2 border-gray-200 pl-3 py-1\\">\\n                                <span class=\\"font-medium\\">{activity.event_type}</span>\\n                                <span class=\\"text-gray-500 ml-2\\">\\n                                    {new Date(activity.timestamp).toLocaleString()}\\n                                </span>\\n                            </div>\\n                        {/each}\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n{/if}\\n\\n<!-- Edit User Modal -->\\n{#if showEditModal && editingUser}\\n    <div class=\\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\\">\\n        <div class=\\"bg-white rounded-lg shadow-xl max-w-md w-full mx-4\\">\\n            <div class=\\"p-6\\">\\n                <h3 class=\\"text-xl font-semibold text-gray-900 mb-4\\">Edit User</h3>\\n                \\n                <form on:submit|preventDefault={() => updateUser(editingUser.id, editingUser)}>\\n                    <div class=\\"space-y-4\\">\\n                        <div>\\n                            <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">Full Name</label>\\n                            <input\\n                                type=\\"text\\"\\n                                bind:value={editingUser.full_name}\\n                                class=\\"form-input\\"\\n                            />\\n                        </div>\\n                        \\n                        <div>\\n                            <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">Email</label>\\n                            <input\\n                                type=\\"email\\"\\n                                bind:value={editingUser.email}\\n                                class=\\"form-input\\"\\n                            />\\n                        </div>\\n                        \\n                        <div>\\n                            <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">Subscription Tier</label>\\n                            <select bind:value={editingUser.subscription_tier} class=\\"form-select\\">\\n                                <option value=\\"free\\">Free</option>\\n                                <option value=\\"pro\\">Pro</option>\\n                                <option value=\\"premium\\">Premium</option>\\n                            </select>\\n                        </div>\\n                        \\n                        <div>\\n                            <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">Status</label>\\n                            <select bind:value={editingUser.is_active} class=\\"form-select\\">\\n                                <option value={true}>Active</option>\\n                                <option value={false}>Inactive</option>\\n                            </select>\\n                        </div>\\n                    </div>\\n                    \\n                    <div class=\\"mt-6 flex justify-end space-x-2\\">\\n                        <button\\n                            type=\\"button\\"\\n                            on:click={() => {showEditModal = false; editingUser = null;}}\\n                            class=\\"btn btn-secondary\\"\\n                        >\\n                            Cancel\\n                        </button>\\n                        <button type=\\"submit\\" class=\\"btn btn-primary\\">\\n                            Save Changes\\n                        </button>\\n                    </div>\\n                </form>\\n            </div>\\n        </div>\\n    </div>\\n{/if}\\n\\n<style>\\n    .spinner {\\n        width: 2rem; height: 2rem; border-width: 4px; border-color: #c7d2fe; border-top-color: #4f46e5; border-radius: 9999px; animation: spin 1s linear infinite;\\n    }\\n</style>"],"names":[],"mappings":"AAqjBI,uBAAS,CACL,KAAK,CAAE,IAAI,CAAE,MAAM,CAAE,IAAI,CAAE,YAAY,CAAE,GAAG,CAAE,YAAY,CAAE,OAAO,CAAE,gBAAgB,CAAE,OAAO,CAAE,aAAa,CAAE,MAAM,CAAE,SAAS,CAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QACrJ"}`
};
let pageSize = 50;
let sortOrder = "desc";
function formatDate(dateString) {
  if (!dateString) return "Never";
  return new Date(dateString).toLocaleDateString();
}
function getTierColor(tier) {
  switch (tier) {
    case "premium":
      return "bg-purple-100 text-purple-800";
    case "pro":
      return "bg-indigo-100 text-indigo-800";
    default:
      return "bg-gray-100 text-gray-800";
  }
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let totalPages;
  let users = [];
  let loading = true;
  let error = null;
  let selectedUsers = /* @__PURE__ */ new Set();
  let currentPage = 1;
  let totalUsers = 0;
  let searchQuery = "";
  let filterTier = "";
  let filterStatus = "";
  let sortBy = "created_at";
  async function loadUsers() {
    try {
      loading = true;
      error = null;
      const skip = (currentPage - 1) * pageSize;
      const params = new URLSearchParams({
        skip,
        limit: pageSize,
        sort_by: sortBy,
        sort_order: sortOrder
      });
      if (searchQuery) ;
      if (filterTier) ;
      if (filterStatus) ;
      const response = await api.get(`/admin/users?${params}`);
      users = response.users;
      totalUsers = response.total;
    } catch (err) {
      error = err.message || "Failed to load users";
    } finally {
      loading = false;
    }
  }
  $$result.css.add(css);
  totalPages = Math.ceil(totalUsers / pageSize);
  {
    {
      currentPage = 1;
      loadUsers();
    }
  }
  return `<div class="space-y-6"> <div class="flex justify-between items-center"><div data-svelte-h="svelte-9kyltl"><h2 class="text-2xl font-bold text-gray-900">User Management</h2> <p class="text-gray-600 mt-1">Manage users, subscriptions, and access</p></div> <button class="btn btn-primary">${validate_component(Icon, "Icon").$$render($$result, { name: "user-plus", class: "w-4 h-4 mr-2" }, {}, {})}
            Add User</button></div>  <div class="admin-card"><div class="grid grid-cols-1 md:grid-cols-4 gap-4"><div><label class="block text-sm font-medium text-gray-700 mb-1" data-svelte-h="svelte-1jzx6rj">Search</label> <input type="text" placeholder="Email or name..." class="form-input"${add_attribute("value", searchQuery, 0)}></div> <div><label class="block text-sm font-medium text-gray-700 mb-1" data-svelte-h="svelte-16gx56i">Subscription</label> <select class="form-select"><option value="" data-svelte-h="svelte-hapxyy">All Tiers</option><option value="free" data-svelte-h="svelte-88bi0a">Free</option><option value="pro" data-svelte-h="svelte-1qjiygw">Pro</option><option value="premium" data-svelte-h="svelte-yigl7g">Premium</option></select></div> <div><label class="block text-sm font-medium text-gray-700 mb-1" data-svelte-h="svelte-k3ni99">Status</label> <select class="form-select"><option value="" data-svelte-h="svelte-6joivz">All Status</option><option value="active" data-svelte-h="svelte-1mh57he">Active</option><option value="inactive" data-svelte-h="svelte-okme9y">Inactive</option><option value="paid" data-svelte-h="svelte-10mt6j2">Paid Only</option></select></div> <div><label class="block text-sm font-medium text-gray-700 mb-1" data-svelte-h="svelte-1s3i26o">Sort By</label> <select class="form-select"><option value="created_at" data-svelte-h="svelte-qx1ffk">Join Date</option><option value="last_login" data-svelte-h="svelte-1t4xd4b">Last Login</option><option value="email" data-svelte-h="svelte-1g2qjrq">Email</option></select></div></div></div>  ${selectedUsers.size > 0 ? `<div class="bg-indigo-50 border border-indigo-200 rounded-lg p-4"><div class="flex items-center justify-between"><span class="text-sm font-medium text-indigo-900">${escape(selectedUsers.size)} user${escape(selectedUsers.size === 1 ? "" : "s")} selected</span> <div class="space-x-2"><button class="btn btn-sm btn-secondary" data-svelte-h="svelte-1ci8me7">Activate</button> <button class="btn btn-sm btn-secondary" data-svelte-h="svelte-xi961d">Deactivate</button> <button class="btn btn-sm btn-ghost" data-svelte-h="svelte-1aziic4">Clear</button></div></div></div>` : ``}  <div class="admin-card">${loading ? `<div class="flex justify-center py-8" data-svelte-h="svelte-1w30vql"><div class="spinner svelte-178td72"></div></div>` : `${error ? `<div class="alert alert-error">${escape(error)}</div>` : `<div class="overflow-x-auto"><table class="admin-table"><thead><tr><th><input type="checkbox" ${selectedUsers.size === users.length && users.length > 0 ? "checked" : ""} class="form-checkbox"></th> <th data-svelte-h="svelte-fgzd59">User</th> <th data-svelte-h="svelte-fd7z4v">Subscription</th> <th data-svelte-h="svelte-bi34jg">Status</th> <th data-svelte-h="svelte-1wessu9">Trades</th> <th data-svelte-h="svelte-1aaaf0z">Joined</th> <th data-svelte-h="svelte-1cfn47r">Last Login</th> <th data-svelte-h="svelte-7l4yjv">Actions</th></tr></thead> <tbody class="divide-y divide-gray-200">${each(users, (user) => {
    return `<tr class="hover:bg-gray-50"><td><input type="checkbox" ${selectedUsers.has(user.id) ? "checked" : ""} class="form-checkbox"></td> <td><div><div class="text-sm font-medium text-gray-900">${escape(user.full_name)}</div> <div class="text-sm text-gray-500">${escape(user.email)}</div> </div></td> <td><span class="${"px-2 py-1 text-xs font-medium rounded-full " + escape(getTierColor(user.subscription_tier), true) + " svelte-178td72"}">${escape(user.subscription_tier)} </span></td> <td><span class="flex items-center text-sm"><span class="${"w-2 h-2 rounded-full mr-2 " + escape(user.is_active ? "bg-green-400" : "bg-gray-400", true)}"></span> ${escape(user.is_active ? "Active" : "Inactive")} </span></td> <td class="text-center">${escape(user.trade_count || 0)}</td> <td>${escape(formatDate(user.created_at))}</td> <td>${escape(formatDate(user.last_login))}</td> <td><div class="flex items-center space-x-2"><button class="text-indigo-600 hover:text-indigo-900" title="View Details">${validate_component(Icon, "Icon").$$render($$result, { name: "eye", class: "w-4 h-4" }, {}, {})}</button> <button class="text-gray-600 hover:text-gray-900" title="Edit">${validate_component(Icon, "Icon").$$render($$result, { name: "pencil", class: "w-4 h-4" }, {}, {})}</button> <button class="text-purple-600 hover:text-purple-900" title="Impersonate">${validate_component(Icon, "Icon").$$render($$result, { name: "user-switch", class: "w-4 h-4" }, {}, {})}</button> <button class="text-red-600 hover:text-red-900" title="Delete">${validate_component(Icon, "Icon").$$render($$result, { name: "trash", class: "w-4 h-4" }, {}, {})}</button> </div></td> </tr>`;
  })}</tbody></table></div>  <div class="mt-4 flex items-center justify-between"><div class="text-sm text-gray-700">Showing ${escape((currentPage - 1) * pageSize + 1)} to ${escape(Math.min(currentPage * pageSize, totalUsers))} of ${escape(totalUsers)} users</div> <div class="flex space-x-2"><button ${currentPage === 1 ? "disabled" : ""} class="btn btn-sm btn-secondary">Previous</button> <button ${currentPage === totalPages ? "disabled" : ""} class="btn btn-sm btn-secondary">Next</button></div></div>`}`}</div></div>  ${``}  ${``}`;
});
export {
  Page as default
};
