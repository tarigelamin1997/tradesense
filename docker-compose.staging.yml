version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tradesense-staging-db
    environment:
      POSTGRES_USER: tradesense_staging
      POSTGRES_PASSWORD: ${DB_PASSWORD:-staging_password}
      POSTGRES_DB: tradesense_staging
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - staging_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-staging-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - tradesense-staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradesense_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tradesense-staging-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-staging_redis_password}
    volumes:
      - staging_redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - tradesense-staging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    image: ${BACKEND_IMAGE:-tradesense-backend-staging:latest}
    container_name: tradesense-staging-backend
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://tradesense_staging:${DB_PASSWORD:-staging_password}@postgres:5432/tradesense_staging
      - REDIS_URL=redis://:${REDIS_PASSWORD:-staging_redis_password}@redis:6379/0
      - APP_ENV=staging
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8000"
    networks:
      - tradesense-staging
    volumes:
      - ./logs/staging:/app/logs
      - staging_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend
  frontend:
    image: ${FRONTEND_IMAGE:-tradesense-frontend-staging:latest}
    container_name: tradesense-staging-frontend
    environment:
      - NODE_ENV=staging
      - VITE_API_BASE_URL=https://staging-api.tradesense.com
    ports:
      - "3001:80"
    networks:
      - tradesense-staging
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tradesense-staging-nginx
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl/staging:/etc/nginx/ssl:ro
      - staging_static:/usr/share/nginx/html/static
    ports:
      - "80:80"
      - "443:443"
    networks:
      - tradesense-staging
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Background Worker
  worker:
    image: ${BACKEND_IMAGE:-tradesense-backend-staging:latest}
    container_name: tradesense-staging-worker
    command: celery -A app.worker worker --loglevel=info
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://tradesense_staging:${DB_PASSWORD:-staging_password}@postgres:5432/tradesense_staging
      - REDIS_URL=redis://:${REDIS_PASSWORD:-staging_redis_password}@redis:6379/0
      - APP_ENV=staging
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tradesense-staging
    volumes:
      - ./logs/staging:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Celery Beat Scheduler
  scheduler:
    image: ${BACKEND_IMAGE:-tradesense-backend-staging:latest}
    container_name: tradesense-staging-scheduler
    command: celery -A app.worker beat --loglevel=info
    env_file:
      - .env.staging
    environment:
      - DATABASE_URL=postgresql://tradesense_staging:${DB_PASSWORD:-staging_password}@postgres:5432/tradesense_staging
      - REDIS_URL=redis://:${REDIS_PASSWORD:-staging_redis_password}@redis:6379/0
      - APP_ENV=staging
    depends_on:
      - postgres
      - redis
      - worker
    networks:
      - tradesense-staging
    volumes:
      - ./logs/staging:/app/logs
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tradesense-staging-prometheus
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml
      - staging_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9091:9090"
    networks:
      - tradesense-staging
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: tradesense-staging-grafana
    volumes:
      - staging_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-staging_admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://staging-metrics.tradesense.com
    ports:
      - "3002:3000"
    networks:
      - tradesense-staging
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: tradesense-staging-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-staging.yml:/etc/loki/local-config.yaml
      - staging_loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - tradesense-staging
    restart: unless-stopped

  # Log Shipper - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: tradesense-staging-promtail
    volumes:
      - ./monitoring/promtail-staging.yml:/etc/promtail/config.yml
      - ./logs/staging:/var/log/tradesense
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - tradesense-staging
    depends_on:
      - loki
    restart: unless-stopped

networks:
  tradesense-staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  staging_postgres_data:
  staging_redis_data:
  staging_uploads:
  staging_static:
  staging_prometheus_data:
  staging_grafana_data:
  staging_loki_data: