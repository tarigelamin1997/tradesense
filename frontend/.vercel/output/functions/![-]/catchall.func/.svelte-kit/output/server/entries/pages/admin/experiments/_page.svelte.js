import { c as create_ssr_component, v as validate_component } from "../../../../chunks/ssr.js";
import "../../../../chunks/client.js";
import { I as Icon } from "../../../../chunks/Icon.js";
const css = {
  code: ".spinner.svelte-1374ve5{width:2rem;height:2rem;border-width:4px;border-color:#c7d2fe;border-top-color:#4f46e5;border-radius:9999px;animation:svelte-1374ve5-spin 1s linear infinite}@keyframes svelte-1374ve5-spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.btn.svelte-1374ve5{padding:0.5rem 1rem;border-radius:0.375rem;font-weight:500;transition:background-color 0.2s, color 0.2s;display:inline-flex;align-items:center;justify-content:center}.btn-primary.svelte-1374ve5{background-color:#4f46e5;color:white}.btn-primary.svelte-1374ve5:hover{background-color:#4338ca}.btn-secondary.svelte-1374ve5{background-color:#e5e7eb;color:#1f2937}.btn-secondary.svelte-1374ve5:hover{background-color:#d1d5db}.btn-danger.svelte-1374ve5{background-color:#dc2626;color:white}.btn-danger.svelte-1374ve5:hover{background-color:#b91c1c}.btn-sm.svelte-1374ve5{padding:0.375rem 0.75rem;font-size:0.875rem}.alert.svelte-1374ve5{padding:1rem;border-radius:0.375rem}.alert-error.svelte-1374ve5{background-color:#fef2f2;color:#991b1b;border:1px solid #fecaca}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from 'svelte';\\n    import { api } from '$lib/api/client-safe';\\n    import Icon from '$lib/components/Icon.svelte';\\n    import ExperimentCard from '$lib/components/admin/ExperimentCard.svelte';\\n    import CreateExperimentModal from '$lib/components/admin/CreateExperimentModal.svelte';\\n    import ExperimentResults from '$lib/components/admin/ExperimentResults.svelte';\\n    \\n    let experiments = [];\\n    let loading = true;\\n    let error = null;\\n    let selectedExperiment = null;\\n    let showCreateModal = false;\\n    let filter = 'all';\\n    \\n    const statusColors = {\\n        draft: 'gray',\\n        running: 'green',\\n        paused: 'yellow',\\n        completed: 'blue',\\n        archived: 'gray'\\n    };\\n    \\n    async function loadExperiments() {\\n        try {\\n            loading = true;\\n            error = null;\\n            \\n            const params = new URLSearchParams();\\n            if (filter !== 'all') {\\n                params.append('status', filter);\\n            }\\n            params.append('include_archived', filter === 'archived');\\n            \\n            experiments = await api.get(\`/experiments/list?\${params}\`);\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to load experiments';\\n        } finally {\\n            loading = false;\\n        }\\n    }\\n    \\n    async function createExperiment(experimentConfig) {\\n        try {\\n            await api.post('/experiments/create', experimentConfig);\\n            showCreateModal = false;\\n            await loadExperiments();\\n        } catch (err) {\\n            throw new Error(err.message || 'Failed to create experiment');\\n        }\\n    }\\n    \\n    async function startExperiment(experimentId) {\\n        try {\\n            await api.post(\`/experiments/\${experimentId}/start\`);\\n            await loadExperiments();\\n        } catch (err) {\\n            alert(err.message || 'Failed to start experiment');\\n        }\\n    }\\n    \\n    async function stopExperiment(experimentId) {\\n        const reason = prompt('Reason for stopping the experiment:');\\n        if (reason === null) return;\\n        \\n        try {\\n            await api.post(\`/experiments/\${experimentId}/stop?reason=\${encodeURIComponent(reason)}\`);\\n            await loadExperiments();\\n        } catch (err) {\\n            alert(err.message || 'Failed to stop experiment');\\n        }\\n    }\\n    \\n    function getExperimentStats() {\\n        const stats = {\\n            total: experiments.length,\\n            running: 0,\\n            draft: 0,\\n            completed: 0\\n        };\\n        \\n        experiments.forEach(exp => {\\n            if (exp.status === 'running') stats.running++;\\n            else if (exp.status === 'draft') stats.draft++;\\n            else if (exp.status === 'completed') stats.completed++;\\n        });\\n        \\n        return stats;\\n    }\\n    \\n    onMount(() => {\\n        loadExperiments();\\n    });\\n<\/script>\\n\\n<div class=\\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\\">\\n    <!-- Header -->\\n    <div class=\\"mb-8\\">\\n        <div class=\\"flex justify-between items-center\\">\\n            <div>\\n                <h1 class=\\"text-3xl font-bold text-gray-900\\">A/B Experiments</h1>\\n                <p class=\\"mt-2 text-gray-600\\">Manage and analyze your experiments</p>\\n            </div>\\n            <button\\n                on:click={() => showCreateModal = true}\\n                class=\\"btn btn-primary\\"\\n            >\\n                <Icon name=\\"plus\\" class=\\"w-5 h-5 mr-2\\" />\\n                New Experiment\\n            </button>\\n        </div>\\n    </div>\\n    \\n    {#if loading}\\n        <div class=\\"flex justify-center py-12\\">\\n            <div class=\\"spinner\\"></div>\\n        </div>\\n    {:else if error}\\n        <div class=\\"alert alert-error\\">{error}</div>\\n    {:else}\\n        <!-- Stats Overview -->\\n        {@const stats = getExperimentStats()}\\n        <div class=\\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\\">\\n            <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\\">\\n                <div class=\\"flex items-center\\">\\n                    <div class=\\"p-3 rounded-lg bg-gray-100\\">\\n                        <Icon name=\\"activity\\" class=\\"w-6 h-6 text-gray-600\\" />\\n                    </div>\\n                    <div class=\\"ml-4\\">\\n                        <p class=\\"text-sm font-medium text-gray-600\\">Total</p>\\n                        <p class=\\"text-2xl font-bold text-gray-900\\">{stats.total}</p>\\n                    </div>\\n                </div>\\n            </div>\\n            \\n            <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\\">\\n                <div class=\\"flex items-center\\">\\n                    <div class=\\"p-3 rounded-lg bg-green-100\\">\\n                        <Icon name=\\"play-circle\\" class=\\"w-6 h-6 text-green-600\\" />\\n                    </div>\\n                    <div class=\\"ml-4\\">\\n                        <p class=\\"text-sm font-medium text-gray-600\\">Running</p>\\n                        <p class=\\"text-2xl font-bold text-gray-900\\">{stats.running}</p>\\n                    </div>\\n                </div>\\n            </div>\\n            \\n            <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\\">\\n                <div class=\\"flex items-center\\">\\n                    <div class=\\"p-3 rounded-lg bg-yellow-100\\">\\n                        <Icon name=\\"edit-3\\" class=\\"w-6 h-6 text-yellow-600\\" />\\n                    </div>\\n                    <div class=\\"ml-4\\">\\n                        <p class=\\"text-sm font-medium text-gray-600\\">Draft</p>\\n                        <p class=\\"text-2xl font-bold text-gray-900\\">{stats.draft}</p>\\n                    </div>\\n                </div>\\n            </div>\\n            \\n            <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\\">\\n                <div class=\\"flex items-center\\">\\n                    <div class=\\"p-3 rounded-lg bg-blue-100\\">\\n                        <Icon name=\\"check-circle\\" class=\\"w-6 h-6 text-blue-600\\" />\\n                    </div>\\n                    <div class=\\"ml-4\\">\\n                        <p class=\\"text-sm font-medium text-gray-600\\">Completed</p>\\n                        <p class=\\"text-2xl font-bold text-gray-900\\">{stats.completed}</p>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        \\n        <!-- Filter Tabs -->\\n        <div class=\\"mb-6\\">\\n            <div class=\\"border-b border-gray-200\\">\\n                <nav class=\\"-mb-px flex space-x-8\\">\\n                    <button\\n                        on:click={() => { filter = 'all'; loadExperiments(); }}\\n                        class=\\"py-2 px-1 border-b-2 font-medium text-sm\\"\\n                        class:border-indigo-500={filter === 'all'}\\n                        class:text-indigo-600={filter === 'all'}\\n                        class:border-transparent={filter !== 'all'}\\n                        class:text-gray-500={filter !== 'all'}\\n                    >\\n                        All Experiments\\n                    </button>\\n                    <button\\n                        on:click={() => { filter = 'running'; loadExperiments(); }}\\n                        class=\\"py-2 px-1 border-b-2 font-medium text-sm\\"\\n                        class:border-indigo-500={filter === 'running'}\\n                        class:text-indigo-600={filter === 'running'}\\n                        class:border-transparent={filter !== 'running'}\\n                        class:text-gray-500={filter !== 'running'}\\n                    >\\n                        Running\\n                    </button>\\n                    <button\\n                        on:click={() => { filter = 'draft'; loadExperiments(); }}\\n                        class=\\"py-2 px-1 border-b-2 font-medium text-sm\\"\\n                        class:border-indigo-500={filter === 'draft'}\\n                        class:text-indigo-600={filter === 'draft'}\\n                        class:border-transparent={filter !== 'draft'}\\n                        class:text-gray-500={filter !== 'draft'}\\n                    >\\n                        Draft\\n                    </button>\\n                    <button\\n                        on:click={() => { filter = 'completed'; loadExperiments(); }}\\n                        class=\\"py-2 px-1 border-b-2 font-medium text-sm\\"\\n                        class:border-indigo-500={filter === 'completed'}\\n                        class:text-indigo-600={filter === 'completed'}\\n                        class:border-transparent={filter !== 'completed'}\\n                        class:text-gray-500={filter !== 'completed'}\\n                    >\\n                        Completed\\n                    </button>\\n                    <button\\n                        on:click={() => { filter = 'archived'; loadExperiments(); }}\\n                        class=\\"py-2 px-1 border-b-2 font-medium text-sm\\"\\n                        class:border-indigo-500={filter === 'archived'}\\n                        class:text-indigo-600={filter === 'archived'}\\n                        class:border-transparent={filter !== 'archived'}\\n                        class:text-gray-500={filter !== 'archived'}\\n                    >\\n                        Archived\\n                    </button>\\n                </nav>\\n            </div>\\n        </div>\\n        \\n        <!-- Experiments List -->\\n        {#if experiments.length === 0}\\n            <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center\\">\\n                <Icon name=\\"flask\\" class=\\"w-12 h-12 text-gray-400 mx-auto mb-4\\" />\\n                <h3 class=\\"text-lg font-medium text-gray-900 mb-2\\">\\n                    No experiments found\\n                </h3>\\n                <p class=\\"text-gray-600 mb-6\\">\\n                    {#if filter === 'all'}\\n                        Create your first experiment to start testing\\n                    {:else}\\n                        No experiments with status \\"{filter}\\"\\n                    {/if}\\n                </p>\\n                {#if filter === 'all'}\\n                    <button\\n                        on:click={() => showCreateModal = true}\\n                        class=\\"btn btn-primary\\"\\n                    >\\n                        Create Experiment\\n                    </button>\\n                {/if}\\n            </div>\\n        {:else}\\n            <div class=\\"grid grid-cols-1 lg:grid-cols-2 gap-6\\">\\n                {#each experiments as experiment}\\n                    <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\\">\\n                        <div class=\\"flex justify-between items-start mb-4\\">\\n                            <div>\\n                                <h3 class=\\"text-lg font-semibold text-gray-900\\">\\n                                    {experiment.name}\\n                                </h3>\\n                                <p class=\\"text-sm text-gray-600 mt-1\\">\\n                                    ID: {experiment.id}\\n                                </p>\\n                            </div>\\n                            <span class=\\"px-2.5 py-0.5 rounded-full text-xs font-medium bg-{statusColors[experiment.status]}-100 text-{statusColors[experiment.status]}-800\\">\\n                                {experiment.status}\\n                            </span>\\n                        </div>\\n                        \\n                        <div class=\\"text-sm text-gray-600 space-y-2 mb-4\\">\\n                            <div class=\\"flex justify-between\\">\\n                                <span>Variants:</span>\\n                                <span class=\\"font-medium\\">{experiment.variants_count}</span>\\n                            </div>\\n                            <div class=\\"flex justify-between\\">\\n                                <span>Metrics:</span>\\n                                <span class=\\"font-medium\\">{experiment.metrics_count}</span>\\n                            </div>\\n                            <div class=\\"flex justify-between\\">\\n                                <span>Created:</span>\\n                                <span class=\\"font-medium\\">\\n                                    {new Date(experiment.created_at).toLocaleDateString()}\\n                                </span>\\n                            </div>\\n                            {#if experiment.started_at}\\n                                <div class=\\"flex justify-between\\">\\n                                    <span>Started:</span>\\n                                    <span class=\\"font-medium\\">\\n                                        {new Date(experiment.started_at).toLocaleDateString()}\\n                                    </span>\\n                                </div>\\n                            {/if}\\n                        </div>\\n                        \\n                        <div class=\\"flex space-x-2\\">\\n                            <button\\n                                on:click={() => selectedExperiment = experiment}\\n                                class=\\"btn btn-sm btn-secondary\\"\\n                            >\\n                                <Icon name=\\"bar-chart\\" class=\\"w-4 h-4 mr-1\\" />\\n                                View Details\\n                            </button>\\n                            \\n                            {#if experiment.status === 'draft'}\\n                                <button\\n                                    on:click={() => startExperiment(experiment.id)}\\n                                    class=\\"btn btn-sm btn-primary\\"\\n                                >\\n                                    <Icon name=\\"play\\" class=\\"w-4 h-4 mr-1\\" />\\n                                    Start\\n                                </button>\\n                            {:else if experiment.status === 'running'}\\n                                <button\\n                                    on:click={() => stopExperiment(experiment.id)}\\n                                    class=\\"btn btn-sm btn-danger\\"\\n                                >\\n                                    <Icon name=\\"stop-circle\\" class=\\"w-4 h-4 mr-1\\" />\\n                                    Stop\\n                                </button>\\n                            {/if}\\n                        </div>\\n                    </div>\\n                {/each}\\n            </div>\\n        {/if}\\n    {/if}\\n</div>\\n\\n<!-- Create Experiment Modal -->\\n{#if showCreateModal}\\n    <CreateExperimentModal\\n        on:create={e => createExperiment(e.detail)}\\n        on:close={() => showCreateModal = false}\\n    />\\n{/if}\\n\\n<!-- Experiment Details Modal -->\\n{#if selectedExperiment}\\n    <ExperimentResults\\n        experimentId={selectedExperiment.id}\\n        on:close={() => selectedExperiment = null}\\n    />\\n{/if}\\n\\n<style>\\n    .spinner {\\n        width: 2rem;\\n        height: 2rem;\\n        border-width: 4px;\\n        border-color: #c7d2fe;\\n        border-top-color: #4f46e5;\\n        border-radius: 9999px;\\n        animation: spin 1s linear infinite;\\n    }\\n    \\n    @keyframes spin {\\n        from { transform: rotate(0deg); }\\n        to { transform: rotate(360deg); }\\n    }\\n    \\n    .btn {\\n        padding: 0.5rem 1rem;\\n        border-radius: 0.375rem;\\n        font-weight: 500;\\n        transition: background-color 0.2s, color 0.2s;\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n    }\\n    \\n    .btn-primary {\\n        background-color: #4f46e5;\\n        color: white;\\n    }\\n    \\n    .btn-primary:hover {\\n        background-color: #4338ca;\\n    }\\n    \\n    .btn-secondary {\\n        background-color: #e5e7eb;\\n        color: #1f2937;\\n    }\\n    \\n    .btn-secondary:hover {\\n        background-color: #d1d5db;\\n    }\\n    \\n    .btn-danger {\\n        background-color: #dc2626;\\n        color: white;\\n    }\\n    \\n    .btn-danger:hover {\\n        background-color: #b91c1c;\\n    }\\n    \\n    .btn-sm {\\n        padding: 0.375rem 0.75rem;\\n        font-size: 0.875rem;\\n    }\\n    \\n    .alert {\\n        padding: 1rem;\\n        border-radius: 0.375rem;\\n    }\\n    \\n    .alert-error {\\n        background-color: #fef2f2;\\n        color: #991b1b;\\n        border: 1px solid #fecaca;\\n    }\\n</style>"],"names":[],"mappings":"AA4VI,uBAAS,CACL,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,CACjB,YAAY,CAAE,OAAO,CACrB,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,MAAM,CACrB,SAAS,CAAE,mBAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAC9B,CAEA,WAAW,mBAAK,CACZ,IAAK,CAAE,SAAS,CAAE,OAAO,IAAI,CAAG,CAChC,EAAG,CAAE,SAAS,CAAE,OAAO,MAAM,CAAG,CACpC,CAEA,mBAAK,CACD,OAAO,CAAE,MAAM,CAAC,IAAI,CACpB,aAAa,CAAE,QAAQ,CACvB,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAC7C,OAAO,CAAE,WAAW,CACpB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MACrB,CAEA,2BAAa,CACT,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KACX,CAEA,2BAAY,MAAO,CACf,gBAAgB,CAAE,OACtB,CAEA,6BAAe,CACX,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OACX,CAEA,6BAAc,MAAO,CACjB,gBAAgB,CAAE,OACtB,CAEA,0BAAY,CACR,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KACX,CAEA,0BAAW,MAAO,CACd,gBAAgB,CAAE,OACtB,CAEA,sBAAQ,CACJ,OAAO,CAAE,QAAQ,CAAC,OAAO,CACzB,SAAS,CAAE,QACf,CAEA,qBAAO,CACH,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,QACnB,CAEA,2BAAa,CACT,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OACtB"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8"> <div class="mb-8"><div class="flex justify-between items-center"><div data-svelte-h="svelte-1b5fszq"><h1 class="text-3xl font-bold text-gray-900">A/B Experiments</h1> <p class="mt-2 text-gray-600">Manage and analyze your experiments</p></div> <button class="btn btn-primary svelte-1374ve5">${validate_component(Icon, "Icon").$$render($$result, { name: "plus", class: "w-5 h-5 mr-2" }, {}, {})}
                New Experiment</button></div></div> ${`<div class="flex justify-center py-12" data-svelte-h="svelte-em5o00"><div class="spinner svelte-1374ve5"></div></div>`}</div>  ${``}  ${``}`;
});
export {
  Page as default
};
