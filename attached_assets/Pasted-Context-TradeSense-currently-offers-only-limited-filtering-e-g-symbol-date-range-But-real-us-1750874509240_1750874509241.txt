Context:
TradeSense currently offers only limited filtering (e.g., symbol, date range). But real users need powerful ways to slice and dice their data to find patterns, behaviors, and signals.

---

🧠 Problem:
- No way to filter by strategy or tag
- Can’t search by date ranges, trade status, or confidence
- Dashboard analytics are too generic
- Users can’t get quick insights like:
  - “Show me all losing breakout trades in June”
  - “What’s my win rate on FOMO tags?”
  - “How confident was I on average this week?”

---

🚀 What Stage 6 Implements:
A powerful **query engine** and **filtering system** for trades and analytics, with new API parameters and smarter dashboards.

---

✅ Backend Tasks:

1. 🧰 **Extend Trade Query Parameters**
   Update `TradeQueryParams` schema to accept:
   - `strategy_tag: Optional[str]`
   - `tags: Optional[List[str]]`
   - `confidence_score_min: Optional[int]`
   - `confidence_score_max: Optional[int]`
   - `status: Optional[str]` (open, closed)
   - `sort_by: Optional[str]` (e.g. 'entry_time', 'exit_time', 'profit')
   - `sort_order: Optional[str]` (asc/desc)

2. 📘 **Update GET /trades Endpoint**
   - Support all new query parameters
   - Filter at DB level using SQLAlchemy
   - Sort results as requested

3. 📊 **Update Dashboard Analytics (GET /analytics/dashboard)**
   - Accept optional filters:
     - `start_date`, `end_date`
     - `strategy_tag`, `tags`, `confidence range`
   - Apply filters before calculating:
     - Win rate
     - Total PnL
     - Avg confidence
     - Strategy/tag breakdowns

4. ⚙️ **Enhance Pagination**
   - Add `total_count`, `has_more`, `current_page`, `per_page` to response model

5. 🔍 **(Optional)**: Add Fulltext Search
   - Filter by keyword in `notes`, `symbol`, etc.

---

📦 Outcome:
Users will be able to:
- Filter trades like a pro (e.g., “closed gold trades with low confidence”)
- See more meaningful dashboards
- Investigate specific strategies, tags, and timeframes
- Run advanced trade reviews without exporting to Excel

---

🔐 All endpoints should continue to use:
```python
current_user: Dict[str, Any] = Depends(get_current_active_user)
