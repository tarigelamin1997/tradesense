name: Deploy to Staging

on:
  push:
    branches: [staging, develop]
  pull_request:
    branches: [staging]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: staging-registry.tradesense.com
  FRONTEND_IMAGE: tradesense-frontend-staging
  BACKEND_IMAGE: tradesense-backend-staging
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.npm
          frontend/node_modules
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt', '**/package-lock.json') }}
    
    - name: Install and test backend
      working-directory: ./src/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov flake8 black
        
        # Linting
        black --check .
        flake8 . --max-line-length=120 --exclude=venv,__pycache__
        
        # Tests
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Install and test frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run lint || true
        npm run test:unit || true
        npm run build
    
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    
  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./src/backend
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
        build-args: |
          ENV=staging
          VERSION=${{ github.sha }}
    
    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
        build-args: |
          VITE_API_BASE_URL=${{ secrets.STAGING_API_URL }}
          VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.STAGING_STRIPE_KEY }}
          VITE_SENTRY_DSN=${{ secrets.STAGING_SENTRY_DSN }}
          VITE_GA_TRACKING_ID=${{ secrets.STAGING_GA_ID }}
    
    - name: Deploy to Staging
      env:
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$STAGING_SSH_KEY" > ~/.ssh/staging_key
        chmod 600 ~/.ssh/staging_key
        ssh-keyscan -H $STAGING_HOST >> ~/.ssh/known_hosts
        
        # Deploy script
        ssh -i ~/.ssh/staging_key $STAGING_USER@$STAGING_HOST << 'EOF'
          cd /opt/tradesense
          
          # Pull latest images
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          
          # Update docker-compose
          export BACKEND_IMAGE=${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          export FRONTEND_IMAGE=${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          
          # Deploy with zero downtime
          docker-compose -f docker-compose.staging.yml up -d --no-deps --scale backend=2 backend
          sleep 30
          docker-compose -f docker-compose.staging.yml up -d --no-deps frontend
          
          # Cleanup old containers
          docker system prune -af
        EOF
    
  integration-tests:
    name: Run Integration Tests
    needs: build-and-deploy
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Wait for services
      run: |
        echo "Waiting for staging environment to be ready..."
        sleep 60
    
    - name: Run API tests
      run: |
        # Install test dependencies
        pip install pytest requests pytest-asyncio
        
        # Run integration tests against staging
        STAGING_API_URL=${{ secrets.STAGING_API_URL }} \
        STAGING_API_KEY=${{ secrets.STAGING_TEST_API_KEY }} \
        pytest tests/integration/ -v -m staging
    
    - name: Run E2E tests
      run: |
        npm install -g playwright
        playwright install chromium
        
        # Run E2E tests
        STAGING_URL=${{ secrets.STAGING_URL }} \
        npm run test:e2e:staging
    
    - name: Performance tests
      run: |
        # Install k6
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Run performance tests
        k6 run tests/performance/staging.js
    
  security-scan:
    name: Security Scan
    needs: build-and-deploy
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: ${{ secrets.STAGING_URL }}
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Run Trivy scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
  notify:
    name: Notify Status
    needs: [integration-tests, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Determine status
      id: status
      run: |
        if [ "${{ needs.integration-tests.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        fi
    
    - name: Send Slack notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST $SLACK_WEBHOOK_URL \
          -H "Content-Type: application/json" \
          -d '{
            "attachments": [{
              "color": "${{ steps.status.outputs.color }}",
              "title": "${{ steps.status.outputs.emoji }} Staging Deployment",
              "text": "Deployment to staging ${{ steps.status.outputs.status }}",
              "fields": [
                {
                  "title": "Environment",
                  "value": "Staging",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                },
                {
                  "title": "Author",
                  "value": "${{ github.actor }}",
                  "short": true
                }
              ],
              "actions": [
                {
                  "type": "button",
                  "text": "View Staging",
                  "url": "${{ secrets.STAGING_URL }}"
                },
                {
                  "type": "button",
                  "text": "View Logs",
                  "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }
              ]
            }]
          }'