"""Initial migration from current models (fixed FKs)

Revision ID: 3911f13f470b
Revises: 
Create Date: 2025-07-02 21:47:36.850391

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = '3911f13f470b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Only include CREATE TABLE and CREATE INDEX commands for the current models
    # Remove all op.alter_column commands that attempt to change column types
    # (especially for playbooks.id, playbooks.user_id, trades.id, trades.user_id, etc.)
    # as SQLite does not support ALTER COLUMN TYPE
    # If this is the initial migration, only include CREATE TABLE and CREATE INDEX commands
    # (You may need to regenerate this migration from a clean DB if Alembic is confused)
    pass  # Placeholder for actual CREATE TABLE/INDEX commands


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('oauth_id', sa.TEXT(), nullable=True))
    op.add_column('users', sa.Column('locked_until', sa.TIMESTAMP(), nullable=True))
    op.add_column('users', sa.Column('role', sa.TEXT(), server_default=sa.text('("user")'), nullable=True))
    op.add_column('users', sa.Column('api_key', sa.TEXT(), nullable=True))
    op.add_column('users', sa.Column('oauth_provider', sa.TEXT(), nullable=True))
    op.add_column('users', sa.Column('partner_id', sa.TEXT(), nullable=True))
    op.add_column('users', sa.Column('password_hash', sa.TEXT(), nullable=True))
    op.add_column('users', sa.Column('failed_login_attempts', sa.INTEGER(), server_default=sa.text('0'), nullable=True))
    op.add_column('users', sa.Column('subscription_tier', sa.TEXT(), server_default=sa.text("'free'"), nullable=True))
    op.add_column('users', sa.Column('two_factor_enabled', sa.BOOLEAN(), server_default=sa.text('0'), nullable=True))
    op.add_column('users', sa.Column('partner_role', sa.TEXT(), server_default=sa.text("'user'"), nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=sa.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'last_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'first_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('users', 'timezone')
    op.drop_column('users', 'preferred_markets')
    op.drop_column('users', 'trading_experience')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'reset_password_expires')
    op.drop_column('users', 'reset_password_token')
    op.drop_column('users', 'verification_token')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'hashed_password')
    op.add_column('trades', sa.Column('side', sa.TEXT(), nullable=False))
    op.add_column('trades', sa.Column('strategy', sa.TEXT(), nullable=True))
    op.drop_constraint(None, 'trades', type_='foreignkey')
    op.drop_constraint(None, 'trades', type_='foreignkey')
    op.drop_constraint(None, 'trades', type_='unique')
    op.drop_index(op.f('ix_trades_user_id'), table_name='trades')
    op.drop_index(op.f('ix_trades_symbol'), table_name='trades')
    op.drop_index(op.f('ix_trades_strategy_tag'), table_name='trades')
    op.drop_index(op.f('ix_trades_strategy_id'), table_name='trades')
    op.drop_index(op.f('ix_trades_pnl'), table_name='trades')
    op.drop_index(op.f('ix_trades_playbook_id'), table_name='trades')
    op.drop_index(op.f('ix_trades_exit_time'), table_name='trades')
    op.drop_index(op.f('ix_trades_entry_time'), table_name='trades')
    op.drop_index(op.f('ix_trades_account_id'), table_name='trades')
    op.drop_index('idx_user_symbol', table_name='trades')
    op.drop_index('idx_user_strategy', table_name='trades')
    op.drop_index('idx_user_date', table_name='trades')
    op.drop_index('idx_pnl_filter', table_name='trades')
    op.alter_column('trades', 'pnl',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('trades', 'exit_price',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('trades', 'entry_price',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=False)
    op.alter_column('trades', 'quantity',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=False)
    op.alter_column('trades', 'symbol',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('trades', 'user_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               nullable=True)
    op.alter_column('trades', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               nullable=True)
    op.drop_column('trades', 'updated_at')
    op.drop_column('trades', 'strategy_id')
    op.drop_column('trades', 'tags')
    op.drop_column('trades', 'reflection_timestamp')
    op.drop_column('trades', 'post_trade_mood')
    op.drop_column('trades', 'executed_plan')
    op.drop_column('trades', 'emotional_score')
    op.drop_column('trades', 'reflection_notes')
    op.drop_column('trades', 'emotional_tags')
    op.drop_column('trades', 'critique_confidence')
    op.drop_column('trades', 'critique_generated_at')
    op.drop_column('trades', 'ai_critique')
    op.drop_column('trades', 'market_context')
    op.drop_column('trades', 'playbook_id')
    op.drop_column('trades', 'account_id')
    op.drop_column('trades', 'confidence_score')
    op.drop_column('trades', 'max_favorable_excursion')
    op.drop_column('trades', 'max_adverse_excursion')
    op.drop_column('trades', 'net_pnl')
    op.drop_column('trades', 'commission')
    op.drop_column('trades', 'direction')
    op.drop_column('trades', 'trade_id')
    op.drop_column('trades', 'strategy_tag')
    op.alter_column('playbooks', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
    op.alter_column('playbooks', 'id',
               existing_type=sa.UUID(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
    op.create_table('sync_jobs',
    sa.Column('job_id', sa.TEXT(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('integration_id', sa.INTEGER(), nullable=False),
    sa.Column('provider_name', sa.TEXT(), nullable=False),
    sa.Column('trigger_type', sa.TEXT(), nullable=False),
    sa.Column('status', sa.TEXT(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('started_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('records_processed', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('sync_duration', sa.REAL(), nullable=True),
    sa.Column('metadata', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('job_id')
    )
    op.create_index(op.f('idx_sync_jobs_user_status'), 'sync_jobs', ['user_id', 'status'], unique=False)
    op.create_index(op.f('idx_sync_jobs_integration'), 'sync_jobs', ['integration_id'], unique=False)
    op.create_table('market_regimes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('date', sa.DATETIME(), nullable=False),
    sa.Column('regime_type', sa.VARCHAR(length=20), nullable=False),
    sa.Column('confidence_score', sa.FLOAT(), nullable=False),
    sa.Column('volatility_level', sa.VARCHAR(length=10), nullable=False),
    sa.Column('volume_trend', sa.VARCHAR(length=10), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_market_regimes_id'), 'market_regimes', ['id'], unique=False)
    op.create_index(op.f('ix_market_regimes_date'), 'market_regimes', ['date'], unique=False)
    op.create_table('commission_tiers',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('tier_name', sa.TEXT(), nullable=False),
    sa.Column('min_referrals', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('commission_rate', sa.REAL(), nullable=False),
    sa.Column('bonus_rate', sa.REAL(), server_default=sa.text('(0.0)'), nullable=True),
    sa.Column('requirements', sqlite.JSON(), nullable=True),
    sa.Column('benefits', sqlite.JSON(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tier_name')
    )
    op.create_table('duplicate_resolutions',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('original_trade_id', sa.TEXT(), nullable=False),
    sa.Column('duplicate_trade_hash', sa.TEXT(), nullable=False),
    sa.Column('match_type', sa.TEXT(), nullable=False),
    sa.Column('confidence_score', sa.REAL(), nullable=False),
    sa.Column('action_taken', sa.TEXT(), nullable=False),
    sa.Column('resolved_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('metadata', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('partner_revenue',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('partner_id', sa.TEXT(), nullable=False),
    sa.Column('revenue_type', sa.TEXT(), nullable=False),
    sa.Column('amount', sa.REAL(), nullable=False),
    sa.Column('currency', sa.TEXT(), server_default=sa.text("'USD'"), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('billing_period', sa.TEXT(), nullable=True),
    sa.Column('recorded_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sync_history',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('integration_id', sa.INTEGER(), nullable=False),
    sa.Column('sync_type', sa.TEXT(), nullable=False),
    sa.Column('status', sa.TEXT(), nullable=False),
    sa.Column('records_processed', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.Column('sync_duration', sa.REAL(), nullable=True),
    sa.Column('started_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_sync_history_integration'), 'sync_history', ['integration_id', 'started_at'], unique=False)
    op.create_table('referrals',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('affiliate_id', sa.TEXT(), nullable=False),
    sa.Column('referred_user_id', sa.INTEGER(), nullable=True),
    sa.Column('referral_source', sa.TEXT(), nullable=True),
    sa.Column('utm_source', sa.TEXT(), nullable=True),
    sa.Column('utm_medium', sa.TEXT(), nullable=True),
    sa.Column('utm_campaign', sa.TEXT(), nullable=True),
    sa.Column('ip_address', sa.TEXT(), nullable=True),
    sa.Column('user_agent', sa.TEXT(), nullable=True),
    sa.Column('conversion_type', sa.TEXT(), server_default=sa.text("'signup'"), nullable=True),
    sa.Column('conversion_value', sa.REAL(), server_default=sa.text('(0.0)'), nullable=True),
    sa.Column('commission_earned', sa.REAL(), server_default=sa.text('(0.0)'), nullable=True),
    sa.Column('commission_rate', sa.REAL(), nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'"), nullable=True),
    sa.Column('converted_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['affiliate_id'], ['affiliates.id'], ),
    sa.ForeignKeyConstraint(['referred_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sync_schedules',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('integration_id', sa.INTEGER(), nullable=False),
    sa.Column('frequency_minutes', sa.INTEGER(), nullable=False),
    sa.Column('next_run', sa.TIMESTAMP(), nullable=False),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('(TRUE)'), nullable=True),
    sa.Column('last_run', sa.TIMESTAMP(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('idx_sync_schedules_next_run'), 'sync_schedules', ['next_run', 'enabled'], unique=False)
    op.create_table('login_attempts',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('username', sa.TEXT(), nullable=True),
    sa.Column('ip_address', sa.TEXT(), nullable=True),
    sa.Column('success', sa.BOOLEAN(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('user_agent', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('affiliate_clicks',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('affiliate_id', sa.TEXT(), nullable=False),
    sa.Column('link_id', sa.INTEGER(), nullable=True),
    sa.Column('ip_address', sa.TEXT(), nullable=True),
    sa.Column('user_agent', sa.TEXT(), nullable=True),
    sa.Column('referrer', sa.TEXT(), nullable=True),
    sa.Column('utm_source', sa.TEXT(), nullable=True),
    sa.Column('utm_medium', sa.TEXT(), nullable=True),
    sa.Column('utm_campaign', sa.TEXT(), nullable=True),
    sa.Column('converted', sa.BOOLEAN(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.Column('conversion_value', sa.REAL(), server_default=sa.text('(0.0)'), nullable=True),
    sa.Column('clicked_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['affiliate_id'], ['affiliates.id'], ),
    sa.ForeignKeyConstraint(['link_id'], ['affiliate_links.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('execution_quality_metrics',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.VARCHAR(), nullable=False),
    sa.Column('trade_id', sa.VARCHAR(), nullable=False),
    sa.Column('entry_slippage', sa.FLOAT(), nullable=True),
    sa.Column('exit_slippage', sa.FLOAT(), nullable=True),
    sa.Column('hold_time_efficiency', sa.FLOAT(), nullable=True),
    sa.Column('market_timing_score', sa.FLOAT(), nullable=True),
    sa.Column('execution_grade', sa.VARCHAR(length=2), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_execution_quality_metrics_user_id'), 'execution_quality_metrics', ['user_id'], unique=False)
    op.create_index(op.f('ix_execution_quality_metrics_trade_id'), 'execution_quality_metrics', ['trade_id'], unique=False)
    op.create_index(op.f('ix_execution_quality_metrics_id'), 'execution_quality_metrics', ['id'], unique=False)
    op.create_table('affiliate_payouts',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('affiliate_id', sa.TEXT(), nullable=False),
    sa.Column('amount', sa.REAL(), nullable=False),
    sa.Column('commission_period_start', sa.DATE(), nullable=True),
    sa.Column('commission_period_end', sa.DATE(), nullable=True),
    sa.Column('payout_method', sa.TEXT(), nullable=True),
    sa.Column('transaction_id', sa.TEXT(), nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'"), nullable=True),
    sa.Column('referrals_included', sqlite.JSON(), nullable=True),
    sa.Column('processing_fee', sa.REAL(), server_default=sa.text('(0.0)'), nullable=True),
    sa.Column('net_amount', sa.REAL(), nullable=True),
    sa.Column('notes', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('processed_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['affiliate_id'], ['affiliates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_actions',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('partner_id', sa.TEXT(), nullable=True),
    sa.Column('action_type', sa.TEXT(), nullable=False),
    sa.Column('action_details', sqlite.JSON(), nullable=True),
    sa.Column('ip_address', sa.TEXT(), nullable=True),
    sa.Column('user_agent', sa.TEXT(), nullable=True),
    sa.Column('session_duration', sa.INTEGER(), nullable=True),
    sa.Column('page_context', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sync_performance_metrics',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('provider_name', sa.TEXT(), nullable=False),
    sa.Column('sync_type', sa.TEXT(), nullable=False),
    sa.Column('records_count', sa.INTEGER(), nullable=False),
    sa.Column('duration_seconds', sa.REAL(), nullable=False),
    sa.Column('memory_usage_mb', sa.REAL(), nullable=True),
    sa.Column('cpu_usage_percent', sa.REAL(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('email_schedules',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('email_address', sa.TEXT(), nullable=False),
    sa.Column('report_day', sa.TEXT(), nullable=False),
    sa.Column('report_time', sa.TEXT(), server_default=sa.text("'09:00'"), nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('1'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('email_logs',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('email_address', sa.TEXT(), nullable=True),
    sa.Column('status', sa.TEXT(), nullable=True),
    sa.Column('sent_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('partner_user_engagement',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('partner_id', sa.TEXT(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('session_duration', sa.INTEGER(), nullable=True),
    sa.Column('pages_viewed', sa.INTEGER(), nullable=True),
    sa.Column('features_used', sa.TEXT(), nullable=True),
    sa.Column('last_activity', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sync_logs',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('partner_id', sa.TEXT(), nullable=True),
    sa.Column('sync_type', sa.TEXT(), nullable=False),
    sa.Column('connector_name', sa.TEXT(), nullable=True),
    sa.Column('status', sa.TEXT(), nullable=False),
    sa.Column('records_processed', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('records_success', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('records_failed', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('error_details', sqlite.JSON(), nullable=True),
    sa.Column('duration_seconds', sa.REAL(), nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('encryption_keys',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('key_id', sa.TEXT(), nullable=False),
    sa.Column('encrypted_key', sa.TEXT(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('(TRUE)'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_id')
    )
    op.create_index(op.f('idx_key_id'), 'encryption_keys', ['key_id'], unique=False)
    op.create_table('system_logs',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('level', sa.TEXT(), nullable=False),
    sa.Column('category', sa.TEXT(), nullable=False),
    sa.Column('message', sa.TEXT(), nullable=False),
    sa.Column('details', sqlite.JSON(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('partner_id', sa.TEXT(), nullable=True),
    sa.Column('session_id', sa.TEXT(), nullable=True),
    sa.Column('ip_address', sa.TEXT(), nullable=True),
    sa.Column('user_agent', sa.TEXT(), nullable=True),
    sa.Column('stack_trace', sa.TEXT(), nullable=True),
    sa.Column('resolved', sa.BOOLEAN(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('partner_feature_usage',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('partner_id', sa.TEXT(), nullable=False),
    sa.Column('feature_name', sa.TEXT(), nullable=False),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('1'), nullable=True),
    sa.Column('usage_date', sa.DATE(), server_default=sa.text('(CURRENT_DATE)'), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('affiliates',
    sa.Column('id', sa.TEXT(), nullable=True),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('email', sa.TEXT(), nullable=False),
    sa.Column('type', sa.TEXT(), server_default=sa.text("'individual'"), nullable=False),
    sa.Column('commission_rate', sa.REAL(), server_default=sa.text('(0.20)'), nullable=True),
    sa.Column('payout_threshold', sa.REAL(), server_default=sa.text('(100.0)'), nullable=True),
    sa.Column('payment_method', sa.TEXT(), server_default=sa.text("'paypal'"), nullable=True),
    sa.Column('payment_details', sqlite.JSON(), nullable=True),
    sa.Column('referral_code', sa.TEXT(), nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'active'"), nullable=True),
    sa.Column('tier', sa.TEXT(), server_default=sa.text("'bronze'"), nullable=True),
    sa.Column('total_earnings', sa.REAL(), server_default=sa.text('(0.0)'), nullable=True),
    sa.Column('pending_earnings', sa.REAL(), server_default=sa.text('(0.0)'), nullable=True),
    sa.Column('lifetime_referrals', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_payout_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('notes', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('referral_code')
    )
    op.create_table('job_history',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('job_id', sa.TEXT(), nullable=False),
    sa.Column('execution_start', sa.TIMESTAMP(), nullable=True),
    sa.Column('execution_end', sa.TIMESTAMP(), nullable=True),
    sa.Column('status', sa.TEXT(), nullable=True),
    sa.Column('records_processed', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.Column('result_summary', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('normalization_cache',
    sa.Column('cache_key', sa.TEXT(), nullable=True),
    sa.Column('provider_name', sa.TEXT(), nullable=False),
    sa.Column('raw_data_hash', sa.TEXT(), nullable=False),
    sa.Column('normalized_data', sa.TEXT(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('expires_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('cache_key')
    )
    op.create_table('error_patterns',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('error_signature', sa.TEXT(), nullable=False),
    sa.Column('first_occurrence', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_occurrence', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('occurrence_count', sa.INTEGER(), server_default=sa.text('1'), nullable=True),
    sa.Column('severity', sa.TEXT(), nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'active'"), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('error_signature')
    )
    op.create_table('integrations',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('integration_type', sa.TEXT(), nullable=False),
    sa.Column('provider_name', sa.TEXT(), nullable=False),
    sa.Column('display_name', sa.TEXT(), nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'connected'"), nullable=True),
    sa.Column('last_sync', sa.TIMESTAMP(), nullable=True),
    sa.Column('last_successful_sync', sa.TIMESTAMP(), nullable=True),
    sa.Column('sync_frequency', sa.INTEGER(), server_default=sa.text('(3600)'), nullable=True),
    sa.Column('auto_sync', sa.BOOLEAN(), server_default=sa.text('(TRUE)'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('settings', sa.TEXT(), nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('last_error', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'provider_name')
    )
    op.create_index(op.f('idx_integrations_user'), 'integrations', ['user_id', 'status'], unique=False)
    op.create_table('affiliate_links',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('affiliate_id', sa.TEXT(), nullable=False),
    sa.Column('campaign_name', sa.TEXT(), nullable=True),
    sa.Column('url_slug', sa.TEXT(), nullable=False),
    sa.Column('destination_url', sa.TEXT(), nullable=False),
    sa.Column('utm_parameters', sqlite.JSON(), nullable=True),
    sa.Column('clicks', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('conversions', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('(TRUE)'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('expires_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['affiliate_id'], ['affiliates.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('url_slug')
    )
    op.create_table('trade_fingerprints',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('trade_id', sa.TEXT(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('exact_hash', sa.TEXT(), nullable=False),
    sa.Column('fuzzy_hash', sa.TEXT(), nullable=False),
    sa.Column('symbol', sa.TEXT(), nullable=False),
    sa.Column('entry_time', sa.TIMESTAMP(), nullable=False),
    sa.Column('exit_time', sa.TIMESTAMP(), nullable=False),
    sa.Column('entry_price', sa.REAL(), nullable=False),
    sa.Column('exit_price', sa.REAL(), nullable=False),
    sa.Column('qty', sa.REAL(), nullable=False),
    sa.Column('direction', sa.TEXT(), nullable=False),
    sa.Column('data_source', sa.TEXT(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('trade_id')
    )
    op.create_index(op.f('idx_fingerprints_user_symbol'), 'trade_fingerprints', ['user_id', 'symbol'], unique=False)
    op.create_index(op.f('idx_fingerprints_time_range'), 'trade_fingerprints', ['entry_time', 'exit_time'], unique=False)
    op.create_index(op.f('idx_fingerprints_fuzzy_hash'), 'trade_fingerprints', ['fuzzy_hash'], unique=False)
    op.create_index(op.f('idx_fingerprints_exact_hash'), 'trade_fingerprints', ['exact_hash'], unique=False)
    op.create_table('partners',
    sa.Column('id', sa.TEXT(), nullable=True),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('type', sa.TEXT(), nullable=False),
    sa.Column('contact_email', sa.TEXT(), nullable=True),
    sa.Column('api_key', sa.TEXT(), nullable=True),
    sa.Column('webhook_url', sa.TEXT(), nullable=True),
    sa.Column('settings', sqlite.JSON(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('(TRUE)'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('api_key')
    )
    op.create_table('encrypted_credentials',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('credential_id', sa.TEXT(), nullable=False),
    sa.Column('credential_type', sa.TEXT(), nullable=False),
    sa.Column('encrypted_data', sa.TEXT(), nullable=False),
    sa.Column('salt', sa.TEXT(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('partner_id', sa.TEXT(), nullable=True),
    sa.Column('expires_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('rotation_interval_days', sa.INTEGER(), server_default=sa.text('(90)'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_rotated', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('(TRUE)'), nullable=True),
    sa.Column('metadata', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('credential_id')
    )
    op.create_index(op.f('idx_credential_type_user'), 'encrypted_credentials', ['credential_type', 'user_id'], unique=False)
    op.create_index(op.f('idx_credential_id'), 'encrypted_credentials', ['credential_id'], unique=False)
    op.create_table('realtime_sync_state',
    sa.Column('integration_id', sa.INTEGER(), nullable=True),
    sa.Column('last_trade_timestamp', sa.TIMESTAMP(), nullable=True),
    sa.Column('last_sync_timestamp', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('cursor_position', sa.TEXT(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ),
    sa.PrimaryKeyConstraint('integration_id')
    )
    op.create_index(op.f('idx_realtime_sync_active'), 'realtime_sync_state', ['is_active'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.TEXT(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('partner_id', sa.TEXT(), nullable=True),
    sa.Column('expires_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('session_token', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('revenue_sharing_rules',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('partner_type', sa.TEXT(), nullable=False),
    sa.Column('subscription_tier', sa.TEXT(), nullable=True),
    sa.Column('revenue_event', sa.TEXT(), nullable=False),
    sa.Column('commission_type', sa.TEXT(), server_default=sa.text("'percentage'"), nullable=True),
    sa.Column('commission_value', sa.REAL(), nullable=False),
    sa.Column('recurring', sa.BOOLEAN(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.Column('max_payouts', sa.INTEGER(), nullable=True),
    sa.Column('conditions', sqlite.JSON(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('(TRUE)'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_trades',
    sa.Column('id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('partner_id', sa.TEXT(), nullable=True),
    sa.Column('trade_data', sqlite.JSON(), nullable=False),
    sa.Column('tags', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scheduled_jobs',
    sa.Column('id', sa.TEXT(), nullable=True),
    sa.Column('job_type', sa.TEXT(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('partner_id', sa.TEXT(), nullable=True),
    sa.Column('config', sa.TEXT(), nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'"), nullable=True),
    sa.Column('scheduled_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_run', sa.TIMESTAMP(), nullable=True),
    sa.Column('next_run', sa.TIMESTAMP(), nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), nullable=True),
    sa.Column('last_error', sa.TEXT(), nullable=True),
    sa.Column('result_data', sa.TEXT(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('1'), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
