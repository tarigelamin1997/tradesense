import { c as create_ssr_component, v as validate_component } from "../../../chunks/ssr.js";
import "../../../chunks/client2.js";
import { I as Icon } from "../../../chunks/Icon.js";
const css = {
  code: ".spinner.svelte-1t7wpul{width:2rem;height:2rem;border-width:4px;border-color:#c7d2fe;border-top-color:#4f46e5;border-radius:9999px;animation:spin 1s linear infinite}.btn.svelte-1t7wpul{padding:0.5rem 1rem;border-radius:0.375rem;font-weight:500;transition:background-color 0.2s, color 0.2s;display:inline-flex;align-items:center;justify-content:center}.btn-primary.svelte-1t7wpul{background-color:#4f46e5;color:white}.btn-primary.svelte-1t7wpul:hover{background-color:#4338ca}.btn-sm.svelte-1t7wpul{padding:0.25rem 0.75rem;font-size:0.875rem}.btn.svelte-1t7wpul:disabled{opacity:0.5;cursor:not-allowed}.alert.svelte-1t7wpul{padding:1rem;border-radius:0.375rem}.alert-error.svelte-1t7wpul{background-color:#fef2f2;color:#991b1b;border:1px solid #fecaca}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from 'svelte';\\n    import { api } from '$lib/api/client';\\n    import Icon from '$lib/components/Icon.svelte';\\n    import CreateAlertModal from '$lib/components/alerts/CreateAlertModal.svelte';\\n    \\n    let alerts = [];\\n    let templates = [];\\n    let stats = null;\\n    let history = [];\\n    let loading = true;\\n    let error = null;\\n    let activeTab = 'alerts';\\n    let showCreateModal = false;\\n    let selectedTemplate = null;\\n    let selectedAlert = null;\\n    let showDetails = false;\\n    \\n    const statusColors = {\\n        active: 'green',\\n        triggered: 'blue',\\n        snoozed: 'yellow',\\n        disabled: 'gray',\\n        expired: 'red'\\n    };\\n    \\n    const priorityColors = {\\n        low: 'gray',\\n        medium: 'yellow',\\n        high: 'orange',\\n        critical: 'red'\\n    };\\n    \\n    async function loadData() {\\n        try {\\n            loading = true;\\n            error = null;\\n            \\n            // Load based on active tab\\n            if (activeTab === 'alerts') {\\n                const [alertsData, statsData] = await Promise.all([\\n                    api.get('/alerts/list'),\\n                    api.get('/alerts/stats/overview')\\n                ]);\\n                alerts = alertsData.alerts;\\n                stats = statsData.stats;\\n            } else if (activeTab === 'templates') {\\n                templates = (await api.get('/alerts/templates/list')).templates;\\n            } else if (activeTab === 'history') {\\n                history = (await api.get('/alerts/history/list')).history;\\n            }\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to load alerts data';\\n        } finally {\\n            loading = false;\\n        }\\n    }\\n    \\n    async function toggleAlert(alertId, currentStatus) {\\n        try {\\n            const enabled = currentStatus !== 'active';\\n            await api.post(\`/alerts/\${alertId}/toggle\`, { enabled });\\n            await loadData();\\n        } catch (err) {\\n            alert(err.message || 'Failed to toggle alert');\\n        }\\n    }\\n    \\n    async function deleteAlert(alertId) {\\n        if (!confirm('Delete this alert?')) return;\\n        \\n        try {\\n            await api.delete(\`/alerts/\${alertId}\`);\\n            await loadData();\\n        } catch (err) {\\n            alert(err.message || 'Failed to delete alert');\\n        }\\n    }\\n    \\n    async function testAlert(alertId) {\\n        try {\\n            const result = await api.post(\`/alerts/test/\${alertId}\`);\\n            alert(\`Test alert sent to: \${result.channels.join(', ')}\`);\\n        } catch (err) {\\n            alert(err.message || 'Failed to test alert');\\n        }\\n    }\\n    \\n    function createFromTemplate(template) {\\n        selectedTemplate = template;\\n        showCreateModal = true;\\n    }\\n    \\n    function viewAlertDetails(alert) {\\n        selectedAlert = alert;\\n        showDetails = true;\\n    }\\n    \\n    function formatConditions(conditions) {\\n        return conditions.map(c => {\\n            const field = c.field.replace(/_/g, ' ');\\n            const op = {\\n                gt: '>',\\n                gte: '≥',\\n                lt: '<',\\n                lte: '≤',\\n                eq: '='\\n            }[c.operator] || c.operator;\\n            \\n            return \`\${field} \${op} \${c.value}\`;\\n        }).join(' AND ');\\n    }\\n    \\n    function getAlertIcon(type) {\\n        const iconMap = {\\n            price_above: 'trending-up',\\n            price_below: 'trending-down',\\n            daily_pnl: 'dollar-sign',\\n            win_rate: 'award',\\n            loss_streak: 'alert-triangle',\\n            drawdown: 'activity',\\n            pattern_detected: 'compass',\\n            account_balance: 'credit-card'\\n        };\\n        \\n        return iconMap[type] || 'bell';\\n    }\\n    \\n    onMount(() => {\\n        loadData();\\n        \\n        // Set up WebSocket for real-time notifications\\n        const ws = new WebSocket(\`\${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//\${window.location.host}/ws\`);\\n        \\n        ws.onmessage = (event) => {\\n            const data = JSON.parse(event.data);\\n            if (data.type === 'notification' && data.data.type === 'alert') {\\n                // Show notification\\n                showNotification(data.data);\\n                \\n                // Reload alerts to update trigger count\\n                if (activeTab === 'alerts') {\\n                    loadData();\\n                }\\n            }\\n        };\\n        \\n        return () => {\\n            ws.close();\\n        };\\n    });\\n    \\n    function showNotification(notification) {\\n        // You can implement a toast notification here\\n        console.log('Alert triggered:', notification);\\n    }\\n<\/script>\\n\\n<svelte:head>\\n    <title>Trading Alerts - TradeSense</title>\\n</svelte:head>\\n\\n<div class=\\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\\">\\n    <!-- Header -->\\n    <div class=\\"mb-8\\">\\n        <div class=\\"flex justify-between items-center\\">\\n            <div>\\n                <h1 class=\\"text-3xl font-bold text-gray-900\\">Trading Alerts</h1>\\n                <p class=\\"mt-2 text-gray-600\\">\\n                    Stay informed with automated trading notifications\\n                </p>\\n            </div>\\n            <button\\n                on:click={() => { selectedTemplate = null; showCreateModal = true; }}\\n                class=\\"btn btn-primary\\"\\n                disabled={stats && stats.alerts_remaining === 0}\\n            >\\n                <Icon name=\\"plus\\" class=\\"w-5 h-5 mr-2\\" />\\n                Create Alert\\n            </button>\\n        </div>\\n        \\n        {#if stats}\\n            <div class=\\"mt-4 grid grid-cols-2 sm:grid-cols-4 gap-4\\">\\n                <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\\">\\n                    <div class=\\"text-sm text-gray-600\\">Active Alerts</div>\\n                    <div class=\\"mt-1 text-2xl font-semibold text-gray-900\\">\\n                        {stats.active_alerts}\\n                        <span class=\\"text-sm text-gray-500\\">/ {stats.alert_limit}</span>\\n                    </div>\\n                </div>\\n                <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\\">\\n                    <div class=\\"text-sm text-gray-600\\">Total Triggers</div>\\n                    <div class=\\"mt-1 text-2xl font-semibold text-gray-900\\">\\n                        {stats.total_triggers}\\n                    </div>\\n                </div>\\n                <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\\">\\n                    <div class=\\"text-sm text-gray-600\\">Last 24h</div>\\n                    <div class=\\"mt-1 text-2xl font-semibold text-gray-900\\">\\n                        {stats.triggers_24h}\\n                    </div>\\n                </div>\\n                <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\\">\\n                    <div class=\\"text-sm text-gray-600\\">Last 7d</div>\\n                    <div class=\\"mt-1 text-2xl font-semibold text-gray-900\\">\\n                        {stats.triggers_7d}\\n                    </div>\\n                </div>\\n            </div>\\n        {/if}\\n    </div>\\n    \\n    <!-- Tabs -->\\n    <div class=\\"mb-6\\">\\n        <div class=\\"border-b border-gray-200\\">\\n            <nav class=\\"-mb-px flex space-x-8\\">\\n                <button\\n                    on:click={() => { activeTab = 'alerts'; loadData(); }}\\n                    class=\\"py-2 px-1 border-b-2 font-medium text-sm\\"\\n                    class:border-indigo-500={activeTab === 'alerts'}\\n                    class:text-indigo-600={activeTab === 'alerts'}\\n                    class:border-transparent={activeTab !== 'alerts'}\\n                    class:text-gray-500={activeTab !== 'alerts'}\\n                >\\n                    My Alerts\\n                </button>\\n                <button\\n                    on:click={() => { activeTab = 'templates'; loadData(); }}\\n                    class=\\"py-2 px-1 border-b-2 font-medium text-sm\\"\\n                    class:border-indigo-500={activeTab === 'templates'}\\n                    class:text-indigo-600={activeTab === 'templates'}\\n                    class:border-transparent={activeTab !== 'templates'}\\n                    class:text-gray-500={activeTab !== 'templates'}\\n                >\\n                    Templates\\n                </button>\\n                <button\\n                    on:click={() => { activeTab = 'history'; loadData(); }}\\n                    class=\\"py-2 px-1 border-b-2 font-medium text-sm\\"\\n                    class:border-indigo-500={activeTab === 'history'}\\n                    class:text-indigo-600={activeTab === 'history'}\\n                    class:border-transparent={activeTab !== 'history'}\\n                    class:text-gray-500={activeTab !== 'history'}\\n                >\\n                    History\\n                </button>\\n            </nav>\\n        </div>\\n    </div>\\n    \\n    {#if loading}\\n        <div class=\\"flex justify-center py-12\\">\\n            <div class=\\"spinner\\"></div>\\n        </div>\\n    {:else if error}\\n        <div class=\\"alert alert-error\\">{error}</div>\\n    {:else}\\n        <!-- My Alerts Tab -->\\n        {#if activeTab === 'alerts'}\\n            {#if alerts.length === 0}\\n                <div class=\\"text-center py-12\\">\\n                    <Icon name=\\"bell-off\\" class=\\"w-16 h-16 text-gray-400 mx-auto mb-4\\" />\\n                    <h3 class=\\"text-lg font-medium text-gray-900 mb-2\\">No alerts yet</h3>\\n                    <p class=\\"text-gray-600 mb-4\\">Create your first alert to get started</p>\\n                    <button\\n                        on:click={() => { activeTab = 'templates'; loadData(); }}\\n                        class=\\"btn btn-primary\\"\\n                    >\\n                        Browse Templates\\n                    </button>\\n                </div>\\n            {:else}\\n                <div class=\\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\\">\\n                    {#each alerts as alert}\\n                        <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\\">\\n                            <div class=\\"p-4\\">\\n                                <div class=\\"flex items-start justify-between mb-3\\">\\n                                    <div class=\\"flex items-center\\">\\n                                        <Icon \\n                                            name={getAlertIcon(alert.type)} \\n                                            class=\\"w-5 h-5 text-gray-600 mr-2\\" \\n                                        />\\n                                        <h3 class=\\"font-semibold text-gray-900\\">\\n                                            {alert.name}\\n                                        </h3>\\n                                    </div>\\n                                    <span class=\\"px-2 py-1 text-xs rounded-full bg-{priorityColors[alert.priority]}-100 text-{priorityColors[alert.priority]}-800\\">\\n                                        {alert.priority}\\n                                    </span>\\n                                </div>\\n                                \\n                                {#if alert.description}\\n                                    <p class=\\"text-sm text-gray-600 mb-3\\">\\n                                        {alert.description}\\n                                    </p>\\n                                {/if}\\n                                \\n                                <div class=\\"space-y-2 text-sm\\">\\n                                    <div class=\\"flex items-center justify-between\\">\\n                                        <span class=\\"text-gray-500\\">Status:</span>\\n                                        <span class=\\"px-2 py-1 text-xs rounded-full bg-{statusColors[alert.status]}-100 text-{statusColors[alert.status]}-800\\">\\n                                            {alert.status}\\n                                        </span>\\n                                    </div>\\n                                    \\n                                    <div class=\\"flex items-center justify-between\\">\\n                                        <span class=\\"text-gray-500\\">Triggers:</span>\\n                                        <span class=\\"font-medium\\">{alert.trigger_count}</span>\\n                                    </div>\\n                                    \\n                                    {#if alert.last_triggered_at}\\n                                        <div class=\\"flex items-center justify-between\\">\\n                                            <span class=\\"text-gray-500\\">Last:</span>\\n                                            <span class=\\"text-xs\\">\\n                                                {new Date(alert.last_triggered_at).toLocaleDateString()}\\n                                            </span>\\n                                        </div>\\n                                    {/if}\\n                                    \\n                                    <div class=\\"pt-2\\">\\n                                        <div class=\\"text-xs text-gray-500 mb-1\\">Conditions:</div>\\n                                        <div class=\\"text-xs font-mono bg-gray-50 p-2 rounded\\">\\n                                            {formatConditions(alert.conditions)}\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                \\n                                <div class=\\"mt-4 flex items-center justify-between\\">\\n                                    <div class=\\"flex space-x-1\\">\\n                                        {#each alert.channels as channel}\\n                                            <Icon \\n                                                name={\\n                                                    channel === 'email' ? 'mail' :\\n                                                    channel === 'sms' ? 'message-square' :\\n                                                    channel === 'in_app' ? 'bell' :\\n                                                    'link'\\n                                                }\\n                                                class=\\"w-4 h-4 text-gray-400\\"\\n                                                title={channel}\\n                                            />\\n                                        {/each}\\n                                    </div>\\n                                    \\n                                    <div class=\\"flex space-x-2\\">\\n                                        <button\\n                                            on:click={() => toggleAlert(alert.id, alert.status)}\\n                                            class=\\"text-indigo-600 hover:text-indigo-700\\"\\n                                            title={alert.status === 'active' ? 'Disable' : 'Enable'}\\n                                        >\\n                                            <Icon \\n                                                name={alert.status === 'active' ? 'pause' : 'play'} \\n                                                class=\\"w-5 h-5\\" \\n                                            />\\n                                        </button>\\n                                        <button\\n                                            on:click={() => testAlert(alert.id)}\\n                                            class=\\"text-green-600 hover:text-green-700\\"\\n                                            title=\\"Test alert\\"\\n                                        >\\n                                            <Icon name=\\"zap\\" class=\\"w-5 h-5\\" />\\n                                        </button>\\n                                        <button\\n                                            on:click={() => viewAlertDetails(alert)}\\n                                            class=\\"text-gray-600 hover:text-gray-700\\"\\n                                            title=\\"View details\\"\\n                                        >\\n                                            <Icon name=\\"eye\\" class=\\"w-5 h-5\\" />\\n                                        </button>\\n                                        <button\\n                                            on:click={() => deleteAlert(alert.id)}\\n                                            class=\\"text-red-600 hover:text-red-700\\"\\n                                            title=\\"Delete\\"\\n                                        >\\n                                            <Icon name=\\"trash-2\\" class=\\"w-5 h-5\\" />\\n                                        </button>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    {/each}\\n                </div>\\n            {/if}\\n        {/if}\\n        \\n        <!-- Templates Tab -->\\n        {#if activeTab === 'templates'}\\n            <div class=\\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\\">\\n                {#each templates as template}\\n                    <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\\">\\n                        <div class=\\"flex items-start justify-between mb-3\\">\\n                            <h3 class=\\"font-semibold text-gray-900\\">\\n                                {template.name}\\n                            </h3>\\n                            <span class=\\"px-2 py-1 text-xs rounded-full bg-indigo-100 text-indigo-800\\">\\n                                {template.category}\\n                            </span>\\n                        </div>\\n                        \\n                        <p class=\\"text-sm text-gray-600 mb-3\\">\\n                            {template.description}\\n                        </p>\\n                        \\n                        <div class=\\"text-xs text-gray-500 mb-3\\">\\n                            Default conditions:\\n                            <div class=\\"mt-1 font-mono bg-gray-50 p-2 rounded\\">\\n                                {formatConditions(template.default_conditions)}\\n                            </div>\\n                        </div>\\n                        \\n                        <button\\n                            on:click={() => createFromTemplate(template)}\\n                            class=\\"btn btn-sm btn-primary w-full\\"\\n                        >\\n                            Use Template\\n                        </button>\\n                    </div>\\n                {/each}\\n            </div>\\n        {/if}\\n        \\n        <!-- History Tab -->\\n        {#if activeTab === 'history'}\\n            <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200\\">\\n                <table class=\\"min-w-full divide-y divide-gray-200\\">\\n                    <thead class=\\"bg-gray-50\\">\\n                        <tr>\\n                            <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                                Alert\\n                            </th>\\n                            <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                                Type\\n                            </th>\\n                            <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                                Triggered\\n                            </th>\\n                            <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                                Channels\\n                            </th>\\n                            <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                                Status\\n                            </th>\\n                        </tr>\\n                    </thead>\\n                    <tbody class=\\"bg-white divide-y divide-gray-200\\">\\n                        {#each history as item}\\n                            <tr>\\n                                <td class=\\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\\">\\n                                    {item.alert_name}\\n                                </td>\\n                                <td class=\\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\\">\\n                                    {item.alert_type.replace(/_/g, ' ')}\\n                                </td>\\n                                <td class=\\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\\">\\n                                    {new Date(item.triggered_at).toLocaleString()}\\n                                </td>\\n                                <td class=\\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\\">\\n                                    {item.channels_notified.join(', ')}\\n                                </td>\\n                                <td class=\\"px-6 py-4 whitespace-nowrap text-sm\\">\\n                                    <div class=\\"flex space-x-2\\">\\n                                        {#each Object.entries(item.notification_status) as [channel, status]}\\n                                            <span class=\\"inline-flex items-center text-xs\\">\\n                                                <Icon \\n                                                    name={status === 'success' ? 'check-circle' : 'x-circle'}\\n                                                    class=\\"w-4 h-4 mr-1 text-{status === 'success' ? 'green' : 'red'}-500\\"\\n                                                />\\n                                                {channel}\\n                                            </span>\\n                                        {/each}\\n                                    </div>\\n                                </td>\\n                            </tr>\\n                        {/each}\\n                    </tbody>\\n                </table>\\n            </div>\\n        {/if}\\n    {/if}\\n</div>\\n\\n<!-- Create Alert Modal -->\\n{#if showCreateModal}\\n    <CreateAlertModal\\n        template={selectedTemplate}\\n        onClose={() => { showCreateModal = false; selectedTemplate = null; }}\\n        onSuccess={() => { showCreateModal = false; loadData(); }}\\n    />\\n{/if}\\n\\n<!-- Alert Details Modal -->\\n{#if showDetails && selectedAlert}\\n    <div class=\\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\\">\\n        <div class=\\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\\">\\n            <div class=\\"p-6 border-b border-gray-200\\">\\n                <div class=\\"flex items-center justify-between\\">\\n                    <h2 class=\\"text-xl font-bold text-gray-900\\">Alert Details</h2>\\n                    <button\\n                        on:click={() => { showDetails = false; selectedAlert = null; }}\\n                        class=\\"text-gray-500 hover:text-gray-700\\"\\n                    >\\n                        <Icon name=\\"x\\" class=\\"w-6 h-6\\" />\\n                    </button>\\n                </div>\\n            </div>\\n            \\n            <div class=\\"p-6\\">\\n                <pre class=\\"text-sm bg-gray-50 p-4 rounded overflow-x-auto\\">\\n{JSON.stringify(selectedAlert, null, 2)}\\n                </pre>\\n            </div>\\n        </div>\\n    </div>\\n{/if}\\n\\n<style>\\n    .spinner {\\n        width: 2rem; height: 2rem; border-width: 4px; border-color: #c7d2fe; border-top-color: #4f46e5; border-radius: 9999px; animation: spin 1s linear infinite;\\n    }\\n    \\n    .btn {\\n        padding: 0.5rem 1rem; border-radius: 0.375rem; font-weight: 500; transition: background-color 0.2s, color 0.2s; display: inline-flex; align-items: center; justify-content: center;\\n    }\\n    \\n    .btn-primary {\\n        background-color: #4f46e5;\\n        color: white;\\n    }\\n    \\n    .btn-primary:hover {\\n        background-color: #4338ca;\\n    }\\n    \\n    .btn-sm {\\n        padding: 0.25rem 0.75rem;\\n        font-size: 0.875rem;\\n    }\\n    \\n    .btn:disabled {\\n        opacity: 0.5;\\n        cursor: not-allowed;\\n    }\\n    \\n    .alert {\\n        padding: 1rem; border-radius: 0.375rem;\\n    }\\n    \\n    .alert-error {\\n        background-color: #fef2f2;\\n        color: #991b1b;\\n        border: 1px solid #fecaca;\\n    }\\n</style>"],"names":[],"mappings":"AAqgBI,uBAAS,CACL,KAAK,CAAE,IAAI,CAAE,MAAM,CAAE,IAAI,CAAE,YAAY,CAAE,GAAG,CAAE,YAAY,CAAE,OAAO,CAAE,gBAAgB,CAAE,OAAO,CAAE,aAAa,CAAE,MAAM,CAAE,SAAS,CAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QACrJ,CAEA,mBAAK,CACD,OAAO,CAAE,MAAM,CAAC,IAAI,CAAE,aAAa,CAAE,QAAQ,CAAE,WAAW,CAAE,GAAG,CAAE,UAAU,CAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAE,OAAO,CAAE,WAAW,CAAE,WAAW,CAAE,MAAM,CAAE,eAAe,CAAE,MAChL,CAEA,2BAAa,CACT,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KACX,CAEA,2BAAY,MAAO,CACf,gBAAgB,CAAE,OACtB,CAEA,sBAAQ,CACJ,OAAO,CAAE,OAAO,CAAC,OAAO,CACxB,SAAS,CAAE,QACf,CAEA,mBAAI,SAAU,CACV,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,WACZ,CAEA,qBAAO,CACH,OAAO,CAAE,IAAI,CAAE,aAAa,CAAE,QAClC,CAEA,2BAAa,CACT,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OACtB"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${$$result.head += `<!-- HEAD_svelte-1jobyqg_START -->${$$result.title = `<title>Trading Alerts - TradeSense</title>`, ""}<!-- HEAD_svelte-1jobyqg_END -->`, ""} <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8"> <div class="mb-8"><div class="flex justify-between items-center"><div data-svelte-h="svelte-scs41f"><h1 class="text-3xl font-bold text-gray-900">Trading Alerts</h1> <p class="mt-2 text-gray-600">Stay informed with automated trading notifications</p></div> <button class="btn btn-primary svelte-1t7wpul" ${""}>${validate_component(Icon, "Icon").$$render($$result, { name: "plus", class: "w-5 h-5 mr-2" }, {}, {})}
                Create Alert</button></div> ${``}</div>  <div class="mb-6"><div class="border-b border-gray-200"><nav class="-mb-px flex space-x-8"><button class="${[
    "py-2 px-1 border-b-2 font-medium text-sm",
    "border-indigo-500 text-indigo-600  "
  ].join(" ").trim()}" data-svelte-h="svelte-1ihnxy3">My Alerts</button> <button class="${[
    "py-2 px-1 border-b-2 font-medium text-sm",
    "  border-transparent text-gray-500"
  ].join(" ").trim()}" data-svelte-h="svelte-amvntd">Templates</button> <button class="${[
    "py-2 px-1 border-b-2 font-medium text-sm",
    "  border-transparent text-gray-500"
  ].join(" ").trim()}" data-svelte-h="svelte-15j2zrf">History</button></nav></div></div> ${`<div class="flex justify-center py-12" data-svelte-h="svelte-em5o00"><div class="spinner svelte-1t7wpul"></div></div>`}</div>  ${``}  ${``}`;
});
export {
  Page as default
};
