
name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements-test.txt

      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          pytest --cov=. --cov-report=xml

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Deploy to Replit Staging
        env:
          REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
          REPLIT_STAGING_URL: ${{ secrets.REPLIT_STAGING_URL }}
        run: |
          echo "Deploying to staging environment..."
          # Deploy backend
          curl -X POST \
            -H "Authorization: Bearer $REPLIT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"branch": "main", "environment": "staging"}' \
            "$REPLIT_STAGING_URL/api/deploy"

      - name: Run staging health check
        run: |
          echo "Running health checks on staging..."
          sleep 30
          curl -f "${{ secrets.STAGING_HEALTH_URL }}/health" || exit 1

      - name: Notify staging deployment
        if: always()
        run: |
          echo "Staging deployment completed with status: ${{ job.status }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp -r backend/* deployment-package/
          cp -r frontend/dist deployment-package/static/
          
          # Create deployment manifest
          cat > deployment-package/deployment-manifest.json << EOF
          {
            "version": "${{ github.ref_name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "environment": "production",
            "components": {
              "backend": "FastAPI",
              "frontend": "React",
              "database": "SQLite"
            }
          }
          EOF

      - name: Deploy to Replit Production
        env:
          REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
          REPLIT_PRODUCTION_URL: ${{ secrets.REPLIT_PRODUCTION_URL }}
        run: |
          echo "Deploying to production environment..."
          
          # Create backup point
          curl -X POST \
            -H "Authorization: Bearer $REPLIT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"action": "backup", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' \
            "$REPLIT_PRODUCTION_URL/api/backup"
          
          # Deploy new version
          curl -X POST \
            -H "Authorization: Bearer $REPLIT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"branch": "main", "tag": "'${{ github.ref_name }}'", "environment": "production"}' \
            "$REPLIT_PRODUCTION_URL/api/deploy"

      - name: Run production health checks
        env:
          PRODUCTION_HEALTH_URL: ${{ secrets.PRODUCTION_HEALTH_URL }}
        run: |
          echo "Running comprehensive health checks..."
          
          # Wait for deployment to stabilize
          sleep 60
          
          # Health check
          curl -f "$PRODUCTION_HEALTH_URL/health" || exit 1
          
          # API endpoints check
          curl -f "$PRODUCTION_HEALTH_URL/api/v1/health" || exit 1
          
          # Database connectivity
          curl -f "$PRODUCTION_HEALTH_URL/api/v1/health/database" || exit 1
          
          echo "All health checks passed!"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          
          # Test critical user flows
          python -m pytest tests/smoke/ --production-url="${{ secrets.PRODUCTION_HEALTH_URL }}"

      - name: Update deployment status
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="SUCCESS"
            COLOR="good"
          else
            STATUS_EMOJI="❌"
            STATUS_TEXT="FAILED"
            COLOR="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"$STATUS_EMOJI TradeSense Production Deployment $STATUS_TEXT\",
                \"fields\": [
                  {\"title\": \"Version\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true},
                  {\"title\": \"Environment\", \"value\": \"Production\", \"short\": true},
                  {\"title\": \"Status\", \"value\": \"$STATUS_TEXT\", \"short\": true}
                ]
              }]
            }" \
            $SLACK_WEBHOOK

  rollback:
    name: Rollback if Failed
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    environment: production
    steps:
      - name: Execute rollback
        env:
          REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
          REPLIT_PRODUCTION_URL: ${{ secrets.REPLIT_PRODUCTION_URL }}
        run: |
          echo "Initiating rollback procedure..."
          
          curl -X POST \
            -H "Authorization: Bearer $REPLIT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"action": "rollback", "reason": "deployment_failure"}' \
            "$REPLIT_PRODUCTION_URL/api/rollback"

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          sleep 30
          curl -f "${{ secrets.PRODUCTION_HEALTH_URL }}/health" || exit 1
          echo "Rollback successful!"
