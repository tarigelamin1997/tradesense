services:
  # PostgreSQL with automatic initialization
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: tradesense
      POSTGRES_PASSWORD: tradesense123
      POSTGRES_DB: tradesense
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradesense -d tradesense"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  # Redis with persistence
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: >
      redis-server
      --requirepass tradesense123
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Backend with comprehensive error handling
  backend:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            curl \
            build-essential \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        
        # Copy requirements first for better caching
        COPY requirements.txt .
        
        # Install Python dependencies with fallbacks
        RUN pip install --no-cache-dir -r requirements.txt || \
            pip install --no-cache-dir \
                fastapi==0.104.1 \
                uvicorn[standard]==0.24.0 \
                sqlalchemy==2.0.23 \
                psycopg2-binary==2.9.9 \
                pydantic==2.5.0 \
                python-jose[cryptography]==3.3.0 \
                passlib[bcrypt]==1.7.4 \
                python-multipart==0.0.6 \
                email-validator \
                jinja2 \
                aiohttp \
                redis \
                pandas
        
        # Copy application code
        COPY src/backend/ .
        
        # Create a startup script
        RUN echo '#!/bin/bash\n\
        echo "🚀 Starting TradeSense Backend..."\n\
        echo "📊 Waiting for database..."\n\
        while ! pg_isready -h postgres -U tradesense; do\n\
          echo "⏳ Database not ready, waiting..."\n\
          sleep 2\n\
        done\n\
        echo "✅ Database is ready!"\n\
        echo "🔧 Running migrations..."\n\
        python -c "from models import Base; from db.connection import engine; Base.metadata.create_all(bind=engine)" || echo "⚠️  Migration warning"\n\
        echo "🎯 Starting server..."\n\
        python main.py\n\
        ' > /start.sh && chmod +x /start.sh
        
        CMD ["/start.sh"]
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://tradesense:tradesense123@postgres:5432/tradesense
      REDIS_URL: redis://:tradesense123@redis:6379/0
      SECRET_KEY: test-secret-key-for-development
      JWT_SECRET_KEY: test-jwt-secret-key
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Frontend with guaranteed working configuration
  frontend:
    build:
      context: .
      dockerfile_inline: |
        FROM node:18-alpine
        
        # Install dependencies for building
        RUN apk add --no-cache python3 make g++ curl
        
        WORKDIR /app
        
        # Copy package files
        COPY frontend/package*.json ./
        
        # Install dependencies with retry logic
        RUN npm install || npm install --legacy-peer-deps || npm install --force
        
        # Copy application code
        COPY frontend/ .
        
        # Create a proper Vite config if it doesn't exist
        RUN echo 'import { sveltekit } from "@sveltejs/kit/vite";\n\
        import { defineConfig } from "vite";\n\
        \n\
        export default defineConfig({\n\
          plugins: [sveltekit()],\n\
          server: {\n\
            host: "0.0.0.0",\n\
            port: 3001,\n\
            strictPort: true,\n\
            hmr: {\n\
              port: 3001\n\
            }\n\
          }\n\
        });' > vite.config.js.tmp && \
        [ ! -f vite.config.js ] && mv vite.config.js.tmp vite.config.js || rm vite.config.js.tmp
        
        # Ensure the dev script works properly
        RUN npm pkg set scripts.dev="vite dev --port 3001 --host 0.0.0.0"
        
        EXPOSE 3001
        
        CMD ["npm", "run", "dev"]
    ports:
      - "3001:3001"
    environment:
      VITE_API_BASE_URL: http://localhost:8000
      NODE_ENV: development
      FORCE_COLOR: 1
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  # Debug container for troubleshooting
  debug:
    image: nicolaka/netshoot
    command: sleep infinity
    network_mode: host
    volumes:
      - ./:/workspace
    profiles:
      - debug

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge