import { c as create_ssr_component, v as validate_component, e as each, b as escape, a as add_attribute } from "../../../chunks/ssr.js";
import { a as api } from "../../../chunks/client2.js";
import { L as LoadingSkeleton } from "../../../chunks/LoadingSkeleton.js";
import { D as Download } from "../../../chunks/download.js";
import { C as Circle_alert } from "../../../chunks/circle-alert.js";
import { D as Dollar_sign, T as Trending_down, C as Calendar, P as Percent } from "../../../chunks/trending-down.js";
import { T as Trending_up } from "../../../chunks/trending-up.js";
const css = {
  code: ".portfolio-page.svelte-oetpw9.svelte-oetpw9{max-width:1400px;margin:0 auto;padding-bottom:4rem}.page-header.svelte-oetpw9.svelte-oetpw9{display:flex;justify-content:space-between;align-items:center;margin-bottom:2rem;flex-wrap:wrap;gap:1rem}.page-header.svelte-oetpw9 h1.svelte-oetpw9{font-size:2rem;margin-bottom:0.5rem}.page-header.svelte-oetpw9 p.svelte-oetpw9{color:#666}.header-actions.svelte-oetpw9.svelte-oetpw9{display:flex;gap:1rem}.export-button.svelte-oetpw9.svelte-oetpw9{display:flex;align-items:center;gap:0.5rem;padding:0.75rem 1.5rem;background:white;border:1px solid #e5e7eb;border-radius:6px;font-size:0.875rem;font-weight:500;color:#374151;cursor:pointer;transition:all 0.2s}.export-button.svelte-oetpw9.svelte-oetpw9:hover{background:#f9fafb;border-color:#d1d5db}.filters.svelte-oetpw9.svelte-oetpw9{display:flex;gap:1rem;margin-bottom:2rem;flex-wrap:wrap}.filter-select.svelte-oetpw9.svelte-oetpw9{padding:0.5rem 1rem;border:1px solid #e5e7eb;border-radius:6px;background:white;font-size:0.875rem;color:#374151;cursor:pointer;transition:border-color 0.2s}.filter-select.svelte-oetpw9.svelte-oetpw9:focus{outline:none;border-color:#10b981}.summary-cards.svelte-oetpw9.svelte-oetpw9{display:grid;grid-template-columns:repeat(auto-fit, minmax(250px, 1fr));gap:1.5rem;margin-bottom:2rem}.summary-card.svelte-oetpw9.svelte-oetpw9{background:white;padding:1.5rem;border-radius:8px;box-shadow:0 1px 3px rgba(0, 0, 0, 0.1)}.card-label.svelte-oetpw9.svelte-oetpw9{font-size:0.875rem;color:#6b7280;margin-bottom:0.5rem}.card-value.svelte-oetpw9.svelte-oetpw9{font-size:2rem;font-weight:600;color:#1a1a1a;margin-bottom:0.5rem}.card-value.positive.svelte-oetpw9.svelte-oetpw9{color:#10b981}.card-value.negative.svelte-oetpw9.svelte-oetpw9{color:#ef4444}.card-change.svelte-oetpw9.svelte-oetpw9{display:flex;align-items:center;gap:0.375rem;font-size:0.875rem;color:#6b7280}.card-change.positive.svelte-oetpw9.svelte-oetpw9{color:#10b981}.card-change.negative.svelte-oetpw9.svelte-oetpw9{color:#ef4444}.card.svelte-oetpw9.svelte-oetpw9{background:white;padding:1.5rem;border-radius:8px;box-shadow:0 1px 3px rgba(0, 0, 0, 0.1)}.card.svelte-oetpw9 h2.svelte-oetpw9{font-size:1.25rem;margin-bottom:1rem;color:#1a1a1a}.portfolio-chart.svelte-oetpw9.svelte-oetpw9{margin-bottom:2rem}.chart-container.svelte-oetpw9.svelte-oetpw9{height:300px;position:relative}.performance-chart.svelte-oetpw9.svelte-oetpw9{width:100%;height:100%}.allocation-section.svelte-oetpw9.svelte-oetpw9{display:grid;grid-template-columns:1fr 1fr;gap:2rem;margin-bottom:2rem}.donut-chart.svelte-oetpw9.svelte-oetpw9{width:200px;height:200px;margin:0 auto 1.5rem}.donut.svelte-oetpw9.svelte-oetpw9{width:100%;height:100%}.donut-center.svelte-oetpw9.svelte-oetpw9{font-size:24px;font-weight:600;fill:#1a1a1a}.donut-center.svelte-oetpw9 tspan.svelte-oetpw9{fill:#6b7280;font-weight:400}.allocation-legend.svelte-oetpw9.svelte-oetpw9{display:flex;flex-direction:column;gap:0.75rem}.legend-item.svelte-oetpw9.svelte-oetpw9{display:flex;align-items:center;gap:0.75rem}.legend-color.svelte-oetpw9.svelte-oetpw9{width:16px;height:16px;border-radius:4px}.legend-label.svelte-oetpw9.svelte-oetpw9{flex:1;font-size:0.875rem;color:#4b5563;text-transform:capitalize}.legend-value.svelte-oetpw9.svelte-oetpw9{font-size:0.875rem;font-weight:600;color:#1a1a1a}.performers-list.svelte-oetpw9.svelte-oetpw9{display:flex;flex-direction:column;gap:1rem}.performer-item.svelte-oetpw9.svelte-oetpw9{display:flex;justify-content:space-between;align-items:center;padding:0.75rem;background:#f9fafb;border-radius:6px}.performer-info.svelte-oetpw9.svelte-oetpw9{display:flex;flex-direction:column;gap:0.25rem}.performer-symbol.svelte-oetpw9.svelte-oetpw9{font-weight:600;color:#1a1a1a}.performer-class.svelte-oetpw9.svelte-oetpw9{font-size:0.75rem;color:#6b7280;text-transform:capitalize}.performer-pnl.svelte-oetpw9.svelte-oetpw9{font-size:1.125rem;font-weight:600}.positions-section.svelte-oetpw9.svelte-oetpw9{margin-top:2rem}.positions-section.svelte-oetpw9 h2.svelte-oetpw9{font-size:1.25rem;margin-bottom:1rem;color:#1a1a1a}.positions-table.svelte-oetpw9.svelte-oetpw9{overflow-x:auto}table.svelte-oetpw9.svelte-oetpw9{width:100%;border-collapse:collapse}th.svelte-oetpw9.svelte-oetpw9,td.svelte-oetpw9.svelte-oetpw9{text-align:left;padding:0.75rem;border-bottom:1px solid #e5e7eb}th.svelte-oetpw9.svelte-oetpw9{font-weight:600;color:#6b7280;font-size:0.875rem;text-transform:uppercase}tr.svelte-oetpw9.svelte-oetpw9:hover{background:#f9fafb}.symbol-cell.svelte-oetpw9.svelte-oetpw9{display:flex;flex-direction:column;gap:0.125rem}.symbol.svelte-oetpw9.svelte-oetpw9{font-weight:600;color:#1a1a1a}.asset-class.svelte-oetpw9.svelte-oetpw9{font-size:0.75rem;color:#6b7280;text-transform:capitalize}.positive.svelte-oetpw9.svelte-oetpw9{color:#10b981;font-weight:500}.negative.svelte-oetpw9.svelte-oetpw9{color:#ef4444;font-weight:500}.position-card.svelte-oetpw9.svelte-oetpw9{background:white;border-radius:8px;padding:1rem;box-shadow:0 1px 3px rgba(0, 0, 0, 0.1);margin-bottom:1rem}.position-header.svelte-oetpw9.svelte-oetpw9{display:flex;justify-content:space-between;align-items:center;margin-bottom:1rem;padding-bottom:1rem;border-bottom:1px solid #e5e7eb}.position-symbol.svelte-oetpw9.svelte-oetpw9{display:flex;flex-direction:column;gap:0.125rem}.position-pnl.svelte-oetpw9.svelte-oetpw9{text-align:right;display:flex;flex-direction:column;gap:0.125rem}.position-pnl.svelte-oetpw9 .pnl-percent.svelte-oetpw9{font-size:0.875rem}.position-details.svelte-oetpw9.svelte-oetpw9{display:grid;gap:0.75rem}.detail-row.svelte-oetpw9.svelte-oetpw9{display:flex;justify-content:space-between;align-items:center;font-size:0.875rem}.detail-row.svelte-oetpw9 .label.svelte-oetpw9{color:#6b7280}.detail-row.svelte-oetpw9 .value.svelte-oetpw9{color:#1a1a1a;font-weight:500}.portfolio-skeleton.svelte-oetpw9.svelte-oetpw9{display:flex;flex-direction:column;gap:2rem}.error.svelte-oetpw9.svelte-oetpw9{display:flex;align-items:center;gap:0.5rem;background:#fee;color:#dc2626;padding:1rem;border-radius:6px;margin-bottom:1rem}.desktop-only.svelte-oetpw9.svelte-oetpw9{display:block}.mobile-only.svelte-oetpw9.svelte-oetpw9{display:none}@media(max-width: 768px){.portfolio-page.svelte-oetpw9.svelte-oetpw9{padding:0 1rem 4rem}.page-header.svelte-oetpw9.svelte-oetpw9{flex-direction:column;align-items:flex-start}.page-header.svelte-oetpw9 h1.svelte-oetpw9{font-size:1.75rem}.summary-cards.svelte-oetpw9.svelte-oetpw9{grid-template-columns:repeat(2, 1fr);gap:1rem}.allocation-section.svelte-oetpw9.svelte-oetpw9{grid-template-columns:1fr}.desktop-only.svelte-oetpw9.svelte-oetpw9{display:none}.mobile-only.svelte-oetpw9.svelte-oetpw9{display:block}.positions-cards.svelte-oetpw9.svelte-oetpw9{display:flex;flex-direction:column;gap:1rem}}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nimport {\\n  TrendingUp,\\n  TrendingDown,\\n  DollarSign,\\n  Percent,\\n  Calendar,\\n  AlertCircle,\\n  Filter,\\n  Download\\n} from \\"lucide-svelte\\";\\nimport { api } from \\"$lib/api/client\\";\\nimport { logger } from \\"$lib/utils/logger\\";\\nimport LoadingSkeleton from \\"$lib/components/LoadingSkeleton.svelte\\";\\nlet loading = true;\\nlet error = \\"\\";\\nlet selectedTimeframe = \\"30d\\";\\nlet selectedAssetClass = \\"all\\";\\nlet portfolio = {\\n  totalValue: 0,\\n  totalCost: 0,\\n  totalPnL: 0,\\n  totalPnLPercent: 0,\\n  positions: [],\\n  allocations: [],\\n  performance: []\\n};\\nconst timeframes = [\\n  { value: \\"7d\\", label: \\"7 Days\\" },\\n  { value: \\"30d\\", label: \\"30 Days\\" },\\n  { value: \\"90d\\", label: \\"90 Days\\" },\\n  { value: \\"1y\\", label: \\"1 Year\\" },\\n  { value: \\"all\\", label: \\"All Time\\" }\\n];\\nconst assetClasses = [\\n  { value: \\"all\\", label: \\"All Assets\\" },\\n  { value: \\"stocks\\", label: \\"Stocks\\" },\\n  { value: \\"options\\", label: \\"Options\\" },\\n  { value: \\"futures\\", label: \\"Futures\\" },\\n  { value: \\"forex\\", label: \\"Forex\\" },\\n  { value: \\"crypto\\", label: \\"Crypto\\" }\\n];\\nconst allocationColors = {\\n  stocks: \\"#10b981\\",\\n  options: \\"#3b82f6\\",\\n  futures: \\"#f59e0b\\",\\n  forex: \\"#8b5cf6\\",\\n  crypto: \\"#ef4444\\",\\n  other: \\"#6b7280\\"\\n};\\nasync function fetchPortfolio() {\\n  loading = true;\\n  error = \\"\\";\\n  try {\\n    const response = await api.get(\\"/api/v1/portfolio\\", {\\n      params: {\\n        timeframe: selectedTimeframe,\\n        assetClass: selectedAssetClass === \\"all\\" ? void 0 : selectedAssetClass\\n      }\\n    });\\n    portfolio = response;\\n    if (!portfolio.allocations || portfolio.allocations.length === 0) {\\n      calculateAllocations();\\n    }\\n  } catch (err) {\\n    logger.error(\\"Failed to fetch portfolio:\\", err);\\n    generateSampleData();\\n  } finally {\\n    loading = false;\\n  }\\n}\\nfunction calculateAllocations() {\\n  const allocationMap = /* @__PURE__ */ new Map();\\n  portfolio.positions.forEach((position) => {\\n    const assetClass = position.assetClass || \\"other\\";\\n    const currentValue = allocationMap.get(assetClass) || 0;\\n    allocationMap.set(assetClass, currentValue + position.value);\\n  });\\n  portfolio.allocations = Array.from(allocationMap.entries()).map(([assetClass, value]) => ({\\n    assetClass,\\n    value,\\n    percentage: value / portfolio.totalValue * 100,\\n    color: allocationColors[assetClass] || allocationColors.other\\n  }));\\n}\\nfunction generateSampleData() {\\n  const samplePositions = [\\n    {\\n      symbol: \\"AAPL\\",\\n      quantity: 100,\\n      avgPrice: 150,\\n      currentPrice: 175.5,\\n      value: 17550,\\n      cost: 15e3,\\n      pnl: 2550,\\n      pnlPercent: 17,\\n      allocation: 25.5,\\n      assetClass: \\"stocks\\",\\n      lastTradeDate: \\"2024-01-15\\"\\n    },\\n    {\\n      symbol: \\"TSLA\\",\\n      quantity: 50,\\n      avgPrice: 200,\\n      currentPrice: 185.25,\\n      value: 9262.5,\\n      cost: 1e4,\\n      pnl: -737.5,\\n      pnlPercent: -7.38,\\n      allocation: 13.5,\\n      assetClass: \\"stocks\\",\\n      lastTradeDate: \\"2024-01-10\\"\\n    },\\n    {\\n      symbol: \\"BTC-USD\\",\\n      quantity: 0.5,\\n      avgPrice: 4e4,\\n      currentPrice: 45e3,\\n      value: 22500,\\n      cost: 2e4,\\n      pnl: 2500,\\n      pnlPercent: 12.5,\\n      allocation: 32.7,\\n      assetClass: \\"crypto\\",\\n      lastTradeDate: \\"2024-01-08\\"\\n    },\\n    {\\n      symbol: \\"EUR/USD\\",\\n      quantity: 1e4,\\n      avgPrice: 1.08,\\n      currentPrice: 1.095,\\n      value: 10950,\\n      cost: 10800,\\n      pnl: 150,\\n      pnlPercent: 1.39,\\n      allocation: 15.9,\\n      assetClass: \\"forex\\",\\n      lastTradeDate: \\"2024-01-12\\"\\n    },\\n    {\\n      symbol: \\"SPY 450C\\",\\n      quantity: 10,\\n      avgPrice: 5.5,\\n      currentPrice: 8.25,\\n      value: 8250,\\n      cost: 5500,\\n      pnl: 2750,\\n      pnlPercent: 50,\\n      allocation: 12,\\n      assetClass: \\"options\\",\\n      lastTradeDate: \\"2024-01-14\\"\\n    }\\n  ];\\n  const totalValue = samplePositions.reduce((sum, pos) => sum + pos.value, 0);\\n  const totalCost = samplePositions.reduce((sum, pos) => sum + pos.cost, 0);\\n  const totalPnL = totalValue - totalCost;\\n  const totalPnLPercent = totalPnL / totalCost * 100;\\n  const performanceData = [];\\n  const days = selectedTimeframe === \\"7d\\" ? 7 : selectedTimeframe === \\"30d\\" ? 30 : 90;\\n  let currentValue = totalCost;\\n  for (let i = days; i >= 0; i--) {\\n    const date = /* @__PURE__ */ new Date();\\n    date.setDate(date.getDate() - i);\\n    const change = (Math.random() - 0.48) * 0.02 * currentValue;\\n    currentValue += change;\\n    performanceData.push({\\n      date: date.toISOString().split(\\"T\\")[0],\\n      value: currentValue,\\n      pnl: currentValue - totalCost\\n    });\\n  }\\n  if (performanceData.length > 0) {\\n    performanceData[performanceData.length - 1].value = totalValue;\\n    performanceData[performanceData.length - 1].pnl = totalPnL;\\n  }\\n  portfolio = {\\n    totalValue,\\n    totalCost,\\n    totalPnL,\\n    totalPnLPercent,\\n    positions: samplePositions,\\n    allocations: [],\\n    performance: performanceData\\n  };\\n  calculateAllocations();\\n}\\nfunction formatCurrency(value) {\\n  return new Intl.NumberFormat(\\"en-US\\", {\\n    style: \\"currency\\",\\n    currency: \\"USD\\",\\n    minimumFractionDigits: 0,\\n    maximumFractionDigits: 0\\n  }).format(value);\\n}\\nfunction formatPercent(value) {\\n  return `${value >= 0 ? \\"+\\" : \\"\\"}${value.toFixed(2)}%`;\\n}\\nasync function exportPortfolio() {\\n  try {\\n    const response = await api.get(\\"/api/v1/portfolio/export\\", {\\n      params: { format: \\"csv\\" },\\n      responseType: \\"blob\\"\\n    });\\n    const url = window.URL.createObjectURL(new Blob([response]));\\n    const link = document.createElement(\\"a\\");\\n    link.href = url;\\n    link.setAttribute(\\"download\\", `portfolio_${(/* @__PURE__ */ new Date()).toISOString().split(\\"T\\")[0]}.csv`);\\n    document.body.appendChild(link);\\n    link.click();\\n    link.remove();\\n  } catch (err) {\\n    logger.error(\\"Failed to export portfolio:\\", err);\\n    const csv = \\"Symbol,Quantity,Avg Price,Current Price,Value,P&L,P&L %,Allocation\\\\n\\" + portfolio.positions.map(\\n      (p) => `${p.symbol},${p.quantity},${p.avgPrice},${p.currentPrice},${p.value},${p.pnl},${p.pnlPercent},${p.allocation}`\\n    ).join(\\"\\\\n\\");\\n    const blob = new Blob([csv], { type: \\"text/csv\\" });\\n    const url = window.URL.createObjectURL(blob);\\n    const link = document.createElement(\\"a\\");\\n    link.href = url;\\n    link.setAttribute(\\"download\\", `portfolio_${(/* @__PURE__ */ new Date()).toISOString().split(\\"T\\")[0]}.csv`);\\n    document.body.appendChild(link);\\n    link.click();\\n    link.remove();\\n  }\\n}\\nonMount(() => {\\n  fetchPortfolio();\\n});\\n$: if (selectedTimeframe || selectedAssetClass) {\\n  fetchPortfolio();\\n}\\n<\/script>\\n\\n<svelte:head>\\n\\t<title>Portfolio - TradeSense</title>\\n</svelte:head>\\n\\n<div class=\\"portfolio-page\\">\\n\\t<header class=\\"page-header\\">\\n\\t\\t<div>\\n\\t\\t\\t<h1>Portfolio Overview</h1>\\n\\t\\t\\t<p>Track your positions and overall performance</p>\\n\\t\\t</div>\\n\\t\\t<div class=\\"header-actions\\">\\n\\t\\t\\t<button class=\\"export-button\\" on:click={exportPortfolio}>\\n\\t\\t\\t\\t<Download size={18} />\\n\\t\\t\\t\\tExport\\n\\t\\t\\t</button>\\n\\t\\t</div>\\n\\t</header>\\n\\t\\n\\t{#if loading}\\n\\t\\t<div class=\\"portfolio-skeleton\\">\\n\\t\\t\\t<!-- Summary Cards -->\\n\\t\\t\\t<div class=\\"summary-cards\\">\\n\\t\\t\\t\\t{#each Array(4) as _}\\n\\t\\t\\t\\t\\t<LoadingSkeleton type=\\"stat\\" />\\n\\t\\t\\t\\t{/each}\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<!-- Chart -->\\n\\t\\t\\t<LoadingSkeleton type=\\"chart\\" height=\\"400px\\" />\\n\\t\\t\\t\\n\\t\\t\\t<!-- Positions Table -->\\n\\t\\t\\t<LoadingSkeleton type=\\"table\\" lines={5} />\\n\\t\\t</div>\\n\\t{:else if error}\\n\\t\\t<div class=\\"error\\">\\n\\t\\t\\t<AlertCircle size={20} />\\n\\t\\t\\t{error}\\n\\t\\t</div>\\n\\t{:else}\\n\\t\\t<!-- Filters -->\\n\\t\\t<div class=\\"filters\\">\\n\\t\\t\\t<select bind:value={selectedTimeframe} class=\\"filter-select\\">\\n\\t\\t\\t\\t{#each timeframes as timeframe}\\n\\t\\t\\t\\t\\t<option value={timeframe.value}>{timeframe.label}</option>\\n\\t\\t\\t\\t{/each}\\n\\t\\t\\t</select>\\n\\t\\t\\t\\n\\t\\t\\t<select bind:value={selectedAssetClass} class=\\"filter-select\\">\\n\\t\\t\\t\\t{#each assetClasses as assetClass}\\n\\t\\t\\t\\t\\t<option value={assetClass.value}>{assetClass.label}</option>\\n\\t\\t\\t\\t{/each}\\n\\t\\t\\t</select>\\n\\t\\t</div>\\n\\t\\t\\n\\t\\t<!-- Summary Cards -->\\n\\t\\t<div class=\\"summary-cards\\">\\n\\t\\t\\t<div class=\\"summary-card\\">\\n\\t\\t\\t\\t<div class=\\"card-label\\">Total Value</div>\\n\\t\\t\\t\\t<div class=\\"card-value\\">{formatCurrency(portfolio.totalValue)}</div>\\n\\t\\t\\t\\t<div class=\\"card-change\\">\\n\\t\\t\\t\\t\\t<DollarSign size={16} />\\n\\t\\t\\t\\t\\tPortfolio Value\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"summary-card\\">\\n\\t\\t\\t\\t<div class=\\"card-label\\">Total P&L</div>\\n\\t\\t\\t\\t<div class=\\"card-value\\" class:positive={portfolio.totalPnL >= 0} class:negative={portfolio.totalPnL < 0}>\\n\\t\\t\\t\\t\\t{formatCurrency(portfolio.totalPnL)}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\"card-change\\" class:positive={portfolio.totalPnL >= 0} class:negative={portfolio.totalPnL < 0}>\\n\\t\\t\\t\\t\\t{#if portfolio.totalPnL >= 0}\\n\\t\\t\\t\\t\\t\\t<TrendingUp size={16} />\\n\\t\\t\\t\\t\\t{:else}\\n\\t\\t\\t\\t\\t\\t<TrendingDown size={16} />\\n\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t\\t{formatPercent(portfolio.totalPnLPercent)}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"summary-card\\">\\n\\t\\t\\t\\t<div class=\\"card-label\\">Positions</div>\\n\\t\\t\\t\\t<div class=\\"card-value\\">{portfolio.positions.length}</div>\\n\\t\\t\\t\\t<div class=\\"card-change\\">\\n\\t\\t\\t\\t\\t<Calendar size={16} />\\n\\t\\t\\t\\t\\tActive Positions\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"summary-card\\">\\n\\t\\t\\t\\t<div class=\\"card-label\\">Win Rate</div>\\n\\t\\t\\t\\t<div class=\\"card-value\\">\\n\\t\\t\\t\\t\\t{((portfolio.positions.filter(p => p.pnl > 0).length / portfolio.positions.length) * 100).toFixed(0)}%\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\"card-change\\">\\n\\t\\t\\t\\t\\t<Percent size={16} />\\n\\t\\t\\t\\t\\tProfitable Positions\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t\\n\\t\\t<!-- Portfolio Chart -->\\n\\t\\t<div class=\\"portfolio-chart card\\">\\n\\t\\t\\t<h2>Portfolio Performance</h2>\\n\\t\\t\\t<div class=\\"chart-container\\">\\n\\t\\t\\t\\t<!-- Simple line chart using SVG -->\\n\\t\\t\\t\\t{#if portfolio.performance.length > 0}\\n\\t\\t\\t\\t\\t{@const maxValue = Math.max(...portfolio.performance.map(p => p.value))}\\n\\t\\t\\t\\t\\t{@const minValue = Math.min(...portfolio.performance.map(p => p.value))}\\n\\t\\t\\t\\t\\t{@const range = maxValue - minValue || 1}\\n\\t\\t\\t\\t\\t{@const points = portfolio.performance.map((p, i) => {\\n\\t\\t\\t\\t\\t\\tconst x = (i / (portfolio.performance.length - 1)) * 780 + 10;\\n\\t\\t\\t\\t\\t\\tconst y = 290 - ((p.value - minValue) / range) * 280;\\n\\t\\t\\t\\t\\t\\treturn `${x},${y}`;\\n\\t\\t\\t\\t\\t}).join(\' \')}\\n\\t\\t\\t\\t\\t<svg viewBox=\\"0 0 800 300\\" class=\\"performance-chart\\">\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t<!-- Grid lines -->\\n\\t\\t\\t\\t\\t\\t{#each Array(5) as _, i}\\n\\t\\t\\t\\t\\t\\t\\t<line \\n\\t\\t\\t\\t\\t\\t\\t\\tx1=\\"10\\" \\n\\t\\t\\t\\t\\t\\t\\t\\tx2=\\"790\\" \\n\\t\\t\\t\\t\\t\\t\\t\\ty1={10 + i * 70} \\n\\t\\t\\t\\t\\t\\t\\t\\ty2={10 + i * 70} \\n\\t\\t\\t\\t\\t\\t\\t\\tstroke=\\"#e5e7eb\\" \\n\\t\\t\\t\\t\\t\\t\\t\\tstroke-width=\\"1\\"\\n\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t<!-- Area fill -->\\n\\t\\t\\t\\t\\t\\t<polygon \\n\\t\\t\\t\\t\\t\\t\\tpoints={`10,290 ${points} 790,290`}\\n\\t\\t\\t\\t\\t\\t\\tfill=\\"url(#gradient)\\"\\n\\t\\t\\t\\t\\t\\t\\topacity=\\"0.1\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t<!-- Line -->\\n\\t\\t\\t\\t\\t\\t<polyline\\n\\t\\t\\t\\t\\t\\t\\tpoints={points}\\n\\t\\t\\t\\t\\t\\t\\tfill=\\"none\\"\\n\\t\\t\\t\\t\\t\\t\\tstroke={portfolio.totalPnL >= 0 ? \'#10b981\' : \'#ef4444\'}\\n\\t\\t\\t\\t\\t\\t\\tstroke-width=\\"2\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t<!-- Gradient definition -->\\n\\t\\t\\t\\t\\t\\t<defs>\\n\\t\\t\\t\\t\\t\\t\\t<linearGradient id=\\"gradient\\" x1=\\"0%\\" y1=\\"0%\\" x2=\\"0%\\" y2=\\"100%\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<stop offset=\\"0%\\" style=\\"stop-color:{portfolio.totalPnL >= 0 ? \'#10b981\' : \'#ef4444\'}\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t<stop offset=\\"100%\\" style=\\"stop-color:{portfolio.totalPnL >= 0 ? \'#10b981\' : \'#ef4444\'};stop-opacity:0\\" />\\n\\t\\t\\t\\t\\t\\t\\t</linearGradient>\\n\\t\\t\\t\\t\\t\\t</defs>\\n\\t\\t\\t\\t\\t</svg>\\n\\t\\t\\t\\t{/if}\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t\\n\\t\\t<!-- Asset Allocation -->\\n\\t\\t<div class=\\"allocation-section\\">\\n\\t\\t\\t<div class=\\"allocation-chart card\\">\\n\\t\\t\\t\\t<h2>Asset Allocation</h2>\\n\\t\\t\\t\\t<div class=\\"donut-chart\\">\\n\\t\\t\\t\\t\\t<svg viewBox=\\"0 0 200 200\\" class=\\"donut\\">\\n\\t\\t\\t\\t\\t\\t{#each portfolio.allocations as allocation, i}\\n\\t\\t\\t\\t\\t\\t\\t{@const radius = 80}\\n\\t\\t\\t\\t\\t\\t\\t{@const circumference = 2 * Math.PI * radius}\\n\\t\\t\\t\\t\\t\\t\\t{@const offset = portfolio.allocations\\n\\t\\t\\t\\t\\t\\t\\t\\t.slice(0, i)\\n\\t\\t\\t\\t\\t\\t\\t\\t.reduce((sum, a) => sum + a.percentage, 0) / 100 * circumference}\\n\\t\\t\\t\\t\\t\\t\\t{@const length = allocation.percentage / 100 * circumference}\\n\\t\\t\\t\\t\\t\\t\\t<circle\\n\\t\\t\\t\\t\\t\\t\\t\\tcx=\\"100\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tcy=\\"100\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tr={radius}\\n\\t\\t\\t\\t\\t\\t\\t\\tfill=\\"none\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tstroke={allocation.color}\\n\\t\\t\\t\\t\\t\\t\\t\\tstroke-width=\\"40\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tstroke-dasharray={`${length} ${circumference - length}`}\\n\\t\\t\\t\\t\\t\\t\\t\\tstroke-dashoffset={-offset}\\n\\t\\t\\t\\t\\t\\t\\t\\ttransform=\\"rotate(-90 100 100)\\"\\n\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t\\t\\t<text x=\\"100\\" y=\\"100\\" text-anchor=\\"middle\\" dominant-baseline=\\"middle\\" class=\\"donut-center\\">\\n\\t\\t\\t\\t\\t\\t\\t{portfolio.allocations.length}\\n\\t\\t\\t\\t\\t\\t\\t<tspan x=\\"100\\" dy=\\"20\\" font-size=\\"12\\">Asset Classes</tspan>\\n\\t\\t\\t\\t\\t\\t</text>\\n\\t\\t\\t\\t\\t</svg>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\"allocation-legend\\">\\n\\t\\t\\t\\t\\t{#each portfolio.allocations as allocation}\\n\\t\\t\\t\\t\\t\\t<div class=\\"legend-item\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"legend-color\\" style=\\"background: {allocation.color}\\"></div>\\n\\t\\t\\t\\t\\t\\t\\t<span class=\\"legend-label\\">{allocation.assetClass}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span class=\\"legend-value\\">{allocation.percentage.toFixed(1)}%</span>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<!-- Top Performers -->\\n\\t\\t\\t<div class=\\"top-performers card\\">\\n\\t\\t\\t\\t<h2>Top Performers</h2>\\n\\t\\t\\t\\t<div class=\\"performers-list\\">\\n\\t\\t\\t\\t\\t{#each portfolio.positions.sort((a, b) => b.pnlPercent - a.pnlPercent).slice(0, 5) as position}\\n\\t\\t\\t\\t\\t\\t<div class=\\"performer-item\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"performer-info\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"performer-symbol\\">{position.symbol}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"performer-class\\">{position.assetClass}</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"performer-pnl\\" class:positive={position.pnl > 0} class:negative={position.pnl < 0}>\\n\\t\\t\\t\\t\\t\\t\\t\\t{formatPercent(position.pnlPercent)}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t\\n\\t\\t<!-- Positions Table -->\\n\\t\\t<div class=\\"positions-section\\">\\n\\t\\t\\t<h2>Current Positions</h2>\\n\\t\\t\\t\\n\\t\\t\\t<!-- Desktop Table -->\\n\\t\\t\\t<div class=\\"positions-table card desktop-only\\">\\n\\t\\t\\t\\t<table>\\n\\t\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t\\t<th>Symbol</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>Quantity</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>Avg Price</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>Current Price</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>Value</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>P&L</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>P&L %</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>Allocation</th>\\n\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t</thead>\\n\\t\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t\\t{#each portfolio.positions as position}\\n\\t\\t\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\"symbol-cell\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"symbol\\">{position.symbol}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"asset-class\\">{position.assetClass}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>{position.quantity}</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>${position.avgPrice.toFixed(2)}</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>${position.currentPrice.toFixed(2)}</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>{formatCurrency(position.value)}</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td class:positive={position.pnl > 0} class:negative={position.pnl < 0}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{formatCurrency(position.pnl)}\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td class:positive={position.pnl > 0} class:negative={position.pnl < 0}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{formatPercent(position.pnlPercent)}\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td>{position.allocation.toFixed(1)}%</td>\\n\\t\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t{/each}\\n\\t\\t\\t\\t\\t</tbody>\\n\\t\\t\\t\\t</table>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<!-- Mobile Cards -->\\n\\t\\t\\t<div class=\\"positions-cards mobile-only\\">\\n\\t\\t\\t\\t{#each portfolio.positions as position}\\n\\t\\t\\t\\t\\t<div class=\\"position-card\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\"position-header\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"position-symbol\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"symbol\\">{position.symbol}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"asset-class\\">{position.assetClass}</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"position-pnl\\" class:positive={position.pnl > 0} class:negative={position.pnl < 0}>\\n\\t\\t\\t\\t\\t\\t\\t\\t{formatCurrency(position.pnl)}\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"pnl-percent\\">{formatPercent(position.pnlPercent)}</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t<div class=\\"position-details\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"detail-row\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"label\\">Quantity</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"value\\">{position.quantity}</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"detail-row\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"label\\">Avg Price</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"value\\">${position.avgPrice.toFixed(2)}</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"detail-row\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"label\\">Current Price</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"value\\">${position.currentPrice.toFixed(2)}</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"detail-row\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"label\\">Value</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"value\\">{formatCurrency(position.value)}</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"detail-row\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"label\\">Allocation</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"value\\">{position.allocation.toFixed(1)}%</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t{/each}\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t{/if}\\n</div>\\n\\n<style>\\n\\t.portfolio-page {\\n\\t\\tmax-width: 1400px;\\n\\t\\tmargin: 0 auto;\\n\\t\\tpadding-bottom: 4rem;\\n\\t}\\n\\t\\n\\t.page-header {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t\\tmargin-bottom: 2rem;\\n\\t\\tflex-wrap: wrap;\\n\\t\\tgap: 1rem;\\n\\t}\\n\\t\\n\\t.page-header h1 {\\n\\t\\tfont-size: 2rem;\\n\\t\\tmargin-bottom: 0.5rem;\\n\\t}\\n\\t\\n\\t.page-header p {\\n\\t\\tcolor: #666;\\n\\t}\\n\\t\\n\\t.header-actions {\\n\\t\\tdisplay: flex;\\n\\t\\tgap: 1rem;\\n\\t}\\n\\t\\n\\t.export-button {\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tgap: 0.5rem;\\n\\t\\tpadding: 0.75rem 1.5rem;\\n\\t\\tbackground: white;\\n\\t\\tborder: 1px solid #e5e7eb;\\n\\t\\tborder-radius: 6px;\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tfont-weight: 500;\\n\\t\\tcolor: #374151;\\n\\t\\tcursor: pointer;\\n\\t\\ttransition: all 0.2s;\\n\\t}\\n\\t\\n\\t.export-button:hover {\\n\\t\\tbackground: #f9fafb;\\n\\t\\tborder-color: #d1d5db;\\n\\t}\\n\\t\\n\\t/* Filters */\\n\\t.filters {\\n\\t\\tdisplay: flex;\\n\\t\\tgap: 1rem;\\n\\t\\tmargin-bottom: 2rem;\\n\\t\\tflex-wrap: wrap;\\n\\t}\\n\\t\\n\\t.filter-select {\\n\\t\\tpadding: 0.5rem 1rem;\\n\\t\\tborder: 1px solid #e5e7eb;\\n\\t\\tborder-radius: 6px;\\n\\t\\tbackground: white;\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tcolor: #374151;\\n\\t\\tcursor: pointer;\\n\\t\\ttransition: border-color 0.2s;\\n\\t}\\n\\t\\n\\t.filter-select:focus {\\n\\t\\toutline: none;\\n\\t\\tborder-color: #10b981;\\n\\t}\\n\\t\\n\\t/* Summary Cards */\\n\\t.summary-cards {\\n\\t\\tdisplay: grid;\\n\\t\\tgrid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\\n\\t\\tgap: 1.5rem;\\n\\t\\tmargin-bottom: 2rem;\\n\\t}\\n\\t\\n\\t.summary-card {\\n\\t\\tbackground: white;\\n\\t\\tpadding: 1.5rem;\\n\\t\\tborder-radius: 8px;\\n\\t\\tbox-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n\\t}\\n\\t\\n\\t.card-label {\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tcolor: #6b7280;\\n\\t\\tmargin-bottom: 0.5rem;\\n\\t}\\n\\t\\n\\t.card-value {\\n\\t\\tfont-size: 2rem;\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #1a1a1a;\\n\\t\\tmargin-bottom: 0.5rem;\\n\\t}\\n\\t\\n\\t.card-value.positive {\\n\\t\\tcolor: #10b981;\\n\\t}\\n\\t\\n\\t.card-value.negative {\\n\\t\\tcolor: #ef4444;\\n\\t}\\n\\t\\n\\t.card-change {\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tgap: 0.375rem;\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tcolor: #6b7280;\\n\\t}\\n\\t\\n\\t.card-change.positive {\\n\\t\\tcolor: #10b981;\\n\\t}\\n\\t\\n\\t.card-change.negative {\\n\\t\\tcolor: #ef4444;\\n\\t}\\n\\t\\n\\t/* Common Card Styles */\\n\\t.card {\\n\\t\\tbackground: white;\\n\\t\\tpadding: 1.5rem;\\n\\t\\tborder-radius: 8px;\\n\\t\\tbox-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n\\t}\\n\\t\\n\\t.card h2 {\\n\\t\\tfont-size: 1.25rem;\\n\\t\\tmargin-bottom: 1rem;\\n\\t\\tcolor: #1a1a1a;\\n\\t}\\n\\t\\n\\t/* Portfolio Chart */\\n\\t.portfolio-chart {\\n\\t\\tmargin-bottom: 2rem;\\n\\t}\\n\\t\\n\\t.chart-container {\\n\\t\\theight: 300px;\\n\\t\\tposition: relative;\\n\\t}\\n\\t\\n\\t.performance-chart {\\n\\t\\twidth: 100%;\\n\\t\\theight: 100%;\\n\\t}\\n\\t\\n\\t/* Allocation Section */\\n\\t.allocation-section {\\n\\t\\tdisplay: grid;\\n\\t\\tgrid-template-columns: 1fr 1fr;\\n\\t\\tgap: 2rem;\\n\\t\\tmargin-bottom: 2rem;\\n\\t}\\n\\t\\n\\t.donut-chart {\\n\\t\\twidth: 200px;\\n\\t\\theight: 200px;\\n\\t\\tmargin: 0 auto 1.5rem;\\n\\t}\\n\\t\\n\\t.donut {\\n\\t\\twidth: 100%;\\n\\t\\theight: 100%;\\n\\t}\\n\\t\\n\\t.donut-center {\\n\\t\\tfont-size: 24px;\\n\\t\\tfont-weight: 600;\\n\\t\\tfill: #1a1a1a;\\n\\t}\\n\\t\\n\\t.donut-center tspan {\\n\\t\\tfill: #6b7280;\\n\\t\\tfont-weight: 400;\\n\\t}\\n\\t\\n\\t.allocation-legend {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 0.75rem;\\n\\t}\\n\\t\\n\\t.legend-item {\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tgap: 0.75rem;\\n\\t}\\n\\t\\n\\t.legend-color {\\n\\t\\twidth: 16px;\\n\\t\\theight: 16px;\\n\\t\\tborder-radius: 4px;\\n\\t}\\n\\t\\n\\t.legend-label {\\n\\t\\tflex: 1;\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tcolor: #4b5563;\\n\\t\\ttext-transform: capitalize;\\n\\t}\\n\\t\\n\\t.legend-value {\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #1a1a1a;\\n\\t}\\n\\t\\n\\t/* Top Performers */\\n\\t.performers-list {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 1rem;\\n\\t}\\n\\t\\n\\t.performer-item {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t\\tpadding: 0.75rem;\\n\\t\\tbackground: #f9fafb;\\n\\t\\tborder-radius: 6px;\\n\\t}\\n\\t\\n\\t.performer-info {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 0.25rem;\\n\\t}\\n\\t\\n\\t.performer-symbol {\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #1a1a1a;\\n\\t}\\n\\t\\n\\t.performer-class {\\n\\t\\tfont-size: 0.75rem;\\n\\t\\tcolor: #6b7280;\\n\\t\\ttext-transform: capitalize;\\n\\t}\\n\\t\\n\\t.performer-pnl {\\n\\t\\tfont-size: 1.125rem;\\n\\t\\tfont-weight: 600;\\n\\t}\\n\\t\\n\\t/* Positions Section */\\n\\t.positions-section {\\n\\t\\tmargin-top: 2rem;\\n\\t}\\n\\t\\n\\t.positions-section h2 {\\n\\t\\tfont-size: 1.25rem;\\n\\t\\tmargin-bottom: 1rem;\\n\\t\\tcolor: #1a1a1a;\\n\\t}\\n\\t\\n\\t/* Desktop Table */\\n\\t.positions-table {\\n\\t\\toverflow-x: auto;\\n\\t}\\n\\t\\n\\ttable {\\n\\t\\twidth: 100%;\\n\\t\\tborder-collapse: collapse;\\n\\t}\\n\\t\\n\\tth, td {\\n\\t\\ttext-align: left;\\n\\t\\tpadding: 0.75rem;\\n\\t\\tborder-bottom: 1px solid #e5e7eb;\\n\\t}\\n\\t\\n\\tth {\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #6b7280;\\n\\t\\tfont-size: 0.875rem;\\n\\t\\ttext-transform: uppercase;\\n\\t}\\n\\t\\n\\ttr:hover {\\n\\t\\tbackground: #f9fafb;\\n\\t}\\n\\t\\n\\t.symbol-cell {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 0.125rem;\\n\\t}\\n\\t\\n\\t.symbol {\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #1a1a1a;\\n\\t}\\n\\t\\n\\t.asset-class {\\n\\t\\tfont-size: 0.75rem;\\n\\t\\tcolor: #6b7280;\\n\\t\\ttext-transform: capitalize;\\n\\t}\\n\\t\\n\\t.positive {\\n\\t\\tcolor: #10b981;\\n\\t\\tfont-weight: 500;\\n\\t}\\n\\t\\n\\t.negative {\\n\\t\\tcolor: #ef4444;\\n\\t\\tfont-weight: 500;\\n\\t}\\n\\t\\n\\t/* Mobile Cards */\\n\\t.position-card {\\n\\t\\tbackground: white;\\n\\t\\tborder-radius: 8px;\\n\\t\\tpadding: 1rem;\\n\\t\\tbox-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n\\t\\tmargin-bottom: 1rem;\\n\\t}\\n\\t\\n\\t.position-header {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t\\tmargin-bottom: 1rem;\\n\\t\\tpadding-bottom: 1rem;\\n\\t\\tborder-bottom: 1px solid #e5e7eb;\\n\\t}\\n\\t\\n\\t.position-symbol {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 0.125rem;\\n\\t}\\n\\t\\n\\t.position-pnl {\\n\\t\\ttext-align: right;\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 0.125rem;\\n\\t}\\n\\t\\n\\t.position-pnl .pnl-percent {\\n\\t\\tfont-size: 0.875rem;\\n\\t}\\n\\t\\n\\t.position-details {\\n\\t\\tdisplay: grid;\\n\\t\\tgap: 0.75rem;\\n\\t}\\n\\t\\n\\t.detail-row {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t\\tfont-size: 0.875rem;\\n\\t}\\n\\t\\n\\t.detail-row .label {\\n\\t\\tcolor: #6b7280;\\n\\t}\\n\\t\\n\\t.detail-row .value {\\n\\t\\tcolor: #1a1a1a;\\n\\t\\tfont-weight: 500;\\n\\t}\\n\\t\\n\\t/* Loading Skeleton */\\n\\t.portfolio-skeleton {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 2rem;\\n\\t}\\n\\t\\n\\t/* Error State */\\n\\t.error {\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tgap: 0.5rem;\\n\\t\\tbackground: #fee;\\n\\t\\tcolor: #dc2626;\\n\\t\\tpadding: 1rem;\\n\\t\\tborder-radius: 6px;\\n\\t\\tmargin-bottom: 1rem;\\n\\t}\\n\\t\\n\\t/* Visibility Classes */\\n\\t.desktop-only {\\n\\t\\tdisplay: block;\\n\\t}\\n\\t\\n\\t.mobile-only {\\n\\t\\tdisplay: none;\\n\\t}\\n\\t\\n\\t/* Mobile Styles */\\n\\t@media (max-width: 768px) {\\n\\t\\t.portfolio-page {\\n\\t\\t\\tpadding: 0 1rem 4rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.page-header {\\n\\t\\t\\tflex-direction: column;\\n\\t\\t\\talign-items: flex-start;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.page-header h1 {\\n\\t\\t\\tfont-size: 1.75rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.summary-cards {\\n\\t\\t\\tgrid-template-columns: repeat(2, 1fr);\\n\\t\\t\\tgap: 1rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.allocation-section {\\n\\t\\t\\tgrid-template-columns: 1fr;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.desktop-only {\\n\\t\\t\\tdisplay: none;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.mobile-only {\\n\\t\\t\\tdisplay: block;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.positions-cards {\\n\\t\\t\\tdisplay: flex;\\n\\t\\t\\tflex-direction: column;\\n\\t\\t\\tgap: 1rem;\\n\\t\\t}\\n\\t}\\n</style>"],"names":[],"mappings":"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"}'
};
function formatCurrency(value) {
  return new Intl.NumberFormat(
    "en-US",
    {
      style: "currency",
      currency: "USD",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }
  ).format(value);
}
function formatPercent(value) {
  return `${value >= 0 ? "+" : ""}${value.toFixed(2)}%`;
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let loading = true;
  let error = "";
  let selectedTimeframe = "30d";
  let selectedAssetClass = "all";
  let portfolio = {
    totalValue: 0,
    totalCost: 0,
    totalPnL: 0,
    totalPnLPercent: 0,
    positions: [],
    allocations: [],
    performance: []
  };
  const timeframes = [
    { value: "7d", label: "7 Days" },
    { value: "30d", label: "30 Days" },
    { value: "90d", label: "90 Days" },
    { value: "1y", label: "1 Year" },
    { value: "all", label: "All Time" }
  ];
  const assetClasses = [
    { value: "all", label: "All Assets" },
    { value: "stocks", label: "Stocks" },
    { value: "options", label: "Options" },
    { value: "futures", label: "Futures" },
    { value: "forex", label: "Forex" },
    { value: "crypto", label: "Crypto" }
  ];
  const allocationColors = {
    stocks: "#10b981",
    options: "#3b82f6",
    futures: "#f59e0b",
    forex: "#8b5cf6",
    crypto: "#ef4444",
    other: "#6b7280"
  };
  async function fetchPortfolio() {
    loading = true;
    error = "";
    try {
      const response = await api.get("/api/v1/portfolio", {
        params: {
          timeframe: selectedTimeframe,
          assetClass: selectedAssetClass === "all" ? void 0 : selectedAssetClass
        }
      });
      portfolio = response;
      if (!portfolio.allocations || portfolio.allocations.length === 0) {
        calculateAllocations();
      }
    } catch (err) {
      generateSampleData();
    } finally {
      loading = false;
    }
  }
  function calculateAllocations() {
    const allocationMap = /* @__PURE__ */ new Map();
    portfolio.positions.forEach((position) => {
      const assetClass = position.assetClass || "other";
      const currentValue = allocationMap.get(assetClass) || 0;
      allocationMap.set(assetClass, currentValue + position.value);
    });
    portfolio.allocations = Array.from(allocationMap.entries()).map(([assetClass, value]) => ({
      assetClass,
      value,
      percentage: value / portfolio.totalValue * 100,
      color: allocationColors[assetClass] || allocationColors.other
    }));
  }
  function generateSampleData() {
    const samplePositions = [
      {
        symbol: "AAPL",
        quantity: 100,
        avgPrice: 150,
        currentPrice: 175.5,
        value: 17550,
        cost: 15e3,
        pnl: 2550,
        pnlPercent: 17,
        allocation: 25.5,
        assetClass: "stocks",
        lastTradeDate: "2024-01-15"
      },
      {
        symbol: "TSLA",
        quantity: 50,
        avgPrice: 200,
        currentPrice: 185.25,
        value: 9262.5,
        cost: 1e4,
        pnl: -737.5,
        pnlPercent: -7.38,
        allocation: 13.5,
        assetClass: "stocks",
        lastTradeDate: "2024-01-10"
      },
      {
        symbol: "BTC-USD",
        quantity: 0.5,
        avgPrice: 4e4,
        currentPrice: 45e3,
        value: 22500,
        cost: 2e4,
        pnl: 2500,
        pnlPercent: 12.5,
        allocation: 32.7,
        assetClass: "crypto",
        lastTradeDate: "2024-01-08"
      },
      {
        symbol: "EUR/USD",
        quantity: 1e4,
        avgPrice: 1.08,
        currentPrice: 1.095,
        value: 10950,
        cost: 10800,
        pnl: 150,
        pnlPercent: 1.39,
        allocation: 15.9,
        assetClass: "forex",
        lastTradeDate: "2024-01-12"
      },
      {
        symbol: "SPY 450C",
        quantity: 10,
        avgPrice: 5.5,
        currentPrice: 8.25,
        value: 8250,
        cost: 5500,
        pnl: 2750,
        pnlPercent: 50,
        allocation: 12,
        assetClass: "options",
        lastTradeDate: "2024-01-14"
      }
    ];
    const totalValue = samplePositions.reduce((sum, pos) => sum + pos.value, 0);
    const totalCost = samplePositions.reduce((sum, pos) => sum + pos.cost, 0);
    const totalPnL = totalValue - totalCost;
    const totalPnLPercent = totalPnL / totalCost * 100;
    const performanceData = [];
    const days = 30;
    let currentValue = totalCost;
    for (let i = days; i >= 0; i--) {
      const date = /* @__PURE__ */ new Date();
      date.setDate(date.getDate() - i);
      const change = (Math.random() - 0.48) * 0.02 * currentValue;
      currentValue += change;
      performanceData.push({
        date: date.toISOString().split("T")[0],
        value: currentValue,
        pnl: currentValue - totalCost
      });
    }
    if (performanceData.length > 0) {
      performanceData[performanceData.length - 1].value = totalValue;
      performanceData[performanceData.length - 1].pnl = totalPnL;
    }
    portfolio = {
      totalValue,
      totalCost,
      totalPnL,
      totalPnLPercent,
      positions: samplePositions,
      allocations: [],
      performance: performanceData
    };
    calculateAllocations();
  }
  $$result.css.add(css);
  {
    {
      fetchPortfolio();
    }
  }
  return `${$$result.head += `<!-- HEAD_svelte-5tt791_START -->${$$result.title = `<title>Portfolio - TradeSense</title>`, ""}<!-- HEAD_svelte-5tt791_END -->`, ""} <div class="portfolio-page svelte-oetpw9"><header class="page-header svelte-oetpw9"><div data-svelte-h="svelte-16tniyb"><h1 class="svelte-oetpw9">Portfolio Overview</h1> <p class="svelte-oetpw9">Track your positions and overall performance</p></div> <div class="header-actions svelte-oetpw9"><button class="export-button svelte-oetpw9">${validate_component(Download, "Download").$$render($$result, { size: 18 }, {}, {})}
				Export</button></div></header> ${loading ? `<div class="portfolio-skeleton svelte-oetpw9"> <div class="summary-cards svelte-oetpw9">${each(Array(4), (_) => {
    return `${validate_component(LoadingSkeleton, "LoadingSkeleton").$$render($$result, { type: "stat" }, {}, {})}`;
  })}</div>  ${validate_component(LoadingSkeleton, "LoadingSkeleton").$$render($$result, { type: "chart", height: "400px" }, {}, {})}  ${validate_component(LoadingSkeleton, "LoadingSkeleton").$$render($$result, { type: "table", lines: 5 }, {}, {})}</div>` : `${error ? `<div class="error svelte-oetpw9">${validate_component(Circle_alert, "AlertCircle").$$render($$result, { size: 20 }, {}, {})} ${escape(error)}</div>` : ` <div class="filters svelte-oetpw9"><select class="filter-select svelte-oetpw9">${each(timeframes, (timeframe) => {
    return `<option${add_attribute("value", timeframe.value, 0)}>${escape(timeframe.label)}</option>`;
  })}</select> <select class="filter-select svelte-oetpw9">${each(assetClasses, (assetClass) => {
    return `<option${add_attribute("value", assetClass.value, 0)}>${escape(assetClass.label)}</option>`;
  })}</select></div>  <div class="summary-cards svelte-oetpw9"><div class="summary-card svelte-oetpw9"><div class="card-label svelte-oetpw9" data-svelte-h="svelte-1x3c2k1">Total Value</div> <div class="card-value svelte-oetpw9">${escape(formatCurrency(portfolio.totalValue))}</div> <div class="card-change svelte-oetpw9">${validate_component(Dollar_sign, "DollarSign").$$render($$result, { size: 16 }, {}, {})}
					Portfolio Value</div></div> <div class="summary-card svelte-oetpw9"><div class="card-label svelte-oetpw9" data-svelte-h="svelte-113d7h0">Total P&amp;L</div> <div class="${[
    "card-value svelte-oetpw9",
    (portfolio.totalPnL >= 0 ? "positive" : "") + " " + (portfolio.totalPnL < 0 ? "negative" : "")
  ].join(" ").trim()}">${escape(formatCurrency(portfolio.totalPnL))}</div> <div class="${[
    "card-change svelte-oetpw9",
    (portfolio.totalPnL >= 0 ? "positive" : "") + " " + (portfolio.totalPnL < 0 ? "negative" : "")
  ].join(" ").trim()}">${portfolio.totalPnL >= 0 ? `${validate_component(Trending_up, "TrendingUp").$$render($$result, { size: 16 }, {}, {})}` : `${validate_component(Trending_down, "TrendingDown").$$render($$result, { size: 16 }, {}, {})}`} ${escape(formatPercent(portfolio.totalPnLPercent))}</div></div> <div class="summary-card svelte-oetpw9"><div class="card-label svelte-oetpw9" data-svelte-h="svelte-1ps03pw">Positions</div> <div class="card-value svelte-oetpw9">${escape(portfolio.positions.length)}</div> <div class="card-change svelte-oetpw9">${validate_component(Calendar, "Calendar").$$render($$result, { size: 16 }, {}, {})}
					Active Positions</div></div> <div class="summary-card svelte-oetpw9"><div class="card-label svelte-oetpw9" data-svelte-h="svelte-hgyrt2">Win Rate</div> <div class="card-value svelte-oetpw9">${escape((portfolio.positions.filter((p) => p.pnl > 0).length / portfolio.positions.length * 100).toFixed(0))}%</div> <div class="card-change svelte-oetpw9">${validate_component(Percent, "Percent").$$render($$result, { size: 16 }, {}, {})}
					Profitable Positions</div></div></div>  <div class="portfolio-chart card svelte-oetpw9"><h2 class="svelte-oetpw9" data-svelte-h="svelte-179si4c">Portfolio Performance</h2> <div class="chart-container svelte-oetpw9"> ${portfolio.performance.length > 0 ? (() => {
    let maxValue = Math.max(...portfolio.performance.map((p) => p.value)), minValue = Math.min(...portfolio.performance.map((p) => p.value)), range = maxValue - minValue || 1, points = portfolio.performance.map((p, i) => {
      const x = i / (portfolio.performance.length - 1) * 780 + 10;
      const y = 290 - (p.value - minValue) / range * 280;
      return `${x},${y}`;
    }).join(" ");
    return `    <svg viewBox="0 0 800 300" class="performance-chart svelte-oetpw9">${each(Array(5), (_, i) => {
      return `<line x1="10" x2="790"${add_attribute("y1", 10 + i * 70, 0)}${add_attribute("y2", 10 + i * 70, 0)} stroke="#e5e7eb" stroke-width="1"></line>`;
    })}<polygon${add_attribute("points", `10,290 ${points} 790,290`, 0)} fill="url(#gradient)" opacity="0.1"></polygon><polyline${add_attribute("points", points, 0)} fill="none"${add_attribute("stroke", portfolio.totalPnL >= 0 ? "#10b981" : "#ef4444", 0)} stroke-width="2"></polyline><defs><linearGradient id="gradient" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" style="${"stop-color:" + escape(portfolio.totalPnL >= 0 ? "#10b981" : "#ef4444", true)}"></stop><stop offset="100%" style="${"stop-color:" + escape(portfolio.totalPnL >= 0 ? "#10b981" : "#ef4444", true) + ";stop-opacity:0"}"></stop></linearGradient></defs></svg>`;
  })() : ``}</div></div>  <div class="allocation-section svelte-oetpw9"><div class="allocation-chart card svelte-oetpw9"><h2 class="svelte-oetpw9" data-svelte-h="svelte-1b45yuw">Asset Allocation</h2> <div class="donut-chart svelte-oetpw9"><svg viewBox="0 0 200 200" class="donut svelte-oetpw9">${each(portfolio.allocations, (allocation, i) => {
    let radius = 80, circumference = 2 * Math.PI * radius, offset = portfolio.allocations.slice(0, i).reduce((sum, a) => sum + a.percentage, 0) / 100 * circumference, length = allocation.percentage / 100 * circumference;
    return `    <circle cx="100" cy="100"${add_attribute("r", radius, 0)} fill="none"${add_attribute("stroke", allocation.color, 0)} stroke-width="40"${add_attribute("stroke-dasharray", `${length} ${circumference - length}`, 0)}${add_attribute("stroke-dashoffset", -offset, 0)} transform="rotate(-90 100 100)"></circle>`;
  })}<text x="100" y="100" text-anchor="middle" dominant-baseline="middle" class="donut-center svelte-oetpw9">${escape(portfolio.allocations.length)}<tspan x="100" dy="20" font-size="12" class="svelte-oetpw9">Asset Classes</tspan></text></svg></div> <div class="allocation-legend svelte-oetpw9">${each(portfolio.allocations, (allocation) => {
    return `<div class="legend-item svelte-oetpw9"><div class="legend-color svelte-oetpw9" style="${"background: " + escape(allocation.color, true)}"></div> <span class="legend-label svelte-oetpw9">${escape(allocation.assetClass)}</span> <span class="legend-value svelte-oetpw9">${escape(allocation.percentage.toFixed(1))}%</span> </div>`;
  })}</div></div>  <div class="top-performers card svelte-oetpw9"><h2 class="svelte-oetpw9" data-svelte-h="svelte-n5tpf0">Top Performers</h2> <div class="performers-list svelte-oetpw9">${each(portfolio.positions.sort((a, b) => b.pnlPercent - a.pnlPercent).slice(0, 5), (position) => {
    return `<div class="performer-item svelte-oetpw9"><div class="performer-info svelte-oetpw9"><span class="performer-symbol svelte-oetpw9">${escape(position.symbol)}</span> <span class="performer-class svelte-oetpw9">${escape(position.assetClass)}</span></div> <div class="${[
      "performer-pnl svelte-oetpw9",
      (position.pnl > 0 ? "positive" : "") + " " + (position.pnl < 0 ? "negative" : "")
    ].join(" ").trim()}">${escape(formatPercent(position.pnlPercent))}</div> </div>`;
  })}</div></div></div>  <div class="positions-section svelte-oetpw9"><h2 class="svelte-oetpw9" data-svelte-h="svelte-1vwz1it">Current Positions</h2>  <div class="positions-table card desktop-only svelte-oetpw9"><table class="svelte-oetpw9"><thead data-svelte-h="svelte-f60kt4"><tr class="svelte-oetpw9"><th class="svelte-oetpw9">Symbol</th> <th class="svelte-oetpw9">Quantity</th> <th class="svelte-oetpw9">Avg Price</th> <th class="svelte-oetpw9">Current Price</th> <th class="svelte-oetpw9">Value</th> <th class="svelte-oetpw9">P&amp;L</th> <th class="svelte-oetpw9">P&amp;L %</th> <th class="svelte-oetpw9">Allocation</th></tr></thead> <tbody>${each(portfolio.positions, (position) => {
    return `<tr class="svelte-oetpw9"><td class="svelte-oetpw9"><div class="symbol-cell svelte-oetpw9"><span class="symbol svelte-oetpw9">${escape(position.symbol)}</span> <span class="asset-class svelte-oetpw9">${escape(position.assetClass)}</span> </div></td> <td class="svelte-oetpw9">${escape(position.quantity)}</td> <td class="svelte-oetpw9">$${escape(position.avgPrice.toFixed(2))}</td> <td class="svelte-oetpw9">$${escape(position.currentPrice.toFixed(2))}</td> <td class="svelte-oetpw9">${escape(formatCurrency(position.value))}</td> <td class="${[
      "svelte-oetpw9",
      (position.pnl > 0 ? "positive" : "") + " " + (position.pnl < 0 ? "negative" : "")
    ].join(" ").trim()}">${escape(formatCurrency(position.pnl))}</td> <td class="${[
      "svelte-oetpw9",
      (position.pnl > 0 ? "positive" : "") + " " + (position.pnl < 0 ? "negative" : "")
    ].join(" ").trim()}">${escape(formatPercent(position.pnlPercent))}</td> <td class="svelte-oetpw9">${escape(position.allocation.toFixed(1))}%</td> </tr>`;
  })}</tbody></table></div>  <div class="positions-cards mobile-only svelte-oetpw9">${each(portfolio.positions, (position) => {
    return `<div class="position-card svelte-oetpw9"><div class="position-header svelte-oetpw9"><div class="position-symbol svelte-oetpw9"><span class="symbol svelte-oetpw9">${escape(position.symbol)}</span> <span class="asset-class svelte-oetpw9">${escape(position.assetClass)}</span></div> <div class="${[
      "position-pnl svelte-oetpw9",
      (position.pnl > 0 ? "positive" : "") + " " + (position.pnl < 0 ? "negative" : "")
    ].join(" ").trim()}">${escape(formatCurrency(position.pnl))} <span class="pnl-percent svelte-oetpw9">${escape(formatPercent(position.pnlPercent))}</span> </div></div> <div class="position-details svelte-oetpw9"><div class="detail-row svelte-oetpw9"><span class="label svelte-oetpw9" data-svelte-h="svelte-1cizdaa">Quantity</span> <span class="value svelte-oetpw9">${escape(position.quantity)}</span></div> <div class="detail-row svelte-oetpw9"><span class="label svelte-oetpw9" data-svelte-h="svelte-1vagejo">Avg Price</span> <span class="value svelte-oetpw9">$${escape(position.avgPrice.toFixed(2))}</span></div> <div class="detail-row svelte-oetpw9"><span class="label svelte-oetpw9" data-svelte-h="svelte-1s4prwb">Current Price</span> <span class="value svelte-oetpw9">$${escape(position.currentPrice.toFixed(2))}</span></div> <div class="detail-row svelte-oetpw9"><span class="label svelte-oetpw9" data-svelte-h="svelte-yrhuwg">Value</span> <span class="value svelte-oetpw9">${escape(formatCurrency(position.value))}</span></div> <div class="detail-row svelte-oetpw9"><span class="label svelte-oetpw9" data-svelte-h="svelte-vlh9v1">Allocation</span> <span class="value svelte-oetpw9">${escape(position.allocation.toFixed(1))}%</span> </div></div> </div>`;
  })}</div></div>`}`} </div>`;
});
export {
  Page as default
};
