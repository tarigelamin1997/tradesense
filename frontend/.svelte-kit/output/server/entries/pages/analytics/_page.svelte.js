import { c as create_ssr_component } from "../../../chunks/ssr.js";
import "../../../chunks/client.js";
import "../../../chunks/auth.js";
import "../../../chunks/trades.js";
import "../../../chunks/client2.js";
import "chartjs-adapter-date-fns";
/* empty css                                                        */
const css = {
  code: ".analytics-page.svelte-74nk8c.svelte-74nk8c{max-width:1400px;margin:0 auto;padding-bottom:4rem}.page-header.svelte-74nk8c.svelte-74nk8c{margin-bottom:2rem}.page-header.svelte-74nk8c h1.svelte-74nk8c{font-size:2rem;margin-bottom:0.5rem}.page-header.svelte-74nk8c p.svelte-74nk8c{color:#666}.loading.svelte-74nk8c.svelte-74nk8c{text-align:center;padding:4rem;color:#666}.stats-grid.svelte-74nk8c.svelte-74nk8c{display:grid;grid-template-columns:repeat(auto-fit, minmax(250px, 1fr));gap:1rem;margin-bottom:2rem}.stat-card.svelte-74nk8c.svelte-74nk8c{background:white;border:1px solid #e0e0e0;border-radius:8px;padding:1.5rem}.stat-card.svelte-74nk8c h3.svelte-74nk8c{font-size:0.875rem;color:#666;margin-bottom:0.5rem;font-weight:500}.stat-value.svelte-74nk8c.svelte-74nk8c{font-size:1.5rem;font-weight:600;color:#333}.stat-value.positive.svelte-74nk8c.svelte-74nk8c{color:#10b981}.stat-value.negative.svelte-74nk8c.svelte-74nk8c{color:#ef4444}.tabs.svelte-74nk8c.svelte-74nk8c{display:flex;gap:1rem;margin-bottom:2rem;border-bottom:1px solid #e0e0e0;overflow-x:auto}.tab.svelte-74nk8c.svelte-74nk8c{padding:0.75rem 1.5rem;background:none;border:none;color:#666;font-weight:500;cursor:pointer;position:relative;white-space:nowrap;transition:color 0.2s}.tab.svelte-74nk8c.svelte-74nk8c:hover{color:#333}.tab.active.svelte-74nk8c.svelte-74nk8c{color:#10b981}.tab.active.svelte-74nk8c.svelte-74nk8c::after{content:'';position:absolute;bottom:-1px;left:0;right:0;height:2px;background:#10b981}.charts-grid.svelte-74nk8c.svelte-74nk8c{display:grid;grid-template-columns:repeat(auto-fit, minmax(400px, 1fr));gap:1.5rem}.chart-container.svelte-74nk8c.svelte-74nk8c{background:white;border-radius:8px;box-shadow:0 1px 3px rgba(0, 0, 0, 0.1)}.chart-container.full-width.svelte-74nk8c.svelte-74nk8c{grid-column:1 / -1}.performance-metrics.svelte-74nk8c.svelte-74nk8c{display:flex;flex-direction:column;gap:2rem}.metrics-grid.svelte-74nk8c.svelte-74nk8c{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1rem;margin-bottom:1rem}.metric.svelte-74nk8c.svelte-74nk8c{background:white;border:1px solid #e0e0e0;border-radius:8px;padding:1.5rem;text-align:center}.metric.svelte-74nk8c h4.svelte-74nk8c{font-size:0.875rem;color:#666;margin-bottom:0.5rem;font-weight:500}.metric.svelte-74nk8c p.svelte-74nk8c{font-size:1.25rem;font-weight:600;color:#333}.metric.svelte-74nk8c p.positive.svelte-74nk8c{color:#10b981}.metric.svelte-74nk8c p.negative.svelte-74nk8c{color:#ef4444}.tab.disabled.svelte-74nk8c.svelte-74nk8c{opacity:0.5;cursor:not-allowed}.tab.disabled.svelte-74nk8c.svelte-74nk8c:hover{color:#666}.insights-section.svelte-74nk8c.svelte-74nk8c{display:flex;flex-direction:column;gap:2rem}.streak-analysis.svelte-74nk8c.svelte-74nk8c{background:white;border-radius:8px;padding:1.5rem;box-shadow:0 1px 3px rgba(0, 0, 0, 0.1)}.streak-analysis.svelte-74nk8c h3.svelte-74nk8c{font-size:1.25rem;margin-bottom:1rem;color:#333}.streak-stats.svelte-74nk8c.svelte-74nk8c{display:grid;grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));gap:1.5rem}.streak-stat.svelte-74nk8c.svelte-74nk8c{display:flex;flex-direction:column;gap:0.5rem}.streak-stat.svelte-74nk8c .label.svelte-74nk8c{font-size:0.875rem;color:#666;font-weight:500}.streak-stat.svelte-74nk8c .value.svelte-74nk8c{font-size:1.5rem;font-weight:600;color:#333}.streak-stat.svelte-74nk8c .value.win.svelte-74nk8c{color:#10b981}.streak-stat.svelte-74nk8c .value.loss.svelte-74nk8c{color:#ef4444}.streak-stat.svelte-74nk8c .value.neutral.svelte-74nk8c{color:#6b7280}@media(max-width: 768px){.analytics-page.svelte-74nk8c.svelte-74nk8c{padding:0 1rem 4rem}.stats-grid.svelte-74nk8c.svelte-74nk8c{grid-template-columns:1fr 1fr}.charts-grid.svelte-74nk8c.svelte-74nk8c{grid-template-columns:1fr}.tabs.svelte-74nk8c.svelte-74nk8c{-webkit-overflow-scrolling:touch;padding-bottom:0.5rem}.tab.svelte-74nk8c.svelte-74nk8c{padding:0.5rem 1rem;font-size:0.875rem}.metrics-grid.svelte-74nk8c.svelte-74nk8c{grid-template-columns:1fr 1fr}}@media(max-width: 640px){.page-header.svelte-74nk8c h1.svelte-74nk8c{font-size:1.5rem}.stats-grid.svelte-74nk8c.svelte-74nk8c{grid-template-columns:1fr;gap:0.75rem}.stat-card.svelte-74nk8c.svelte-74nk8c{padding:1rem}.stat-value.svelte-74nk8c.svelte-74nk8c{font-size:1.25rem}.tabs.svelte-74nk8c.svelte-74nk8c{gap:0.5rem}.tab.svelte-74nk8c.svelte-74nk8c{padding:0.5rem 0.75rem;font-size:0.75rem}.metrics-grid.svelte-74nk8c.svelte-74nk8c{grid-template-columns:1fr}.metric.svelte-74nk8c.svelte-74nk8c{padding:1rem}.metric.svelte-74nk8c p.svelte-74nk8c{font-size:1rem}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nimport { goto } from \\"$app/navigation\\";\\nimport { isAuthenticated } from \\"$lib/api/auth\\";\\nimport { tradeStore } from \\"$lib/stores/trades\\";\\nimport { tradesApi } from \\"$lib/api/trades\\";\\nimport { get } from \\"svelte/store\\";\\nimport { analyticsAdvancedApi } from \\"$lib/api/analyticsAdvanced\\";\\nimport CumulativePnLChart from \\"$lib/components/charts/CumulativePnLChart.svelte\\";\\nimport WinRateChart from \\"$lib/components/charts/WinRateChart.svelte\\";\\nimport ProfitDistributionChart from \\"$lib/components/charts/ProfitDistributionChart.svelte\\";\\nimport DailyPnLChart from \\"$lib/components/charts/DailyPnLChart.svelte\\";\\nimport StrategyPerformanceChart from \\"$lib/components/charts/StrategyPerformanceChart.svelte\\";\\nimport FeatureGate from \\"$lib/components/FeatureGate.svelte\\";\\nimport TradeInsights from \\"$lib/components/TradeInsights.svelte\\";\\nimport AIInsightsPanel from \\"$lib/components/AIInsightsPanel.svelte\\";\\nimport { billingApi } from \\"$lib/api/billing\\";\\nlet loading = true;\\nlet trades = [];\\nlet activeTab = \\"overview\\";\\nlet userPlan = \\"free\\";\\nlet performanceSummary = null;\\nlet streakAnalysis = null;\\nlet heatmapData = null;\\nlet stats = {\\n  totalTrades: 0,\\n  totalPnL: 0,\\n  winRate: 0,\\n  avgWin: 0,\\n  avgLoss: 0,\\n  profitFactor: 0,\\n  sharpeRatio: 0,\\n  maxDrawdown: 0,\\n  bestTrade: 0,\\n  worstTrade: 0,\\n  avgTradeDuration: \\"\\",\\n  consecutiveWins: 0,\\n  consecutiveLosses: 0\\n};\\nasync function fetchTrades() {\\n  try {\\n    loading = true;\\n    if (!get(isAuthenticated)) {\\n      goto(\\"/login\\");\\n      return;\\n    }\\n    const [apiTrades, subscription, perfSummary, streaks, heatmap] = await Promise.all([\\n      tradesApi.getTrades(),\\n      billingApi.getSubscription(),\\n      analyticsAdvancedApi.getPerformanceSummary().catch(() => null),\\n      analyticsAdvancedApi.getStreakAnalysis().catch(() => null),\\n      analyticsAdvancedApi.getHeatmapData().catch(() => null)\\n    ]);\\n    if (subscription) {\\n      if (subscription.plan_id.includes(\\"enterprise\\")) userPlan = \\"enterprise\\";\\n      else if (subscription.plan_id.includes(\\"pro\\")) userPlan = \\"pro\\";\\n      else userPlan = \\"free\\";\\n    }\\n    trades = apiTrades.map((t) => ({\\n      id: t.id,\\n      symbol: t.symbol,\\n      side: t.side,\\n      entryPrice: t.entry_price,\\n      exitPrice: t.exit_price,\\n      quantity: t.quantity,\\n      pnl: t.pnl || 0,\\n      entryDate: t.entry_date,\\n      exitDate: t.exit_date,\\n      strategy: t.strategy,\\n      notes: t.notes\\n    }));\\n    tradeStore.setTrades(trades);\\n    performanceSummary = perfSummary;\\n    streakAnalysis = streaks;\\n    heatmapData = heatmap;\\n    if (performanceSummary) {\\n      updateStatsFromBackend();\\n    } else {\\n      calculateStats();\\n    }\\n  } catch (err) {\\n    console.error(\\"Failed to fetch trades:\\", err);\\n    if (err.status === 401) {\\n      goto(\\"/login\\");\\n    } else {\\n      useSampleData();\\n    }\\n  } finally {\\n    loading = false;\\n  }\\n}\\nfunction updateStatsFromBackend() {\\n  if (!performanceSummary) return;\\n  stats = {\\n    totalTrades: performanceSummary.total_trades,\\n    totalPnL: performanceSummary.total_pnl,\\n    winRate: performanceSummary.win_rate,\\n    avgWin: performanceSummary.avg_win,\\n    avgLoss: performanceSummary.avg_loss,\\n    profitFactor: performanceSummary.profit_factor,\\n    sharpeRatio: performanceSummary.sharpe_ratio,\\n    maxDrawdown: performanceSummary.max_drawdown,\\n    bestTrade: performanceSummary.best_trade,\\n    worstTrade: performanceSummary.worst_trade,\\n    avgTradeDuration: performanceSummary.avg_trade_duration,\\n    consecutiveWins: streakAnalysis?.max_win_streak || 0,\\n    consecutiveLosses: streakAnalysis?.max_loss_streak || 0\\n  };\\n}\\nfunction calculateStats() {\\n  if (trades.length === 0) {\\n    stats = {\\n      totalTrades: 0,\\n      totalPnL: 0,\\n      winRate: 0,\\n      avgWin: 0,\\n      avgLoss: 0,\\n      profitFactor: 0,\\n      sharpeRatio: 0,\\n      maxDrawdown: 0,\\n      bestTrade: 0,\\n      worstTrade: 0,\\n      avgTradeDuration: \\"0h 0m\\",\\n      consecutiveWins: 0,\\n      consecutiveLosses: 0\\n    };\\n    return;\\n  }\\n  const wins = trades.filter((t) => t.pnl > 0);\\n  const losses = trades.filter((t) => t.pnl < 0);\\n  stats.totalTrades = trades.length;\\n  stats.totalPnL = trades.reduce((sum, t) => sum + t.pnl, 0);\\n  stats.winRate = wins.length / trades.length * 100;\\n  stats.avgWin = wins.length > 0 ? wins.reduce((sum, t) => sum + t.pnl, 0) / wins.length : 0;\\n  stats.avgLoss = losses.length > 0 ? Math.abs(losses.reduce((sum, t) => sum + t.pnl, 0) / losses.length) : 0;\\n  stats.profitFactor = stats.avgLoss > 0 ? stats.avgWin / stats.avgLoss : 0;\\n  const pnlValues = trades.map((t) => t.pnl);\\n  stats.bestTrade = Math.max(...pnlValues);\\n  stats.worstTrade = Math.min(...pnlValues);\\n  const durations = trades.filter((t) => t.entryDate && t.exitDate).map((t) => new Date(t.exitDate).getTime() - new Date(t.entryDate).getTime());\\n  if (durations.length > 0) {\\n    const avgDuration = durations.reduce((sum, d) => sum + d, 0) / durations.length;\\n    const hours = Math.floor(avgDuration / (1e3 * 60 * 60));\\n    const minutes = Math.floor(avgDuration % (1e3 * 60 * 60) / (1e3 * 60));\\n    stats.avgTradeDuration = \`\${hours}h \${minutes}m\`;\\n  }\\n  let currentWinStreak = 0;\\n  let currentLossStreak = 0;\\n  let maxWinStreak = 0;\\n  let maxLossStreak = 0;\\n  const sortedTrades = [...trades].filter((t) => t.exitDate).sort((a, b) => new Date(a.exitDate).getTime() - new Date(b.exitDate).getTime());\\n  sortedTrades.forEach((trade) => {\\n    if (trade.pnl > 0) {\\n      currentWinStreak++;\\n      currentLossStreak = 0;\\n      maxWinStreak = Math.max(maxWinStreak, currentWinStreak);\\n    } else if (trade.pnl < 0) {\\n      currentLossStreak++;\\n      currentWinStreak = 0;\\n      maxLossStreak = Math.max(maxLossStreak, currentLossStreak);\\n    }\\n  });\\n  stats.consecutiveWins = maxWinStreak;\\n  stats.consecutiveLosses = maxLossStreak;\\n  let peak = 0;\\n  let maxDrawdown = 0;\\n  let cumulative = 0;\\n  sortedTrades.forEach((trade) => {\\n    cumulative += trade.pnl;\\n    if (cumulative > peak) {\\n      peak = cumulative;\\n    }\\n    const drawdown = peak - cumulative;\\n    if (drawdown > maxDrawdown) {\\n      maxDrawdown = drawdown;\\n    }\\n  });\\n  stats.maxDrawdown = maxDrawdown;\\n  if (trades.length > 1) {\\n    const returns = trades.map((t) => t.pnl);\\n    const avgReturn = stats.totalPnL / trades.length;\\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / trades.length;\\n    const stdDev = Math.sqrt(variance);\\n    stats.sharpeRatio = stdDev > 0 ? avgReturn / stdDev * Math.sqrt(252) : 0;\\n  }\\n}\\nfunction useSampleData() {\\n  const sampleTrades = [\\n    {\\n      id: 1,\\n      symbol: \\"AAPL\\",\\n      side: \\"long\\",\\n      entryPrice: 185.5,\\n      exitPrice: 187.25,\\n      quantity: 100,\\n      pnl: 175,\\n      entryDate: \\"2024-01-14 09:30\\",\\n      exitDate: \\"2024-01-14 14:45\\",\\n      strategy: \\"Momentum\\",\\n      notes: \\"Strong breakout pattern\\"\\n    },\\n    {\\n      id: 2,\\n      symbol: \\"TSLA\\",\\n      side: \\"short\\",\\n      entryPrice: 242.8,\\n      exitPrice: 244.5,\\n      quantity: 50,\\n      pnl: -85,\\n      entryDate: \\"2024-01-14 10:15\\",\\n      exitDate: \\"2024-01-14 15:30\\",\\n      strategy: \\"Mean Reversion\\",\\n      notes: \\"Stop loss hit\\"\\n    },\\n    {\\n      id: 3,\\n      symbol: \\"NVDA\\",\\n      side: \\"long\\",\\n      entryPrice: 495,\\n      exitPrice: 498.5,\\n      quantity: 50,\\n      pnl: 175,\\n      entryDate: \\"2024-01-13 11:00\\",\\n      exitDate: \\"2024-01-13 15:00\\",\\n      strategy: \\"Breakout\\",\\n      notes: \\"Earnings play\\"\\n    },\\n    {\\n      id: 4,\\n      symbol: \\"SPY\\",\\n      side: \\"long\\",\\n      entryPrice: 475.25,\\n      exitPrice: 476.8,\\n      quantity: 200,\\n      pnl: 310,\\n      entryDate: \\"2024-01-12 09:45\\",\\n      exitDate: \\"2024-01-12 14:30\\",\\n      strategy: \\"Scalping\\",\\n      notes: \\"Quick intraday trade\\"\\n    },\\n    {\\n      id: 5,\\n      symbol: \\"META\\",\\n      side: \\"short\\",\\n      entryPrice: 358.9,\\n      exitPrice: 357.2,\\n      quantity: 75,\\n      pnl: 127.5,\\n      entryDate: \\"2024-01-12 10:30\\",\\n      exitDate: \\"2024-01-12 13:15\\",\\n      strategy: \\"News Trading\\",\\n      notes: \\"Negative news reaction\\"\\n    }\\n  ];\\n  trades = sampleTrades;\\n  tradeStore.setTrades(sampleTrades);\\n  calculateStats();\\n}\\nfunction formatCurrency(value) {\\n  return new Intl.NumberFormat(\\"en-US\\", {\\n    style: \\"currency\\",\\n    currency: \\"USD\\"\\n  }).format(value);\\n}\\nonMount(() => {\\n  fetchTrades();\\n});\\n<\/script>\\n\\n<svelte:head>\\n\\t<title>Analytics - TradeSense</title>\\n</svelte:head>\\n\\n<div class=\\"analytics-page\\">\\n\\t<header class=\\"page-header\\">\\n\\t\\t<h1>Trading Analytics</h1>\\n\\t\\t<p>Comprehensive analysis of your trading performance</p>\\n\\t</header>\\n\\t\\n\\t{#if loading}\\n\\t\\t<div class=\\"loading\\">Loading analytics...</div>\\n\\t{:else}\\n\\t\\t<!-- Stats Overview -->\\n\\t\\t<div class=\\"stats-grid\\">\\n\\t\\t\\t<div class=\\"stat-card\\">\\n\\t\\t\\t\\t<h3>Total P&L</h3>\\n\\t\\t\\t\\t<p class=\\"stat-value\\" class:positive={stats.totalPnL > 0} class:negative={stats.totalPnL < 0}>\\n\\t\\t\\t\\t\\t{formatCurrency(stats.totalPnL)}\\n\\t\\t\\t\\t</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"stat-card\\">\\n\\t\\t\\t\\t<h3>Win Rate</h3>\\n\\t\\t\\t\\t<p class=\\"stat-value\\">{stats.winRate.toFixed(1)}%</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"stat-card\\">\\n\\t\\t\\t\\t<h3>Profit Factor</h3>\\n\\t\\t\\t\\t<p class=\\"stat-value\\">{stats.profitFactor.toFixed(2)}</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"stat-card\\">\\n\\t\\t\\t\\t<h3>Total Trades</h3>\\n\\t\\t\\t\\t<p class=\\"stat-value\\">{stats.totalTrades}</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"stat-card\\">\\n\\t\\t\\t\\t<h3>Average Win</h3>\\n\\t\\t\\t\\t<p class=\\"stat-value positive\\">{formatCurrency(stats.avgWin)}</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"stat-card\\">\\n\\t\\t\\t\\t<h3>Average Loss</h3>\\n\\t\\t\\t\\t<p class=\\"stat-value negative\\">{formatCurrency(-stats.avgLoss)}</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"stat-card\\">\\n\\t\\t\\t\\t<h3>Max Drawdown</h3>\\n\\t\\t\\t\\t<p class=\\"stat-value negative\\">{formatCurrency(-stats.maxDrawdown)}</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\"stat-card\\">\\n\\t\\t\\t\\t<h3>Sharpe Ratio</h3>\\n\\t\\t\\t\\t<p class=\\"stat-value\\">{stats.sharpeRatio.toFixed(2)}</p>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t\\n\\t\\t<!-- Tabs -->\\n\\t\\t<div class=\\"tabs\\">\\n\\t\\t\\t<button \\n\\t\\t\\t\\tclass=\\"tab\\" \\n\\t\\t\\t\\tclass:active={activeTab === 'overview'}\\n\\t\\t\\t\\ton:click={() => activeTab = 'overview'}\\n\\t\\t\\t>\\n\\t\\t\\t\\tOverview\\n\\t\\t\\t</button>\\n\\t\\t\\t<FeatureGate feature=\\"advanced-analytics\\" {userPlan} showLock={false}>\\n\\t\\t\\t\\t<button \\n\\t\\t\\t\\t\\tclass=\\"tab\\" \\n\\t\\t\\t\\t\\tclass:active={activeTab === 'performance'}\\n\\t\\t\\t\\t\\ton:click={() => activeTab = 'performance'}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tPerformance\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t<button \\n\\t\\t\\t\\t\\tclass=\\"tab\\" \\n\\t\\t\\t\\t\\tclass:active={activeTab === 'distribution'}\\n\\t\\t\\t\\t\\ton:click={() => activeTab = 'distribution'}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tDistribution\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t<button \\n\\t\\t\\t\\t\\tclass=\\"tab\\" \\n\\t\\t\\t\\t\\tclass:active={activeTab === 'strategies'}\\n\\t\\t\\t\\t\\ton:click={() => activeTab = 'strategies'}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tStrategies\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t<button \\n\\t\\t\\t\\t\\tclass=\\"tab\\" \\n\\t\\t\\t\\t\\tclass:active={activeTab === 'insights'}\\n\\t\\t\\t\\t\\ton:click={() => activeTab = 'insights'}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tAI Insights\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t<svelte:fragment slot=\\"fallback\\">\\n\\t\\t\\t\\t\\t<button class=\\"tab disabled\\" disabled>\\n\\t\\t\\t\\t\\t\\tPerformance 🔒\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t<button class=\\"tab disabled\\" disabled>\\n\\t\\t\\t\\t\\t\\tDistribution 🔒\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t<button class=\\"tab disabled\\" disabled>\\n\\t\\t\\t\\t\\t\\tStrategies 🔒\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t<button class=\\"tab disabled\\" disabled>\\n\\t\\t\\t\\t\\t\\tAI Insights 🔒\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</svelte:fragment>\\n\\t\\t\\t</FeatureGate>\\n\\t\\t</div>\\n\\t\\t\\n\\t\\t<!-- Tab Content -->\\n\\t\\t<div class=\\"tab-content\\">\\n\\t\\t\\t{#if activeTab === 'overview'}\\n\\t\\t\\t\\t<div class=\\"charts-grid\\">\\n\\t\\t\\t\\t\\t<div class=\\"chart-container full-width\\">\\n\\t\\t\\t\\t\\t\\t<CumulativePnLChart {trades} height={400} />\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\"chart-container\\">\\n\\t\\t\\t\\t\\t\\t<WinRateChart {trades} height={300} />\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\"chart-container\\">\\n\\t\\t\\t\\t\\t\\t<DailyPnLChart {trades} height={300} />\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{:else if activeTab === 'performance'}\\n\\t\\t\\t\\t<div class=\\"performance-metrics\\">\\n\\t\\t\\t\\t\\t<div class=\\"metrics-grid\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\"metric\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>Best Trade</h4>\\n\\t\\t\\t\\t\\t\\t\\t<p class=\\"positive\\">{formatCurrency(stats.bestTrade)}</p>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\"metric\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>Worst Trade</h4>\\n\\t\\t\\t\\t\\t\\t\\t<p class=\\"negative\\">{formatCurrency(stats.worstTrade)}</p>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\"metric\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>Avg Trade Duration</h4>\\n\\t\\t\\t\\t\\t\\t\\t<p>{stats.avgTradeDuration}</p>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\"metric\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>Consecutive Wins</h4>\\n\\t\\t\\t\\t\\t\\t\\t<p>{stats.consecutiveWins}</p>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\"metric\\">\\n\\t\\t\\t\\t\\t\\t\\t<h4>Consecutive Losses</h4>\\n\\t\\t\\t\\t\\t\\t\\t<p>{stats.consecutiveLosses}</p>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\"chart-container full-width\\">\\n\\t\\t\\t\\t\\t\\t<CumulativePnLChart {trades} height={400} />\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{:else if activeTab === 'distribution'}\\n\\t\\t\\t\\t<div class=\\"charts-grid\\">\\n\\t\\t\\t\\t\\t<div class=\\"chart-container full-width\\">\\n\\t\\t\\t\\t\\t\\t<ProfitDistributionChart {trades} height={400} />\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\"chart-container full-width\\">\\n\\t\\t\\t\\t\\t\\t<DailyPnLChart {trades} height={400} />\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{:else if activeTab === 'strategies'}\\n\\t\\t\\t\\t<div class=\\"chart-container full-width\\">\\n\\t\\t\\t\\t\\t<StrategyPerformanceChart {trades} height={500} />\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{:else if activeTab === 'insights'}\\n\\t\\t\\t\\t<div class=\\"insights-section\\">\\n\\t\\t\\t\\t\\t<FeatureGate feature=\\"ai-insights\\" {userPlan}>\\n\\t\\t\\t\\t\\t\\t<AIInsightsPanel {trades} {userPlan} />\\n\\t\\t\\t\\t\\t</FeatureGate>\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t<TradeInsights {trades} {userPlan} showAIInsights={false} />\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t{#if streakAnalysis}\\n\\t\\t\\t\\t\\t\\t<div class=\\"streak-analysis card\\">\\n\\t\\t\\t\\t\\t\\t\\t<h3>Streak Analysis</h3>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\"streak-stats\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\"streak-stat\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"label\\">Current Streak</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"value {streakAnalysis.current_streak_type}\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{streakAnalysis.current_streak} {streakAnalysis.current_streak_type}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\"streak-stat\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"label\\">Max Win Streak</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"value win\\">{streakAnalysis.max_win_streak}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\"streak-stat\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"label\\">Max Loss Streak</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"value loss\\">{streakAnalysis.max_loss_streak}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t{/if}\\n\\t\\t</div>\\n\\t{/if}\\n</div>\\n\\n<style>\\n\\t.analytics-page {\\n\\t\\tmax-width: 1400px;\\n\\t\\tmargin: 0 auto;\\n\\t\\tpadding-bottom: 4rem;\\n\\t}\\n\\t\\n\\t.page-header {\\n\\t\\tmargin-bottom: 2rem;\\n\\t}\\n\\t\\n\\t.page-header h1 {\\n\\t\\tfont-size: 2rem;\\n\\t\\tmargin-bottom: 0.5rem;\\n\\t}\\n\\t\\n\\t.page-header p {\\n\\t\\tcolor: #666;\\n\\t}\\n\\t\\n\\t.loading {\\n\\t\\ttext-align: center;\\n\\t\\tpadding: 4rem;\\n\\t\\tcolor: #666;\\n\\t}\\n\\t\\n\\t.stats-grid {\\n\\t\\tdisplay: grid;\\n\\t\\tgrid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\\n\\t\\tgap: 1rem;\\n\\t\\tmargin-bottom: 2rem;\\n\\t}\\n\\t\\n\\t.stat-card {\\n\\t\\tbackground: white;\\n\\t\\tborder: 1px solid #e0e0e0;\\n\\t\\tborder-radius: 8px;\\n\\t\\tpadding: 1.5rem;\\n\\t}\\n\\t\\n\\t.stat-card h3 {\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tcolor: #666;\\n\\t\\tmargin-bottom: 0.5rem;\\n\\t\\tfont-weight: 500;\\n\\t}\\n\\t\\n\\t.stat-value {\\n\\t\\tfont-size: 1.5rem;\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #333;\\n\\t}\\n\\t\\n\\t.stat-value.positive {\\n\\t\\tcolor: #10b981;\\n\\t}\\n\\t\\n\\t.stat-value.negative {\\n\\t\\tcolor: #ef4444;\\n\\t}\\n\\t\\n\\t.tabs {\\n\\t\\tdisplay: flex;\\n\\t\\tgap: 1rem;\\n\\t\\tmargin-bottom: 2rem;\\n\\t\\tborder-bottom: 1px solid #e0e0e0;\\n\\t\\toverflow-x: auto;\\n\\t}\\n\\t\\n\\t.tab {\\n\\t\\tpadding: 0.75rem 1.5rem;\\n\\t\\tbackground: none;\\n\\t\\tborder: none;\\n\\t\\tcolor: #666;\\n\\t\\tfont-weight: 500;\\n\\t\\tcursor: pointer;\\n\\t\\tposition: relative;\\n\\t\\twhite-space: nowrap;\\n\\t\\ttransition: color 0.2s;\\n\\t}\\n\\t\\n\\t.tab:hover {\\n\\t\\tcolor: #333;\\n\\t}\\n\\t\\n\\t.tab.active {\\n\\t\\tcolor: #10b981;\\n\\t}\\n\\t\\n\\t.tab.active::after {\\n\\t\\tcontent: '';\\n\\t\\tposition: absolute;\\n\\t\\tbottom: -1px;\\n\\t\\tleft: 0;\\n\\t\\tright: 0;\\n\\t\\theight: 2px;\\n\\t\\tbackground: #10b981;\\n\\t}\\n\\t\\n\\t.charts-grid {\\n\\t\\tdisplay: grid;\\n\\t\\tgrid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\\n\\t\\tgap: 1.5rem;\\n\\t}\\n\\t\\n\\t.chart-container {\\n\\t\\tbackground: white;\\n\\t\\tborder-radius: 8px;\\n\\t\\tbox-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n\\t}\\n\\t\\n\\t.chart-container.full-width {\\n\\t\\tgrid-column: 1 / -1;\\n\\t}\\n\\t\\n\\t.performance-metrics {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 2rem;\\n\\t}\\n\\t\\n\\t.metrics-grid {\\n\\t\\tdisplay: grid;\\n\\t\\tgrid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n\\t\\tgap: 1rem;\\n\\t\\tmargin-bottom: 1rem;\\n\\t}\\n\\t\\n\\t.metric {\\n\\t\\tbackground: white;\\n\\t\\tborder: 1px solid #e0e0e0;\\n\\t\\tborder-radius: 8px;\\n\\t\\tpadding: 1.5rem;\\n\\t\\ttext-align: center;\\n\\t}\\n\\t\\n\\t.metric h4 {\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tcolor: #666;\\n\\t\\tmargin-bottom: 0.5rem;\\n\\t\\tfont-weight: 500;\\n\\t}\\n\\t\\n\\t.metric p {\\n\\t\\tfont-size: 1.25rem;\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #333;\\n\\t}\\n\\t\\n\\t.metric p.positive {\\n\\t\\tcolor: #10b981;\\n\\t}\\n\\t\\n\\t.metric p.negative {\\n\\t\\tcolor: #ef4444;\\n\\t}\\n\\t\\n\\t.tab.disabled {\\n\\t\\topacity: 0.5;\\n\\t\\tcursor: not-allowed;\\n\\t}\\n\\t\\n\\t.tab.disabled:hover {\\n\\t\\tcolor: #666;\\n\\t}\\n\\t\\n\\t.insights-section {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 2rem;\\n\\t}\\n\\t\\n\\t.streak-analysis {\\n\\t\\tbackground: white;\\n\\t\\tborder-radius: 8px;\\n\\t\\tpadding: 1.5rem;\\n\\t\\tbox-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n\\t}\\n\\t\\n\\t.streak-analysis h3 {\\n\\t\\tfont-size: 1.25rem;\\n\\t\\tmargin-bottom: 1rem;\\n\\t\\tcolor: #333;\\n\\t}\\n\\t\\n\\t.streak-stats {\\n\\t\\tdisplay: grid;\\n\\t\\tgrid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n\\t\\tgap: 1.5rem;\\n\\t}\\n\\t\\n\\t.streak-stat {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tgap: 0.5rem;\\n\\t}\\n\\t\\n\\t.streak-stat .label {\\n\\t\\tfont-size: 0.875rem;\\n\\t\\tcolor: #666;\\n\\t\\tfont-weight: 500;\\n\\t}\\n\\t\\n\\t.streak-stat .value {\\n\\t\\tfont-size: 1.5rem;\\n\\t\\tfont-weight: 600;\\n\\t\\tcolor: #333;\\n\\t}\\n\\t\\n\\t.streak-stat .value.win {\\n\\t\\tcolor: #10b981;\\n\\t}\\n\\t\\n\\t.streak-stat .value.loss {\\n\\t\\tcolor: #ef4444;\\n\\t}\\n\\t\\n\\t.streak-stat .value.neutral {\\n\\t\\tcolor: #6b7280;\\n\\t}\\n\\t\\n\\t@media (max-width: 768px) {\\n\\t\\t.analytics-page {\\n\\t\\t\\tpadding: 0 1rem 4rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.stats-grid {\\n\\t\\t\\tgrid-template-columns: 1fr 1fr;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.charts-grid {\\n\\t\\t\\tgrid-template-columns: 1fr;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.tabs {\\n\\t\\t\\t-webkit-overflow-scrolling: touch;\\n\\t\\t\\tpadding-bottom: 0.5rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.tab {\\n\\t\\t\\tpadding: 0.5rem 1rem;\\n\\t\\t\\tfont-size: 0.875rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.metrics-grid {\\n\\t\\t\\tgrid-template-columns: 1fr 1fr;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t@media (max-width: 640px) {\\n\\t\\t.page-header h1 {\\n\\t\\t\\tfont-size: 1.5rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.stats-grid {\\n\\t\\t\\tgrid-template-columns: 1fr;\\n\\t\\t\\tgap: 0.75rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.stat-card {\\n\\t\\t\\tpadding: 1rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.stat-value {\\n\\t\\t\\tfont-size: 1.25rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.tabs {\\n\\t\\t\\tgap: 0.5rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.tab {\\n\\t\\t\\tpadding: 0.5rem 0.75rem;\\n\\t\\t\\tfont-size: 0.75rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.metrics-grid {\\n\\t\\t\\tgrid-template-columns: 1fr;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.metric {\\n\\t\\t\\tpadding: 1rem;\\n\\t\\t}\\n\\t\\t\\n\\t\\t.metric p {\\n\\t\\t\\tfont-size: 1rem;\\n\\t\\t}\\n\\t}\\n</style>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${$$result.head += `<!-- HEAD_svelte-1hhf4v1_START -->${$$result.title = `<title>Analytics - TradeSense</title>`, ""}<!-- HEAD_svelte-1hhf4v1_END -->`, ""} <div class="analytics-page svelte-74nk8c"><header class="page-header svelte-74nk8c" data-svelte-h="svelte-1p8lq01"><h1 class="svelte-74nk8c">Trading Analytics</h1> <p class="svelte-74nk8c">Comprehensive analysis of your trading performance</p></header> ${`<div class="loading svelte-74nk8c" data-svelte-h="svelte-l2dixf">Loading analytics...</div>`} </div>`;
});
export {
  Page as default
};
