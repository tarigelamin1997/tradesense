var f=Object.defineProperty;var m=(i,e,r)=>e in i?f(i,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):i[e]=r;var d=(i,e,r)=>m(i,typeof e!="symbol"?e+"":e,r);import{g,d as w,w as y}from"./BnGq5l0c.js";const R="http://localhost:8000";class E{constructor(){d(this,"defaultHeaders",{"Content-Type":"application/json"});d(this,"requestInterceptors",[]);d(this,"responseInterceptors",[]);this.setupInterceptors()}buildUrl(e,r){e.startsWith("/")||(e="/"+e);const t=new URL(`${R}${e}`,window.location.origin);return r&&Object.entries(r).forEach(([s,a])=>{a!=null&&t.searchParams.append(s,String(a))}),t.toString()}applyRequestInterceptors(e){return this.requestInterceptors.reduce((r,t)=>t(r),e)}async applyResponseInterceptors(e){for(const r of this.responseInterceptors)e=await r(e);return e}async handleError(e){let r;try{const t=await e.json();r={message:t.message||t.detail||"An error occurred",code:t.code||"UNKNOWN_ERROR",statusCode:e.status,details:t.details||t}}catch{r={message:e.statusText||"Network error",code:"NETWORK_ERROR",statusCode:e.status,details:{}}}if(e.status===401)window.dispatchEvent(new CustomEvent("auth:unauthorized")),g("/login");else if(e.status===429){const t=e.headers.get("Retry-After");r.retryAfter=t?parseInt(t):void 0,window.dispatchEvent(new CustomEvent("api:rate-limit",{detail:r}))}throw r}setupInterceptors(){this.requestInterceptors.push(e=>{var t;const r=(t=document.querySelector('meta[name="csrf-token"]'))==null?void 0:t.getAttribute("content");return r&&e.headers&&(e.headers["X-CSRF-Token"]=r),e}),this.requestInterceptors.push(e=>(e.headers&&(e.headers["X-Request-ID"]=crypto.randomUUID()),e))}async request(e,r={}){const{params:t,timeout:s=3e4,...a}=r;let o={...a,headers:{...this.defaultHeaders,...a.headers},credentials:"include"};o=this.applyRequestInterceptors(o);const c=new AbortController,n=setTimeout(()=>c.abort(),s);try{const l=await fetch(this.buildUrl(e,t),{...o,signal:c.signal});clearTimeout(n);const u=await this.applyResponseInterceptors(l);return u.ok||await this.handleError(u),u.status===204?{}:await u.json()}catch(l){throw clearTimeout(n),l.name==="AbortError"?{message:"Request timeout",code:"TIMEOUT",statusCode:0,details:{timeout:s}}:l instanceof TypeError&&l.message.includes("fetch")?{message:"Unable to connect to server. Please ensure the backend is running.",code:"NETWORK_ERROR",statusCode:0,details:{originalError:l.message}}:l}}async get(e,r,t){return this.request(e,{...t,method:"GET",params:{...r,...t==null?void 0:t.params}})}async post(e,r,t){return this.request(e,{...t,method:"POST",body:r?JSON.stringify(r):void 0})}async put(e,r,t){return this.request(e,{...t,method:"PUT",body:r?JSON.stringify(r):void 0})}async patch(e,r,t){return this.request(e,{...t,method:"PATCH",body:r?JSON.stringify(r):void 0})}async delete(e,r){return this.request(e,{...r,method:"DELETE"})}async upload(e,r,t){const s=new FormData;return s.append("file",r),t&&Object.entries(t).forEach(([a,o])=>{s.append(a,String(o))}),this.request(e,{method:"POST",body:s,headers:{}})}}const h=new E;function T(){const{subscribe:i,set:e,update:r}=y({user:null,loading:!1,error:null});return{subscribe:i,async login(t){r(s=>({...s,loading:!0,error:null}));try{const s=new URLSearchParams;s.append("username",t.username),s.append("password",t.password);const a="http://localhost:8000";console.log("Attempting login to:",a),console.log("Username:",t.username);const o=`${a}/auth/token`;console.log("Login URL:",o);const c=await fetch(o,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:s.toString(),credentials:"include"});if(!c.ok){const l=await c.json().catch(()=>({}));throw console.error("Login failed:",c.status,c.statusText,l),new Error(l.detail||`Login failed: ${c.status} ${c.statusText}`)}const n=await c.json();if(console.log("Login response:",n),n.access_token){const l=await fetch(`${a}/auth/me`,{headers:{Authorization:`Bearer ${n.access_token}`},credentials:"include"});if(!l.ok)throw new Error("Failed to get user info");const u=await l.json();return r(p=>({...p,user:u,loading:!1,error:null})),{access_token:n.access_token,token_type:"bearer",user:u,mfa_required:n.mfa_required,session_id:n.session_id,methods:n.methods}}throw new Error("No access token received")}catch(s){console.error("Login error:",s),console.error("Error details:",{name:s.name,message:s.message,stack:s.stack});let a="Login failed";throw s.name==="TypeError"&&s.message.includes("Failed to fetch")?a=`Unable to connect to server at ${apiUrl}. Please check if the backend is running and CORS is configured.`:s.message&&(a=s.message),r(o=>({...o,user:null,loading:!1,error:a})),s}},async register(t){var s,a;r(o=>({...o,loading:!0,error:null}));try{const o="http://localhost:8000";console.log("Attempting to register at:",o),console.log("Registration data:",t);const c=`${o}/auth/register`;console.log("Register URL:",c);const n=await fetch(c,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(!n.ok){const u=await n.json().catch(()=>({}));throw console.error("Registration failed:",n.status,n.statusText,u),new Error(u.detail||`Registration failed: ${n.status} ${n.statusText}`)}return console.log("Registration successful"),await this.login({username:t.username,password:t.password})}catch(o){console.error("Registration error:",o);let c="Registration failed";throw(a=(s=o.detail)==null?void 0:s.details)!=null&&a.message?c=o.detail.details.message:o.message?c=o.message:o.detail&&typeof o.detail=="string"&&(c=o.detail),r(n=>({...n,user:null,loading:!1,error:c})),o}},async logout(){try{await fetch("http://localhost:8000/auth/logout",{method:"POST",credentials:"include"})}catch(t){console.error("Logout error:",t)}e({user:null,loading:!1,error:null}),g("/login")},async checkAuth(){r(t=>({...t,loading:!0}));try{const s=await fetch("http://localhost:8000/auth/me",{credentials:"include"});if(!s.ok)throw new Error("Not authenticated");const a=await s.json();r(o=>({...o,user:a,loading:!1,error:null}))}catch{e({user:null,loading:!1,error:null})}},clearError(){r(t=>({...t,error:null}))}}}const U=T(),O=w(U,i=>!!i.user),q={async verifyEmail(i){return h.post("/auth/verify-email",null,{params:{token:i}})},async resendVerification(i){return h.post("/auth/resend-verification",null,{params:{email:i}})},async requestPasswordReset(i){return h.post("/auth/password-reset",{email:i})},async resetPassword(i,e){return h.post("/auth/password-reset/confirm",{token:i,new_password:e})}};export{q as a,U as b,O as i};
