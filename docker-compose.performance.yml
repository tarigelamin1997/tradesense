version: '3.8'

services:
  # Locust master node
  locust-master:
    image: locustio/locust:latest
    ports:
      - "8089:8089"  # Web UI
      - "5557:5557"  # Master communication
    volumes:
      - ./tests/performance:/mnt/locust
    command: -f /mnt/locust/locustfile.py --master --host http://backend:8000
    environment:
      LOCUST_LOCUSTFILE: /mnt/locust/locustfile.py
      LOCUST_HOST: http://backend:8000
      LOCUST_USERS: 100
      LOCUST_SPAWN_RATE: 10
    networks:
      - tradesense-network
    depends_on:
      - backend

  # Locust worker nodes (scale as needed)
  locust-worker:
    image: locustio/locust:latest
    volumes:
      - ./tests/performance:/mnt/locust
    command: -f /mnt/locust/locustfile.py --worker --master-host locust-master
    environment:
      LOCUST_LOCUSTFILE: /mnt/locust/locustfile.py
    networks:
      - tradesense-network
    depends_on:
      - locust-master
    deploy:
      replicas: 4  # Number of worker nodes

  # K6 performance testing
  k6:
    image: grafana/k6:latest
    volumes:
      - ./tests/performance:/scripts
    command: run /scripts/k6-test.js
    environment:
      BASE_URL: http://backend:8000
      K6_OUT: influxdb=http://influxdb:8086/k6
    networks:
      - tradesense-network
    depends_on:
      - backend
      - influxdb
    profiles:
      - k6

  # InfluxDB for K6 metrics
  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_DB: k6
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: admin123
    volumes:
      - influxdb-data:/var/lib/influxdb
    networks:
      - tradesense-network
    profiles:
      - k6

  # Grafana for visualization
  grafana-perf:
    image: grafana/grafana:latest
    ports:
      - "3030:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards/performance:/var/lib/grafana/dashboards
      - grafana-perf-data:/var/lib/grafana
    networks:
      - tradesense-network
    depends_on:
      - influxdb

  # Apache Bench for simple load testing
  ab:
    image: httpd:alpine
    command: |
      sh -c "
        echo 'Running Apache Bench tests...'
        ab -n 1000 -c 100 -H 'Authorization: Bearer test_token' http://backend:8000/api/v1/analytics/dashboard
      "
    networks:
      - tradesense-network
    depends_on:
      - backend
    profiles:
      - ab

  # Siege for load testing
  siege:
    build:
      context: .
      dockerfile: Dockerfile.siege
    volumes:
      - ./tests/performance/urls.txt:/urls.txt
    command: -c 50 -t 60s -f /urls.txt
    networks:
      - tradesense-network
    depends_on:
      - backend
    profiles:
      - siege

  # PostgreSQL with performance tuning
  postgres-perf:
    image: postgres:15
    command: |
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
      -c maintenance_work_mem=512MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=52428kB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=4
      -c max_parallel_maintenance_workers=2
    environment:
      POSTGRES_USER: tradesense
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: tradesense_perf
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres-perf-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - tradesense-network
    profiles:
      - performance

  # Redis with performance monitoring
  redis-perf:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6380:6379"
    volumes:
      - redis-perf-data:/data
    networks:
      - tradesense-network
    profiles:
      - performance

  # Backend with performance profiling
  backend:
    extends:
      file: docker-compose.yml
      service: backend
    environment:
      DATABASE_URL: postgresql://tradesense:${POSTGRES_PASSWORD}@postgres-perf:5432/tradesense_perf
      REDIS_URL: redis://redis-perf:6379/0
      ENVIRONMENT: performance
      DEBUG: false
      LOG_LEVEL: WARNING
      # Enable profiling
      PROFILE: true
      PROFILE_DIR: /app/profiles
    volumes:
      - ./profiles:/app/profiles
    command: >
      gunicorn main:app
      --worker-class uvicorn.workers.UvicornWorker
      --workers 4
      --threads 2
      --worker-connections 1000
      --max-requests 10000
      --max-requests-jitter 1000
      --timeout 30
      --keep-alive 5
      --bind 0.0.0.0:8000
      --access-logfile -
      --error-logfile -
      --log-level warning
    profiles:
      - performance

  # Frontend for end-to-end testing
  frontend:
    extends:
      file: docker-compose.yml
      service: frontend
    environment:
      NODE_ENV: production
      VITE_API_BASE_URL: http://backend:8000
    profiles:
      - performance

volumes:
  influxdb-data:
  grafana-perf-data:
  postgres-perf-data:
  redis-perf-data:

networks:
  tradesense-network:
    external: true
    name: tradesense_default