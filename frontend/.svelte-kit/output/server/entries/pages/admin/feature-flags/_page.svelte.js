import { c as create_ssr_component, v as validate_component } from "../../../../chunks/ssr.js";
import "../../../../chunks/client.js";
import { a as authStore } from "../../../../chunks/auth2.js";
import { I as Icon } from "../../../../chunks/Icon.js";
const css = {
  code: ".spinner.svelte-18k6mrr{width:2rem;height:2rem;border-width:4px;border-color:#c7d2fe;border-top-color:#4f46e5;border-radius:9999px;animation:spin 1s linear infinite}.form-input.svelte-18k6mrr,.form-select.svelte-18k6mrr,.form-textarea.svelte-18k6mrr{width:100%;border-radius:0.375rem;border-color:#d1d5db;box-shadow:0 1px 2px 0 rgba(0, 0, 0, 0.05)}.form-input.svelte-18k6mrr:focus,.form-select.svelte-18k6mrr:focus,.form-textarea.svelte-18k6mrr:focus{border-color:#6366f1;box-shadow:0 0 0 3px rgba(99, 102, 241, 0.1)}.btn.svelte-18k6mrr{padding:0.5rem 1rem;border-radius:0.375rem;font-weight:500;transition:background-color 0.15s ease-in-out, color 0.15s ease-in-out}.btn-primary.svelte-18k6mrr{background-color:#4f46e5;color:white}.btn-primary.svelte-18k6mrr:hover{background-color:#4338ca}.btn-secondary.svelte-18k6mrr{background-color:#e5e7eb;color:#1f2937}.btn-secondary.svelte-18k6mrr:hover{background-color:#d1d5db}.alert.svelte-18k6mrr{padding:1rem;border-radius:0.375rem}.alert-error.svelte-18k6mrr{background-color:#fef2f2;color:#991b1b;border:1px solid #fecaca}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from 'svelte';\\n    import { browser } from '$app/environment';\\n    import { api } from '$lib/api/client-safe';\\n    import { authStore } from '$lib/stores/auth';\\n    import Icon from '$lib/components/Icon.svelte';\\n    \\n    let user = null;\\n    let flags = [];\\n    let loading = true;\\n    let error = null;\\n    let showCreateModal = false;\\n    let showEditModal = false;\\n    let selectedFlag = null;\\n    \\n    // Form data\\n    let flagForm = {\\n        key: '',\\n        name: '',\\n        description: '',\\n        type: 'boolean',\\n        default_value: false,\\n        targeting_rules: [],\\n        variants: {}\\n    };\\n    \\n    // New targeting rule form\\n    let newRule = {\\n        user_tiers: [],\\n        user_percentage: 100,\\n        min_trades: 0\\n    };\\n    \\n    authStore.subscribe(value => {\\n        user = value.user;\\n        if (browser && !user?.is_admin) {\\n            window.location.href = '/';\\n        }\\n    });\\n    \\n    async function loadFlags() {\\n        try {\\n            loading = true;\\n            error = null;\\n            \\n            const response = await api.get('/feature-flags/?include_inactive=true');\\n            flags = response.flags;\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to load feature flags';\\n        } finally {\\n            loading = false;\\n        }\\n    }\\n    \\n    async function createFlag() {\\n        try {\\n            // Prepare data\\n            const data = {\\n                ...flagForm,\\n                default_value: flagForm.type === 'boolean' ? \\n                    flagForm.default_value === true : \\n                    flagForm.default_value\\n            };\\n            \\n            await api.post('/feature-flags/', data);\\n            \\n            showCreateModal = false;\\n            resetForm();\\n            await loadFlags();\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to create feature flag';\\n        }\\n    }\\n    \\n    async function updateFlag() {\\n        if (!selectedFlag) return;\\n        \\n        try {\\n            const updates = {\\n                name: flagForm.name,\\n                description: flagForm.description,\\n                status: flagForm.status,\\n                default_value: flagForm.default_value,\\n                targeting_rules: flagForm.targeting_rules\\n            };\\n            \\n            await api.put(\`/feature-flags/\${selectedFlag.id}\`, updates);\\n            \\n            showEditModal = false;\\n            selectedFlag = null;\\n            resetForm();\\n            await loadFlags();\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to update feature flag';\\n        }\\n    }\\n    \\n    async function toggleFlag(flag) {\\n        try {\\n            const newStatus = flag.status === 'active' ? 'inactive' : 'active';\\n            await api.put(\`/feature-flags/\${flag.id}\`, { status: newStatus });\\n            await loadFlags();\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to toggle feature flag';\\n        }\\n    }\\n    \\n    async function deleteFlag(flagId) {\\n        if (!confirm('Are you sure you want to delete this feature flag?')) {\\n            return;\\n        }\\n        \\n        try {\\n            await api.delete(\`/feature-flags/\${flagId}\`);\\n            await loadFlags();\\n            \\n        } catch (err) {\\n            error = err.message || 'Failed to delete feature flag';\\n        }\\n    }\\n    \\n    async function testFlag(flag) {\\n        const testUserId = prompt('Enter user ID to test with:');\\n        if (!testUserId) return;\\n        \\n        try {\\n            const response = await api.post(\`/feature-flags/test/\${flag.key}\`, {\\n                test_user_id: testUserId\\n            });\\n            \\n            alert(\`Flag value for user \${testUserId}: \${JSON.stringify(response.value)}\`);\\n            \\n        } catch (err) {\\n            alert(\`Test failed: \${err.message}\`);\\n        }\\n    }\\n    \\n    function editFlag(flag) {\\n        selectedFlag = flag;\\n        flagForm = {\\n            key: flag.key,\\n            name: flag.name,\\n            description: flag.description,\\n            type: flag.type,\\n            status: flag.status,\\n            default_value: flag.default_value,\\n            targeting_rules: flag.targeting_rules || [],\\n            variants: flag.variants || {}\\n        };\\n        showEditModal = true;\\n    }\\n    \\n    function addTargetingRule() {\\n        flagForm.targeting_rules = [\\n            ...flagForm.targeting_rules,\\n            { ...newRule }\\n        ];\\n        \\n        // Reset rule form\\n        newRule = {\\n            user_tiers: [],\\n            user_percentage: 100,\\n            min_trades: 0\\n        };\\n    }\\n    \\n    function removeTargetingRule(index) {\\n        flagForm.targeting_rules = flagForm.targeting_rules.filter((_, i) => i !== index);\\n    }\\n    \\n    function resetForm() {\\n        flagForm = {\\n            key: '',\\n            name: '',\\n            description: '',\\n            type: 'boolean',\\n            default_value: false,\\n            targeting_rules: [],\\n            variants: {}\\n        };\\n        \\n        newRule = {\\n            user_tiers: [],\\n            user_percentage: 100,\\n            min_trades: 0\\n        };\\n    }\\n    \\n    function getFlagTypeIcon(type) {\\n        const icons = {\\n            boolean: 'toggle-left',\\n            percentage: 'percent',\\n            user_list: 'users',\\n            variant: 'shuffle'\\n        };\\n        return icons[type] || 'flag';\\n    }\\n    \\n    function getStatusColor(status) {\\n        const colors = {\\n            active: 'text-green-600 bg-green-100',\\n            inactive: 'text-gray-600 bg-gray-100',\\n            scheduled: 'text-blue-600 bg-blue-100',\\n            expired: 'text-red-600 bg-red-100'\\n        };\\n        return colors[status] || 'text-gray-600 bg-gray-100';\\n    }\\n    \\n    onMount(() => {\\n        loadFlags();\\n    });\\n<\/script>\\n\\n<div class=\\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\\">\\n    <div class=\\"mb-8 flex justify-between items-center\\">\\n        <div>\\n            <h1 class=\\"text-3xl font-bold text-gray-900\\">Feature Flags</h1>\\n            <p class=\\"mt-2 text-gray-600\\">Manage feature rollouts and A/B tests</p>\\n        </div>\\n        <button\\n            on:click={() => showCreateModal = true}\\n            class=\\"btn btn-primary\\"\\n        >\\n            <Icon name=\\"plus\\" class=\\"w-5 h-5 mr-2\\" />\\n            Create Flag\\n        </button>\\n    </div>\\n    \\n    {#if loading}\\n        <div class=\\"flex justify-center py-12\\">\\n            <div class=\\"spinner\\"></div>\\n        </div>\\n    {:else if error}\\n        <div class=\\"alert alert-error mb-6\\">{error}</div>\\n    {:else}\\n        <div class=\\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\\">\\n            <table class=\\"min-w-full divide-y divide-gray-200\\">\\n                <thead class=\\"bg-gray-50\\">\\n                    <tr>\\n                        <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                            Flag\\n                        </th>\\n                        <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                            Type\\n                        </th>\\n                        <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                            Status\\n                        </th>\\n                        <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                            Default Value\\n                        </th>\\n                        <th class=\\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                            Targeting\\n                        </th>\\n                        <th class=\\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\\">\\n                            Actions\\n                        </th>\\n                    </tr>\\n                </thead>\\n                <tbody class=\\"bg-white divide-y divide-gray-200\\">\\n                    {#each flags as flag}\\n                        <tr>\\n                            <td class=\\"px-6 py-4\\">\\n                                <div>\\n                                    <p class=\\"text-sm font-medium text-gray-900\\">{flag.name}</p>\\n                                    <p class=\\"text-xs text-gray-500 font-mono\\">{flag.key}</p>\\n                                    {#if flag.description}\\n                                        <p class=\\"text-xs text-gray-600 mt-1\\">{flag.description}</p>\\n                                    {/if}\\n                                </div>\\n                            </td>\\n                            <td class=\\"px-6 py-4\\">\\n                                <div class=\\"flex items-center\\">\\n                                    <Icon \\n                                        name={getFlagTypeIcon(flag.type)}\\n                                        class=\\"w-4 h-4 text-gray-400 mr-2\\"\\n                                    />\\n                                    <span class=\\"text-sm text-gray-900 capitalize\\">\\n                                        {flag.type.replace('_', ' ')}\\n                                    </span>\\n                                </div>\\n                            </td>\\n                            <td class=\\"px-6 py-4\\">\\n                                <span class=\\"inline-flex px-2 py-1 text-xs font-medium rounded-full\\n                                           {getStatusColor(flag.status)}\\">\\n                                    {flag.status}\\n                                </span>\\n                            </td>\\n                            <td class=\\"px-6 py-4 text-sm text-gray-900\\">\\n                                {#if flag.type === 'boolean'}\\n                                    {flag.default_value ? 'Enabled' : 'Disabled'}\\n                                {:else}\\n                                    {flag.default_value}\\n                                {/if}\\n                            </td>\\n                            <td class=\\"px-6 py-4\\">\\n                                {#if flag.targeting_rules && flag.targeting_rules.length > 0}\\n                                    <div class=\\"text-xs text-gray-600\\">\\n                                        {flag.targeting_rules.length} rule{flag.targeting_rules.length > 1 ? 's' : ''}\\n                                    </div>\\n                                {:else}\\n                                    <span class=\\"text-xs text-gray-400\\">No targeting</span>\\n                                {/if}\\n                            </td>\\n                            <td class=\\"px-6 py-4 text-right text-sm font-medium\\">\\n                                <div class=\\"flex items-center justify-end space-x-2\\">\\n                                    <button\\n                                        on:click={() => toggleFlag(flag)}\\n                                        class=\\"text-gray-400 hover:text-gray-600\\"\\n                                        title=\\"Toggle status\\"\\n                                    >\\n                                        <Icon name={flag.status === 'active' ? 'toggle-right' : 'toggle-left'} \\n                                              class=\\"w-5 h-5\\" />\\n                                    </button>\\n                                    <button\\n                                        on:click={() => editFlag(flag)}\\n                                        class=\\"text-indigo-600 hover:text-indigo-900\\"\\n                                        title=\\"Edit flag\\"\\n                                    >\\n                                        <Icon name=\\"edit\\" class=\\"w-5 h-5\\" />\\n                                    </button>\\n                                    <button\\n                                        on:click={() => testFlag(flag)}\\n                                        class=\\"text-green-600 hover:text-green-900\\"\\n                                        title=\\"Test flag\\"\\n                                    >\\n                                        <Icon name=\\"play\\" class=\\"w-5 h-5\\" />\\n                                    </button>\\n                                    <a\\n                                        href=\\"/admin/feature-flags/{flag.key}/analytics\\"\\n                                        class=\\"text-blue-600 hover:text-blue-900\\"\\n                                        title=\\"View analytics\\"\\n                                    >\\n                                        <Icon name=\\"bar-chart-2\\" class=\\"w-5 h-5\\" />\\n                                    </a>\\n                                    {#if !flag.id.startsWith('default_')}\\n                                        <button\\n                                            on:click={() => deleteFlag(flag.id)}\\n                                            class=\\"text-red-600 hover:text-red-900\\"\\n                                            title=\\"Delete flag\\"\\n                                        >\\n                                            <Icon name=\\"trash\\" class=\\"w-5 h-5\\" />\\n                                        </button>\\n                                    {/if}\\n                                </div>\\n                            </td>\\n                        </tr>\\n                    {/each}\\n                </tbody>\\n            </table>\\n        </div>\\n    {/if}\\n</div>\\n\\n<!-- Create Flag Modal -->\\n{#if showCreateModal}\\n    <div class=\\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\\">\\n        <div class=\\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 p-6 max-h-[90vh] overflow-y-auto\\">\\n            <h3 class=\\"text-xl font-semibold text-gray-900 mb-4\\">Create Feature Flag</h3>\\n            \\n            <form on:submit|preventDefault={createFlag} class=\\"space-y-4\\">\\n                <div class=\\"grid grid-cols-2 gap-4\\">\\n                    <div>\\n                        <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                            Key *\\n                        </label>\\n                        <input\\n                            type=\\"text\\"\\n                            bind:value={flagForm.key}\\n                            pattern=\\"[a-z0-9_]+\\"\\n                            class=\\"form-input\\"\\n                            placeholder=\\"feature_key\\"\\n                            required\\n                        />\\n                        <p class=\\"mt-1 text-xs text-gray-500\\">\\n                            Lowercase letters, numbers, and underscores only\\n                        </p>\\n                    </div>\\n                    \\n                    <div>\\n                        <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                            Name *\\n                        </label>\\n                        <input\\n                            type=\\"text\\"\\n                            bind:value={flagForm.name}\\n                            class=\\"form-input\\"\\n                            placeholder=\\"Feature Name\\"\\n                            required\\n                        />\\n                    </div>\\n                </div>\\n                \\n                <div>\\n                    <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                        Description\\n                    </label>\\n                    <textarea\\n                        bind:value={flagForm.description}\\n                        rows=\\"2\\"\\n                        class=\\"form-textarea\\"\\n                        placeholder=\\"What does this feature do?\\"\\n                    ></textarea>\\n                </div>\\n                \\n                <div class=\\"grid grid-cols-2 gap-4\\">\\n                    <div>\\n                        <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                            Type\\n                        </label>\\n                        <select bind:value={flagForm.type} class=\\"form-select\\">\\n                            <option value=\\"boolean\\">Boolean (On/Off)</option>\\n                            <option value=\\"percentage\\">Percentage Rollout</option>\\n                            <option value=\\"user_list\\">User List</option>\\n                            <option value=\\"variant\\">A/B Test Variant</option>\\n                        </select>\\n                    </div>\\n                    \\n                    <div>\\n                        <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                            Default Value\\n                        </label>\\n                        {#if flagForm.type === 'boolean'}\\n                            <select bind:value={flagForm.default_value} class=\\"form-select\\">\\n                                <option value={false}>Disabled</option>\\n                                <option value={true}>Enabled</option>\\n                            </select>\\n                        {:else}\\n                            <input\\n                                type=\\"text\\"\\n                                bind:value={flagForm.default_value}\\n                                class=\\"form-input\\"\\n                                placeholder=\\"Default value\\"\\n                            />\\n                        {/if}\\n                    </div>\\n                </div>\\n                \\n                <!-- Targeting Rules -->\\n                <div>\\n                    <h4 class=\\"text-sm font-medium text-gray-700 mb-2\\">Targeting Rules</h4>\\n                    \\n                    {#if flagForm.targeting_rules.length > 0}\\n                        <div class=\\"space-y-2 mb-4\\">\\n                            {#each flagForm.targeting_rules as rule, index}\\n                                <div class=\\"bg-gray-50 rounded-md p-3 relative\\">\\n                                    <button\\n                                        type=\\"button\\"\\n                                        on:click={() => removeTargetingRule(index)}\\n                                        class=\\"absolute top-2 right-2 text-red-600 hover:text-red-800\\"\\n                                    >\\n                                        <Icon name=\\"x\\" class=\\"w-4 h-4\\" />\\n                                    </button>\\n                                    \\n                                    <div class=\\"text-sm\\">\\n                                        {#if rule.user_tiers?.length > 0}\\n                                            <p>Tiers: {rule.user_tiers.join(', ')}</p>\\n                                        {/if}\\n                                        {#if rule.user_percentage < 100}\\n                                            <p>Rollout: {rule.user_percentage}%</p>\\n                                        {/if}\\n                                        {#if rule.min_trades > 0}\\n                                            <p>Min trades: {rule.min_trades}</p>\\n                                        {/if}\\n                                    </div>\\n                                </div>\\n                            {/each}\\n                        </div>\\n                    {/if}\\n                    \\n                    <div class=\\"border border-gray-300 rounded-md p-3\\">\\n                        <p class=\\"text-sm font-medium text-gray-700 mb-2\\">Add Rule</p>\\n                        <div class=\\"grid grid-cols-3 gap-2\\">\\n                            <div>\\n                                <label class=\\"block text-xs text-gray-600\\">User Tiers</label>\\n                                <select \\n                                    multiple\\n                                    bind:value={newRule.user_tiers}\\n                                    class=\\"form-select text-sm\\"\\n                                    size=\\"3\\"\\n                                >\\n                                    <option value=\\"free\\">Free</option>\\n                                    <option value=\\"pro\\">Pro</option>\\n                                    <option value=\\"premium\\">Premium</option>\\n                                </select>\\n                            </div>\\n                            <div>\\n                                <label class=\\"block text-xs text-gray-600\\">Percentage</label>\\n                                <input\\n                                    type=\\"number\\"\\n                                    bind:value={newRule.user_percentage}\\n                                    min=\\"0\\"\\n                                    max=\\"100\\"\\n                                    class=\\"form-input text-sm\\"\\n                                />\\n                            </div>\\n                            <div>\\n                                <label class=\\"block text-xs text-gray-600\\">Min Trades</label>\\n                                <input\\n                                    type=\\"number\\"\\n                                    bind:value={newRule.min_trades}\\n                                    min=\\"0\\"\\n                                    class=\\"form-input text-sm\\"\\n                                />\\n                            </div>\\n                        </div>\\n                        <button\\n                            type=\\"button\\"\\n                            on:click={addTargetingRule}\\n                            class=\\"mt-2 text-sm text-indigo-600 hover:text-indigo-700\\"\\n                        >\\n                            + Add Rule\\n                        </button>\\n                    </div>\\n                </div>\\n                \\n                <div class=\\"mt-6 flex justify-end space-x-3\\">\\n                    <button\\n                        type=\\"button\\"\\n                        on:click={() => {showCreateModal = false; resetForm();}}\\n                        class=\\"btn btn-secondary\\"\\n                    >\\n                        Cancel\\n                    </button>\\n                    <button\\n                        type=\\"submit\\"\\n                        class=\\"btn btn-primary\\"\\n                    >\\n                        Create Flag\\n                    </button>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\\n{/if}\\n\\n<!-- Edit Flag Modal -->\\n{#if showEditModal && selectedFlag}\\n    <div class=\\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\\">\\n        <div class=\\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 p-6 max-h-[90vh] overflow-y-auto\\">\\n            <h3 class=\\"text-xl font-semibold text-gray-900 mb-4\\">Edit Feature Flag</h3>\\n            \\n            <form on:submit|preventDefault={updateFlag} class=\\"space-y-4\\">\\n                <div>\\n                    <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                        Key\\n                    </label>\\n                    <input\\n                        type=\\"text\\"\\n                        value={flagForm.key}\\n                        class=\\"form-input bg-gray-100\\"\\n                        disabled\\n                    />\\n                </div>\\n                \\n                <div>\\n                    <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                        Name\\n                    </label>\\n                    <input\\n                        type=\\"text\\"\\n                        bind:value={flagForm.name}\\n                        class=\\"form-input\\"\\n                        required\\n                    />\\n                </div>\\n                \\n                <div>\\n                    <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                        Description\\n                    </label>\\n                    <textarea\\n                        bind:value={flagForm.description}\\n                        rows=\\"2\\"\\n                        class=\\"form-textarea\\"\\n                    ></textarea>\\n                </div>\\n                \\n                <div class=\\"grid grid-cols-2 gap-4\\">\\n                    <div>\\n                        <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                            Status\\n                        </label>\\n                        <select bind:value={flagForm.status} class=\\"form-select\\">\\n                            <option value=\\"active\\">Active</option>\\n                            <option value=\\"inactive\\">Inactive</option>\\n                        </select>\\n                    </div>\\n                    \\n                    <div>\\n                        <label class=\\"block text-sm font-medium text-gray-700 mb-1\\">\\n                            Default Value\\n                        </label>\\n                        {#if flagForm.type === 'boolean'}\\n                            <select bind:value={flagForm.default_value} class=\\"form-select\\">\\n                                <option value={false}>Disabled</option>\\n                                <option value={true}>Enabled</option>\\n                            </select>\\n                        {:else}\\n                            <input\\n                                type=\\"text\\"\\n                                bind:value={flagForm.default_value}\\n                                class=\\"form-input\\"\\n                            />\\n                        {/if}\\n                    </div>\\n                </div>\\n                \\n                <div class=\\"mt-6 flex justify-end space-x-3\\">\\n                    <button\\n                        type=\\"button\\"\\n                        on:click={() => {showEditModal = false; selectedFlag = null; resetForm();}}\\n                        class=\\"btn btn-secondary\\"\\n                    >\\n                        Cancel\\n                    </button>\\n                    <button\\n                        type=\\"submit\\"\\n                        class=\\"btn btn-primary\\"\\n                    >\\n                        Update Flag\\n                    </button>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\\n{/if}\\n\\n<style>\\n    .spinner {\\n        width: 2rem; height: 2rem; border-width: 4px; border-color: #c7d2fe; border-top-color: #4f46e5; border-radius: 9999px; animation: spin 1s linear infinite;\\n    }\\n    \\n    .form-input, .form-select, .form-textarea {\\n        width: 100%;\\n        border-radius: 0.375rem;\\n        border-color: #d1d5db;\\n        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\\n    }\\n    \\n    .form-input:focus, .form-select:focus, .form-textarea:focus {\\n        border-color: #6366f1;\\n        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\\n    }\\n    \\n    .btn {\\n        padding: 0.5rem 1rem;\\n        border-radius: 0.375rem;\\n        font-weight: 500;\\n        transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;\\n    }\\n    \\n    .btn-primary {\\n        background-color: #4f46e5;\\n        color: white;\\n    }\\n    \\n    .btn-primary:hover {\\n        background-color: #4338ca;\\n    }\\n    \\n    .btn-secondary {\\n        background-color: #e5e7eb;\\n        color: #1f2937;\\n    }\\n    \\n    .btn-secondary:hover {\\n        background-color: #d1d5db;\\n    }\\n    \\n    .alert {\\n        padding: 1rem; border-radius: 0.375rem;\\n    }\\n    \\n    .alert-error {\\n        background-color: #fef2f2;\\n        color: #991b1b;\\n        border: 1px solid #fecaca;\\n    }\\n</style>"],"names":[],"mappings":"AAynBI,uBAAS,CACL,KAAK,CAAE,IAAI,CAAE,MAAM,CAAE,IAAI,CAAE,YAAY,CAAE,GAAG,CAAE,YAAY,CAAE,OAAO,CAAE,gBAAgB,CAAE,OAAO,CAAE,aAAa,CAAE,MAAM,CAAE,SAAS,CAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QACrJ,CAEA,0BAAW,CAAE,2BAAY,CAAE,6BAAe,CACtC,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,QAAQ,CACvB,YAAY,CAAE,OAAO,CACrB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAC9C,CAEA,0BAAW,MAAM,CAAE,2BAAY,MAAM,CAAE,6BAAc,MAAO,CACxD,YAAY,CAAE,OAAO,CACrB,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAChD,CAEA,mBAAK,CACD,OAAO,CAAE,MAAM,CAAC,IAAI,CACpB,aAAa,CAAE,QAAQ,CACvB,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,gBAAgB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,WAChE,CAEA,2BAAa,CACT,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KACX,CAEA,2BAAY,MAAO,CACf,gBAAgB,CAAE,OACtB,CAEA,6BAAe,CACX,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OACX,CAEA,6BAAc,MAAO,CACjB,gBAAgB,CAAE,OACtB,CAEA,qBAAO,CACH,OAAO,CAAE,IAAI,CAAE,aAAa,CAAE,QAClC,CAEA,2BAAa,CACT,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OACtB"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  authStore.subscribe((value) => {
    value.user;
  });
  $$result.css.add(css);
  return `<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8"><div class="mb-8 flex justify-between items-center"><div data-svelte-h="svelte-1lankpr"><h1 class="text-3xl font-bold text-gray-900">Feature Flags</h1> <p class="mt-2 text-gray-600">Manage feature rollouts and A/B tests</p></div> <button class="btn btn-primary svelte-18k6mrr">${validate_component(Icon, "Icon").$$render($$result, { name: "plus", class: "w-5 h-5 mr-2" }, {}, {})}
            Create Flag</button></div> ${`<div class="flex justify-center py-12" data-svelte-h="svelte-em5o00"><div class="spinner svelte-18k6mrr"></div></div>`}</div>  ${``}  ${``}`;
});
export {
  Page as default
};
