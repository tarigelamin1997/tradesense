var g=Object.defineProperty;var f=(n,e,r)=>e in n?g(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r;var d=(n,e,r)=>f(n,typeof e!="symbol"?e+"":e,r);import{g as h,d as w,w as m}from"./CMDLyNOv.js";const y="https://tradesense-backend-production.up.railway.app";class R{constructor(){d(this,"defaultHeaders",{"Content-Type":"application/json"});d(this,"requestInterceptors",[]);d(this,"responseInterceptors",[]);this.setupInterceptors()}buildUrl(e,r){e.startsWith("/")||(e="/"+e);const t=new URL(`${y}${e}`,window.location.origin);return r&&Object.entries(r).forEach(([a,o])=>{o!=null&&t.searchParams.append(a,String(o))}),t.toString()}applyRequestInterceptors(e){return this.requestInterceptors.reduce((r,t)=>t(r),e)}async applyResponseInterceptors(e){for(const r of this.responseInterceptors)e=await r(e);return e}async handleError(e){let r;try{const t=await e.json();r={message:t.message||t.detail||"An error occurred",code:t.code||"UNKNOWN_ERROR",statusCode:e.status,details:t.details||t}}catch{r={message:e.statusText||"Network error",code:"NETWORK_ERROR",statusCode:e.status,details:{}}}if(e.status===401)window.dispatchEvent(new CustomEvent("auth:unauthorized")),h("/login");else if(e.status===429){const t=e.headers.get("Retry-After");r.retryAfter=t?parseInt(t):void 0,window.dispatchEvent(new CustomEvent("api:rate-limit",{detail:r}))}throw r}setupInterceptors(){this.requestInterceptors.push(e=>{var t;const r=(t=document.querySelector('meta[name="csrf-token"]'))==null?void 0:t.getAttribute("content");return r&&e.headers&&(e.headers["X-CSRF-Token"]=r),e}),this.requestInterceptors.push(e=>(e.headers&&(e.headers["X-Request-ID"]=crypto.randomUUID()),e))}async request(e,r={}){const{params:t,timeout:a=3e4,...o}=r;let s={...o,headers:{...this.defaultHeaders,...o.headers},credentials:"include"};s=this.applyRequestInterceptors(s);const i=new AbortController,c=setTimeout(()=>i.abort(),a);try{const u=await fetch(this.buildUrl(e,t),{...s,signal:i.signal});clearTimeout(c);const l=await this.applyResponseInterceptors(u);return l.ok||await this.handleError(l),l.status===204?{}:await l.json()}catch(u){throw clearTimeout(c),u.name==="AbortError"?{message:"Request timeout",code:"TIMEOUT",statusCode:0,details:{timeout:a}}:u instanceof TypeError&&u.message.includes("fetch")?{message:"Unable to connect to server. Please ensure the backend is running.",code:"NETWORK_ERROR",statusCode:0,details:{originalError:u.message}}:u}}async get(e,r,t){return this.request(e,{...t,method:"GET",params:{...r,...t==null?void 0:t.params}})}async post(e,r,t){return this.request(e,{...t,method:"POST",body:r?JSON.stringify(r):void 0})}async put(e,r,t){return this.request(e,{...t,method:"PUT",body:r?JSON.stringify(r):void 0})}async patch(e,r,t){return this.request(e,{...t,method:"PATCH",body:r?JSON.stringify(r):void 0})}async delete(e,r){return this.request(e,{...r,method:"DELETE"})}async upload(e,r,t){const a=new FormData;return a.append("file",r),t&&Object.entries(t).forEach(([o,s])=>{a.append(o,String(s))}),this.request(e,{method:"POST",body:a,headers:{}})}}const p=new R;function b(){const{subscribe:n,set:e,update:r}=m({user:null,loading:!1,error:null});return{subscribe:n,async login(t){r(a=>({...a,loading:!0,error:null}));try{const a=new URLSearchParams;a.append("username",t.username),a.append("password",t.password),console.log("Attempting login with username:",t.username);const o=await fetch("https://tradesense-backend-production.up.railway.app/auth/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:a.toString(),credentials:"include"});if(!o.ok){const i=await o.json().catch(()=>({}));throw new Error(i.detail||"Login failed")}const s=await o.json();if(console.log("Login response:",s),s.access_token){const i=await fetch("https://tradesense-backend-production.up.railway.app/auth/me",{headers:{Authorization:`Bearer ${s.access_token}`},credentials:"include"});if(!i.ok)throw new Error("Failed to get user info");const c=await i.json();return r(u=>({...u,user:c,loading:!1,error:null})),{access_token:s.access_token,token_type:"bearer",user:c,mfa_required:s.mfa_required,session_id:s.session_id,methods:s.methods}}throw new Error("No access token received")}catch(a){console.error("Login error:",a);let o="Login failed";throw a.message&&a.message.includes("fetch")?o="Unable to connect to server. Please ensure the backend is running on port 8000.":a.message&&(o=a.message),r(s=>({...s,user:null,loading:!1,error:o})),a}},async register(t){var a,o;r(s=>({...s,loading:!0,error:null}));try{console.log("Attempting to register with:",t);const s=await fetch("https://tradesense-backend-production.up.railway.app/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(!s.ok){const c=await s.json().catch(()=>({}));throw new Error(c.detail||"Registration failed")}return console.log("Registration successful"),await this.login({username:t.username,password:t.password})}catch(s){console.error("Registration error:",s);let i="Registration failed";throw(o=(a=s.detail)==null?void 0:a.details)!=null&&o.message?i=s.detail.details.message:s.message?i=s.message:s.detail&&typeof s.detail=="string"&&(i=s.detail),r(c=>({...c,user:null,loading:!1,error:i})),s}},async logout(){try{await fetch("https://tradesense-backend-production.up.railway.app/auth/logout",{method:"POST",credentials:"include"})}catch(t){console.error("Logout error:",t)}e({user:null,loading:!1,error:null}),h("/login")},async checkAuth(){r(t=>({...t,loading:!0}));try{const t=await fetch("https://tradesense-backend-production.up.railway.app/auth/me",{credentials:"include"});if(!t.ok)throw new Error("Not authenticated");const a=await t.json();r(o=>({...o,user:a,loading:!1,error:null}))}catch{e({user:null,loading:!1,error:null})}},clearError(){r(t=>({...t,error:null}))}}}const E=b(),I=w(E,n=>!!n.user),O={async verifyEmail(n){return p.post("/auth/verify-email",null,{params:{token:n}})},async resendVerification(n){return p.post("/auth/resend-verification",null,{params:{email:n}})},async requestPasswordReset(n){return p.post("/auth/password-reset",{email:n})},async resetPassword(n,e){return p.post("/auth/password-reset/confirm",{token:n,new_password:e})}};export{O as a,E as b,I as i};
